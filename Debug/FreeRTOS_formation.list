
FreeRTOS_formation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000525c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000130  080053ec  080053ec  000153ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800551c  0800551c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800551c  0800551c  0001551c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005524  08005524  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005524  08005524  00015524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005528  08005528  00015528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800552c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002006c  2**0
                  CONTENTS
 10 .bss          000041c0  2000006c  2000006c  0002006c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000422c  2000422c  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00011819  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002d2d  00000000  00000000  000318f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001018  00000000  00000000  00034628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c4f  00000000  00000000  00035640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002359d  00000000  00000000  0003628f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00011fad  00000000  00000000  0005982c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d3307  00000000  00000000  0006b7d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000049a4  00000000  00000000  0013eae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  00143484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080053d4 	.word	0x080053d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	080053d4 	.word	0x080053d4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	60b9      	str	r1, [r7, #8]
 8000576:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000578:	68fb      	ldr	r3, [r7, #12]
 800057a:	4a07      	ldr	r2, [pc, #28]	; (8000598 <vApplicationGetIdleTaskMemory+0x2c>)
 800057c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	4a06      	ldr	r2, [pc, #24]	; (800059c <vApplicationGetIdleTaskMemory+0x30>)
 8000582:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2280      	movs	r2, #128	; 0x80
 8000588:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800058a:	bf00      	nop
 800058c:	3714      	adds	r7, #20
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	20000088 	.word	0x20000088
 800059c:	20000128 	.word	0x20000128

080005a0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005a8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005ac:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80005b0:	f003 0301 	and.w	r3, r3, #1
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d013      	beq.n	80005e0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80005b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005bc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80005c0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d00b      	beq.n	80005e0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80005c8:	e000      	b.n	80005cc <ITM_SendChar+0x2c>
    {
      __NOP();
 80005ca:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80005cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d0f9      	beq.n	80005ca <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80005d6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80005da:	687a      	ldr	r2, [r7, #4]
 80005dc:	b2d2      	uxtb	r2, r2
 80005de:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80005e0:	687b      	ldr	r3, [r7, #4]
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr

080005ee <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80005ee:	b580      	push	{r7, lr}
 80005f0:	b086      	sub	sp, #24
 80005f2:	af00      	add	r7, sp, #0
 80005f4:	60f8      	str	r0, [r7, #12]
 80005f6:	60b9      	str	r1, [r7, #8]
 80005f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]
 80005fe:	e009      	b.n	8000614 <_write+0x26>
  {
    ITM_SendChar(*ptr++);
 8000600:	68bb      	ldr	r3, [r7, #8]
 8000602:	1c5a      	adds	r2, r3, #1
 8000604:	60ba      	str	r2, [r7, #8]
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff ffc9 	bl	80005a0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800060e:	697b      	ldr	r3, [r7, #20]
 8000610:	3301      	adds	r3, #1
 8000612:	617b      	str	r3, [r7, #20]
 8000614:	697a      	ldr	r2, [r7, #20]
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	429a      	cmp	r2, r3
 800061a:	dbf1      	blt.n	8000600 <_write+0x12>
  }
  return len;
 800061c:	687b      	ldr	r3, [r7, #4]
}
 800061e:	4618      	mov	r0, r3
 8000620:	3718      	adds	r7, #24
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
	...

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b5b0      	push	{r4, r5, r7, lr}
 800062a:	b09e      	sub	sp, #120	; 0x78
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062e:	f000 fb67 	bl	8000d00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000632:	f000 f86f 	bl	8000714 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000636:	f000 f8d7 	bl	80007e8 <MX_GPIO_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of KEY */
  osSemaphoreDef(KEY);
 800063a:	2300      	movs	r3, #0
 800063c:	673b      	str	r3, [r7, #112]	; 0x70
 800063e:	2300      	movs	r3, #0
 8000640:	677b      	str	r3, [r7, #116]	; 0x74
  KEYHandle = osSemaphoreCreate(osSemaphore(KEY), 1);
 8000642:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000646:	2101      	movs	r1, #1
 8000648:	4618      	mov	r0, r3
 800064a:	f001 fe42 	bl	80022d2 <osSemaphoreCreate>
 800064e:	4603      	mov	r3, r0
 8000650:	4a27      	ldr	r2, [pc, #156]	; (80006f0 <main+0xc8>)
 8000652:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000654:	4b27      	ldr	r3, [pc, #156]	; (80006f4 <main+0xcc>)
 8000656:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800065a:	461d      	mov	r5, r3
 800065c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800065e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000660:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000664:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000668:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f001 fdcf 	bl	8002212 <osThreadCreate>
 8000674:	4603      	mov	r3, r0
 8000676:	4a20      	ldr	r2, [pc, #128]	; (80006f8 <main+0xd0>)
 8000678:	6013      	str	r3, [r2, #0]

  /* definition and creation of TASK_1 */
  osThreadDef(TASK_1, task_1_fc, osPriorityNormal, 0, 128);
 800067a:	4b20      	ldr	r3, [pc, #128]	; (80006fc <main+0xd4>)
 800067c:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000680:	461d      	mov	r5, r3
 8000682:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000684:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000686:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800068a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TASK_1Handle = osThreadCreate(osThread(TASK_1), NULL);
 800068e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000692:	2100      	movs	r1, #0
 8000694:	4618      	mov	r0, r3
 8000696:	f001 fdbc 	bl	8002212 <osThreadCreate>
 800069a:	4603      	mov	r3, r0
 800069c:	4a18      	ldr	r2, [pc, #96]	; (8000700 <main+0xd8>)
 800069e:	6013      	str	r3, [r2, #0]

  /* definition and creation of TASK_2 */
  osThreadDef(TASK_2, task_2_fc, osPriorityNormal, 0, 128);
 80006a0:	4b18      	ldr	r3, [pc, #96]	; (8000704 <main+0xdc>)
 80006a2:	f107 041c 	add.w	r4, r7, #28
 80006a6:	461d      	mov	r5, r3
 80006a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ac:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006b0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TASK_2Handle = osThreadCreate(osThread(TASK_2), NULL);
 80006b4:	f107 031c 	add.w	r3, r7, #28
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f001 fda9 	bl	8002212 <osThreadCreate>
 80006c0:	4603      	mov	r3, r0
 80006c2:	4a11      	ldr	r2, [pc, #68]	; (8000708 <main+0xe0>)
 80006c4:	6013      	str	r3, [r2, #0]

  /* definition and creation of TASK_3 */
  osThreadDef(TASK_3, task_3_fc, osPriorityNormal, 0, 128);
 80006c6:	4b11      	ldr	r3, [pc, #68]	; (800070c <main+0xe4>)
 80006c8:	463c      	mov	r4, r7
 80006ca:	461d      	mov	r5, r3
 80006cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TASK_3Handle = osThreadCreate(osThread(TASK_3), NULL);
 80006d8:	463b      	mov	r3, r7
 80006da:	2100      	movs	r1, #0
 80006dc:	4618      	mov	r0, r3
 80006de:	f001 fd98 	bl	8002212 <osThreadCreate>
 80006e2:	4603      	mov	r3, r0
 80006e4:	4a0a      	ldr	r2, [pc, #40]	; (8000710 <main+0xe8>)
 80006e6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006e8:	f001 fd8c 	bl	8002204 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006ec:	e7fe      	b.n	80006ec <main+0xc4>
 80006ee:	bf00      	nop
 80006f0:	20000338 	.word	0x20000338
 80006f4:	080053f8 	.word	0x080053f8
 80006f8:	20000328 	.word	0x20000328
 80006fc:	0800541c 	.word	0x0800541c
 8000700:	2000032c 	.word	0x2000032c
 8000704:	08005440 	.word	0x08005440
 8000708:	20000330 	.word	0x20000330
 800070c:	08005464 	.word	0x08005464
 8000710:	20000334 	.word	0x20000334

08000714 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b094      	sub	sp, #80	; 0x50
 8000718:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800071a:	f107 0320 	add.w	r3, r7, #32
 800071e:	2230      	movs	r2, #48	; 0x30
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f003 ffd1 	bl	80046ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
 8000730:	605a      	str	r2, [r3, #4]
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	60da      	str	r2, [r3, #12]
 8000736:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000738:	2300      	movs	r3, #0
 800073a:	60bb      	str	r3, [r7, #8]
 800073c:	4b28      	ldr	r3, [pc, #160]	; (80007e0 <SystemClock_Config+0xcc>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000740:	4a27      	ldr	r2, [pc, #156]	; (80007e0 <SystemClock_Config+0xcc>)
 8000742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000746:	6413      	str	r3, [r2, #64]	; 0x40
 8000748:	4b25      	ldr	r3, [pc, #148]	; (80007e0 <SystemClock_Config+0xcc>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000754:	2300      	movs	r3, #0
 8000756:	607b      	str	r3, [r7, #4]
 8000758:	4b22      	ldr	r3, [pc, #136]	; (80007e4 <SystemClock_Config+0xd0>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a21      	ldr	r2, [pc, #132]	; (80007e4 <SystemClock_Config+0xd0>)
 800075e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000762:	6013      	str	r3, [r2, #0]
 8000764:	4b1f      	ldr	r3, [pc, #124]	; (80007e4 <SystemClock_Config+0xd0>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800076c:	607b      	str	r3, [r7, #4]
 800076e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000770:	2301      	movs	r3, #1
 8000772:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000774:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800077a:	2302      	movs	r3, #2
 800077c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800077e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000782:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000784:	2308      	movs	r3, #8
 8000786:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000788:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800078c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800078e:	2302      	movs	r3, #2
 8000790:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000792:	2307      	movs	r3, #7
 8000794:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000796:	f107 0320 	add.w	r3, r7, #32
 800079a:	4618      	mov	r0, r3
 800079c:	f000 fda4 	bl	80012e8 <HAL_RCC_OscConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0x96>
  {
    Error_Handler();
 80007a6:	f000 f921 	bl	80009ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007aa:	230f      	movs	r3, #15
 80007ac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ae:	2302      	movs	r3, #2
 80007b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007b6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007ba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007c0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	2105      	movs	r1, #5
 80007c8:	4618      	mov	r0, r3
 80007ca:	f001 f805 	bl	80017d8 <HAL_RCC_ClockConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007d4:	f000 f90a 	bl	80009ec <Error_Handler>
  }
}
 80007d8:	bf00      	nop
 80007da:	3750      	adds	r7, #80	; 0x50
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40007000 	.word	0x40007000

080007e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b088      	sub	sp, #32
 80007ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ee:	f107 030c 	add.w	r3, r7, #12
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]
 80007fa:	60da      	str	r2, [r3, #12]
 80007fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fe:	2300      	movs	r3, #0
 8000800:	60bb      	str	r3, [r7, #8]
 8000802:	4b26      	ldr	r3, [pc, #152]	; (800089c <MX_GPIO_Init+0xb4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a25      	ldr	r2, [pc, #148]	; (800089c <MX_GPIO_Init+0xb4>)
 8000808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b23      	ldr	r3, [pc, #140]	; (800089c <MX_GPIO_Init+0xb4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000816:	60bb      	str	r3, [r7, #8]
 8000818:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	4b1f      	ldr	r3, [pc, #124]	; (800089c <MX_GPIO_Init+0xb4>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4a1e      	ldr	r2, [pc, #120]	; (800089c <MX_GPIO_Init+0xb4>)
 8000824:	f043 0301 	orr.w	r3, r3, #1
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4b1c      	ldr	r3, [pc, #112]	; (800089c <MX_GPIO_Init+0xb4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0301 	and.w	r3, r3, #1
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	4b18      	ldr	r3, [pc, #96]	; (800089c <MX_GPIO_Init+0xb4>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a17      	ldr	r2, [pc, #92]	; (800089c <MX_GPIO_Init+0xb4>)
 8000840:	f043 0308 	orr.w	r3, r3, #8
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b15      	ldr	r3, [pc, #84]	; (800089c <MX_GPIO_Init+0xb4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0308 	and.w	r3, r3, #8
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000852:	2200      	movs	r2, #0
 8000854:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000858:	4811      	ldr	r0, [pc, #68]	; (80008a0 <MX_GPIO_Init+0xb8>)
 800085a:	f000 fd11 	bl	8001280 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800085e:	2301      	movs	r3, #1
 8000860:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086a:	f107 030c 	add.w	r3, r7, #12
 800086e:	4619      	mov	r1, r3
 8000870:	480c      	ldr	r0, [pc, #48]	; (80008a4 <MX_GPIO_Init+0xbc>)
 8000872:	f000 fb69 	bl	8000f48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000876:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800087a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087c:	2301      	movs	r3, #1
 800087e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	2300      	movs	r3, #0
 8000886:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000888:	f107 030c 	add.w	r3, r7, #12
 800088c:	4619      	mov	r1, r3
 800088e:	4804      	ldr	r0, [pc, #16]	; (80008a0 <MX_GPIO_Init+0xb8>)
 8000890:	f000 fb5a 	bl	8000f48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000894:	bf00      	nop
 8000896:	3720      	adds	r7, #32
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40023800 	.word	0x40023800
 80008a0:	40020c00 	.word	0x40020c00
 80008a4:	40020000 	.word	0x40020000

080008a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b084      	sub	sp, #16
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	int i = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]

	  while(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0));
	  osSemaphoreRelease(KEYHandle);
	  printf("Semaphore released \n"); */

	  printf("Default task running");
 80008b4:	480b      	ldr	r0, [pc, #44]	; (80008e4 <StartDefaultTask+0x3c>)
 80008b6:	f003 feb3 	bl	8004620 <iprintf>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 80008ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008be:	480a      	ldr	r0, [pc, #40]	; (80008e8 <StartDefaultTask+0x40>)
 80008c0:	f000 fcf7 	bl	80012b2 <HAL_GPIO_TogglePin>
	  osDelay(1000);
 80008c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008c8:	f001 fcef 	bl	80022aa <osDelay>
	  osThreadResume(TASK_1Handle);
 80008cc:	4b07      	ldr	r3, [pc, #28]	; (80008ec <StartDefaultTask+0x44>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4618      	mov	r0, r3
 80008d2:	f001 fd3d 	bl	8002350 <osThreadResume>
	  osThreadSuspend(defaultTaskHandle);
 80008d6:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <StartDefaultTask+0x48>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4618      	mov	r0, r3
 80008dc:	f001 fd2b 	bl	8002336 <osThreadSuspend>
	  printf("Default task running");
 80008e0:	e7e8      	b.n	80008b4 <StartDefaultTask+0xc>
 80008e2:	bf00      	nop
 80008e4:	08005480 	.word	0x08005480
 80008e8:	40020c00 	.word	0x40020c00
 80008ec:	2000032c 	.word	0x2000032c
 80008f0:	20000328 	.word	0x20000328

080008f4 <task_1_fc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_1_fc */
void task_1_fc(void const * argument)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_1_fc */
  /* Infinite loop */
  for(;;)
  {
	  printf("Task-1 running");
 80008fc:	480b      	ldr	r0, [pc, #44]	; (800092c <task_1_fc+0x38>)
 80008fe:	f003 fe8f 	bl	8004620 <iprintf>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_14);
 8000902:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000906:	480a      	ldr	r0, [pc, #40]	; (8000930 <task_1_fc+0x3c>)
 8000908:	f000 fcd3 	bl	80012b2 <HAL_GPIO_TogglePin>
	  osDelay(1000);
 800090c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000910:	f001 fccb 	bl	80022aa <osDelay>
	  osThreadResume(TASK_2Handle);
 8000914:	4b07      	ldr	r3, [pc, #28]	; (8000934 <task_1_fc+0x40>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4618      	mov	r0, r3
 800091a:	f001 fd19 	bl	8002350 <osThreadResume>
	  osThreadSuspend(TASK_1Handle);
 800091e:	4b06      	ldr	r3, [pc, #24]	; (8000938 <task_1_fc+0x44>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4618      	mov	r0, r3
 8000924:	f001 fd07 	bl	8002336 <osThreadSuspend>
	  printf("Task-1 running");
 8000928:	e7e8      	b.n	80008fc <task_1_fc+0x8>
 800092a:	bf00      	nop
 800092c:	08005498 	.word	0x08005498
 8000930:	40020c00 	.word	0x40020c00
 8000934:	20000330 	.word	0x20000330
 8000938:	2000032c 	.word	0x2000032c

0800093c <task_2_fc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_2_fc */
void task_2_fc(void const * argument)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b082      	sub	sp, #8
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_2_fc */
  /* Infinite loop */
  for(;;)
  {
	  printf("Task-2 running");
 8000944:	480b      	ldr	r0, [pc, #44]	; (8000974 <task_2_fc+0x38>)
 8000946:	f003 fe6b 	bl	8004620 <iprintf>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 800094a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800094e:	480a      	ldr	r0, [pc, #40]	; (8000978 <task_2_fc+0x3c>)
 8000950:	f000 fcaf 	bl	80012b2 <HAL_GPIO_TogglePin>
	  osDelay(1000);
 8000954:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000958:	f001 fca7 	bl	80022aa <osDelay>
	  osThreadResume(TASK_2Handle);
 800095c:	4b07      	ldr	r3, [pc, #28]	; (800097c <task_2_fc+0x40>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4618      	mov	r0, r3
 8000962:	f001 fcf5 	bl	8002350 <osThreadResume>
	  osThreadSuspend(TASK_2Handle);
 8000966:	4b05      	ldr	r3, [pc, #20]	; (800097c <task_2_fc+0x40>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4618      	mov	r0, r3
 800096c:	f001 fce3 	bl	8002336 <osThreadSuspend>
	  printf("Task-2 running");
 8000970:	e7e8      	b.n	8000944 <task_2_fc+0x8>
 8000972:	bf00      	nop
 8000974:	080054a8 	.word	0x080054a8
 8000978:	40020c00 	.word	0x40020c00
 800097c:	20000330 	.word	0x20000330

08000980 <task_3_fc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_task_3_fc */
void task_3_fc(void const * argument)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN task_3_fc */
  /* Infinite loop */
  for(;;)
  {
	  printf("Task-3 running");
 8000988:	480b      	ldr	r0, [pc, #44]	; (80009b8 <task_3_fc+0x38>)
 800098a:	f003 fe49 	bl	8004620 <iprintf>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 800098e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000992:	480a      	ldr	r0, [pc, #40]	; (80009bc <task_3_fc+0x3c>)
 8000994:	f000 fc8d 	bl	80012b2 <HAL_GPIO_TogglePin>
	  osDelay(1000);
 8000998:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800099c:	f001 fc85 	bl	80022aa <osDelay>
	  osThreadResume(defaultTaskHandle);
 80009a0:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <task_3_fc+0x40>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4618      	mov	r0, r3
 80009a6:	f001 fcd3 	bl	8002350 <osThreadResume>
	  osThreadSuspend(TASK_3Handle);
 80009aa:	4b06      	ldr	r3, [pc, #24]	; (80009c4 <task_3_fc+0x44>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	4618      	mov	r0, r3
 80009b0:	f001 fcc1 	bl	8002336 <osThreadSuspend>
	  printf("Task-3 running");
 80009b4:	e7e8      	b.n	8000988 <task_3_fc+0x8>
 80009b6:	bf00      	nop
 80009b8:	080054b8 	.word	0x080054b8
 80009bc:	40020c00 	.word	0x40020c00
 80009c0:	20000328 	.word	0x20000328
 80009c4:	20000334 	.word	0x20000334

080009c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b082      	sub	sp, #8
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a04      	ldr	r2, [pc, #16]	; (80009e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80009d6:	4293      	cmp	r3, r2
 80009d8:	d101      	bne.n	80009de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80009da:	f000 f9b3 	bl	8000d44 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	40010000 	.word	0x40010000

080009ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009f0:	b672      	cpsid	i
}
 80009f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009f4:	e7fe      	b.n	80009f4 <Error_Handler+0x8>
	...

080009f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009fe:	2300      	movs	r3, #0
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <HAL_MspInit+0x54>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a06:	4a11      	ldr	r2, [pc, #68]	; (8000a4c <HAL_MspInit+0x54>)
 8000a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a0e:	4b0f      	ldr	r3, [pc, #60]	; (8000a4c <HAL_MspInit+0x54>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	603b      	str	r3, [r7, #0]
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	; (8000a4c <HAL_MspInit+0x54>)
 8000a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a22:	4a0a      	ldr	r2, [pc, #40]	; (8000a4c <HAL_MspInit+0x54>)
 8000a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a28:	6413      	str	r3, [r2, #64]	; 0x40
 8000a2a:	4b08      	ldr	r3, [pc, #32]	; (8000a4c <HAL_MspInit+0x54>)
 8000a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	210f      	movs	r1, #15
 8000a3a:	f06f 0001 	mvn.w	r0, #1
 8000a3e:	f000 fa59 	bl	8000ef4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800

08000a50 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08c      	sub	sp, #48	; 0x30
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000a60:	2300      	movs	r3, #0
 8000a62:	60bb      	str	r3, [r7, #8]
 8000a64:	4b2f      	ldr	r3, [pc, #188]	; (8000b24 <HAL_InitTick+0xd4>)
 8000a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a68:	4a2e      	ldr	r2, [pc, #184]	; (8000b24 <HAL_InitTick+0xd4>)
 8000a6a:	f043 0301 	orr.w	r3, r3, #1
 8000a6e:	6453      	str	r3, [r2, #68]	; 0x44
 8000a70:	4b2c      	ldr	r3, [pc, #176]	; (8000b24 <HAL_InitTick+0xd4>)
 8000a72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a74:	f003 0301 	and.w	r3, r3, #1
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a7c:	f107 020c 	add.w	r2, r7, #12
 8000a80:	f107 0310 	add.w	r3, r7, #16
 8000a84:	4611      	mov	r1, r2
 8000a86:	4618      	mov	r0, r3
 8000a88:	f001 f8b2 	bl	8001bf0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8000a8c:	f001 f89c 	bl	8001bc8 <HAL_RCC_GetPCLK2Freq>
 8000a90:	4603      	mov	r3, r0
 8000a92:	005b      	lsls	r3, r3, #1
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a98:	4a23      	ldr	r2, [pc, #140]	; (8000b28 <HAL_InitTick+0xd8>)
 8000a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a9e:	0c9b      	lsrs	r3, r3, #18
 8000aa0:	3b01      	subs	r3, #1
 8000aa2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000aa4:	4b21      	ldr	r3, [pc, #132]	; (8000b2c <HAL_InitTick+0xdc>)
 8000aa6:	4a22      	ldr	r2, [pc, #136]	; (8000b30 <HAL_InitTick+0xe0>)
 8000aa8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000aaa:	4b20      	ldr	r3, [pc, #128]	; (8000b2c <HAL_InitTick+0xdc>)
 8000aac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ab0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000ab2:	4a1e      	ldr	r2, [pc, #120]	; (8000b2c <HAL_InitTick+0xdc>)
 8000ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000ab8:	4b1c      	ldr	r3, [pc, #112]	; (8000b2c <HAL_InitTick+0xdc>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000abe:	4b1b      	ldr	r3, [pc, #108]	; (8000b2c <HAL_InitTick+0xdc>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac4:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <HAL_InitTick+0xdc>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000aca:	4818      	ldr	r0, [pc, #96]	; (8000b2c <HAL_InitTick+0xdc>)
 8000acc:	f001 f8c2 	bl	8001c54 <HAL_TIM_Base_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000ad6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d11b      	bne.n	8000b16 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000ade:	4813      	ldr	r0, [pc, #76]	; (8000b2c <HAL_InitTick+0xdc>)
 8000ae0:	f001 f912 	bl	8001d08 <HAL_TIM_Base_Start_IT>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000aea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d111      	bne.n	8000b16 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000af2:	2019      	movs	r0, #25
 8000af4:	f000 fa1a 	bl	8000f2c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	2b0f      	cmp	r3, #15
 8000afc:	d808      	bhi.n	8000b10 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000afe:	2200      	movs	r2, #0
 8000b00:	6879      	ldr	r1, [r7, #4]
 8000b02:	2019      	movs	r0, #25
 8000b04:	f000 f9f6 	bl	8000ef4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b08:	4a0a      	ldr	r2, [pc, #40]	; (8000b34 <HAL_InitTick+0xe4>)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	6013      	str	r3, [r2, #0]
 8000b0e:	e002      	b.n	8000b16 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8000b10:	2301      	movs	r3, #1
 8000b12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000b16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3730      	adds	r7, #48	; 0x30
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40023800 	.word	0x40023800
 8000b28:	431bde83 	.word	0x431bde83
 8000b2c:	2000033c 	.word	0x2000033c
 8000b30:	40010000 	.word	0x40010000
 8000b34:	20000004 	.word	0x20000004

08000b38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b3c:	e7fe      	b.n	8000b3c <NMI_Handler+0x4>

08000b3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b42:	e7fe      	b.n	8000b42 <HardFault_Handler+0x4>

08000b44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b48:	e7fe      	b.n	8000b48 <MemManage_Handler+0x4>

08000b4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b4e:	e7fe      	b.n	8000b4e <BusFault_Handler+0x4>

08000b50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <UsageFault_Handler+0x4>

08000b56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr

08000b64 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b68:	4802      	ldr	r0, [pc, #8]	; (8000b74 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b6a:	f001 f93d 	bl	8001de8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	2000033c 	.word	0x2000033c

08000b78 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	60f8      	str	r0, [r7, #12]
 8000b80:	60b9      	str	r1, [r7, #8]
 8000b82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	e00a      	b.n	8000ba0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000b8a:	f3af 8000 	nop.w
 8000b8e:	4601      	mov	r1, r0
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	1c5a      	adds	r2, r3, #1
 8000b94:	60ba      	str	r2, [r7, #8]
 8000b96:	b2ca      	uxtb	r2, r1
 8000b98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b9a:	697b      	ldr	r3, [r7, #20]
 8000b9c:	3301      	adds	r3, #1
 8000b9e:	617b      	str	r3, [r7, #20]
 8000ba0:	697a      	ldr	r2, [r7, #20]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	dbf0      	blt.n	8000b8a <_read+0x12>
  }

  return len;
 8000ba8:	687b      	ldr	r3, [r7, #4]
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3718      	adds	r7, #24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}

08000bb2 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	b083      	sub	sp, #12
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000bba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr

08000bca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	b083      	sub	sp, #12
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
 8000bd2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bda:	605a      	str	r2, [r3, #4]
  return 0;
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	4618      	mov	r0, r3
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <_isatty>:

int _isatty(int file)
{
 8000bea:	b480      	push	{r7}
 8000bec:	b083      	sub	sp, #12
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000bf2:	2301      	movs	r3, #1
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b085      	sub	sp, #20
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	60f8      	str	r0, [r7, #12]
 8000c08:	60b9      	str	r1, [r7, #8]
 8000c0a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c0c:	2300      	movs	r3, #0
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3714      	adds	r7, #20
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
	...

08000c1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b086      	sub	sp, #24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c24:	4a14      	ldr	r2, [pc, #80]	; (8000c78 <_sbrk+0x5c>)
 8000c26:	4b15      	ldr	r3, [pc, #84]	; (8000c7c <_sbrk+0x60>)
 8000c28:	1ad3      	subs	r3, r2, r3
 8000c2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c30:	4b13      	ldr	r3, [pc, #76]	; (8000c80 <_sbrk+0x64>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d102      	bne.n	8000c3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c38:	4b11      	ldr	r3, [pc, #68]	; (8000c80 <_sbrk+0x64>)
 8000c3a:	4a12      	ldr	r2, [pc, #72]	; (8000c84 <_sbrk+0x68>)
 8000c3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c3e:	4b10      	ldr	r3, [pc, #64]	; (8000c80 <_sbrk+0x64>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	4413      	add	r3, r2
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	d207      	bcs.n	8000c5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c4c:	f003 fde2 	bl	8004814 <__errno>
 8000c50:	4603      	mov	r3, r0
 8000c52:	220c      	movs	r2, #12
 8000c54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c56:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5a:	e009      	b.n	8000c70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c5c:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <_sbrk+0x64>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c62:	4b07      	ldr	r3, [pc, #28]	; (8000c80 <_sbrk+0x64>)
 8000c64:	681a      	ldr	r2, [r3, #0]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	4413      	add	r3, r2
 8000c6a:	4a05      	ldr	r2, [pc, #20]	; (8000c80 <_sbrk+0x64>)
 8000c6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c6e:	68fb      	ldr	r3, [r7, #12]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3718      	adds	r7, #24
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20020000 	.word	0x20020000
 8000c7c:	00000400 	.word	0x00000400
 8000c80:	20000384 	.word	0x20000384
 8000c84:	20004230 	.word	0x20004230

08000c88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c8c:	4b06      	ldr	r3, [pc, #24]	; (8000ca8 <SystemInit+0x20>)
 8000c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c92:	4a05      	ldr	r2, [pc, #20]	; (8000ca8 <SystemInit+0x20>)
 8000c94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c9c:	bf00      	nop
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000cac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ce4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000cb0:	480d      	ldr	r0, [pc, #52]	; (8000ce8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000cb2:	490e      	ldr	r1, [pc, #56]	; (8000cec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000cb4:	4a0e      	ldr	r2, [pc, #56]	; (8000cf0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb8:	e002      	b.n	8000cc0 <LoopCopyDataInit>

08000cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cbe:	3304      	adds	r3, #4

08000cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc4:	d3f9      	bcc.n	8000cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc6:	4a0b      	ldr	r2, [pc, #44]	; (8000cf4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cc8:	4c0b      	ldr	r4, [pc, #44]	; (8000cf8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ccc:	e001      	b.n	8000cd2 <LoopFillZerobss>

08000cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd0:	3204      	adds	r2, #4

08000cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd4:	d3fb      	bcc.n	8000cce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000cd6:	f7ff ffd7 	bl	8000c88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cda:	f003 fda1 	bl	8004820 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cde:	f7ff fca3 	bl	8000628 <main>
  bx  lr    
 8000ce2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ce4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ce8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cec:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000cf0:	0800552c 	.word	0x0800552c
  ldr r2, =_sbss
 8000cf4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000cf8:	2000422c 	.word	0x2000422c

08000cfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cfc:	e7fe      	b.n	8000cfc <ADC_IRQHandler>
	...

08000d00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d04:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <HAL_Init+0x40>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a0d      	ldr	r2, [pc, #52]	; (8000d40 <HAL_Init+0x40>)
 8000d0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d10:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <HAL_Init+0x40>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a0a      	ldr	r2, [pc, #40]	; (8000d40 <HAL_Init+0x40>)
 8000d16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d1c:	4b08      	ldr	r3, [pc, #32]	; (8000d40 <HAL_Init+0x40>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a07      	ldr	r2, [pc, #28]	; (8000d40 <HAL_Init+0x40>)
 8000d22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d28:	2003      	movs	r0, #3
 8000d2a:	f000 f8d8 	bl	8000ede <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d2e:	200f      	movs	r0, #15
 8000d30:	f7ff fe8e 	bl	8000a50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d34:	f7ff fe60 	bl	80009f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d38:	2300      	movs	r3, #0
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40023c00 	.word	0x40023c00

08000d44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <HAL_IncTick+0x20>)
 8000d4a:	781b      	ldrb	r3, [r3, #0]
 8000d4c:	461a      	mov	r2, r3
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_IncTick+0x24>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4413      	add	r3, r2
 8000d54:	4a04      	ldr	r2, [pc, #16]	; (8000d68 <HAL_IncTick+0x24>)
 8000d56:	6013      	str	r3, [r2, #0]
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	20000008 	.word	0x20000008
 8000d68:	20000388 	.word	0x20000388

08000d6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d70:	4b03      	ldr	r3, [pc, #12]	; (8000d80 <HAL_GetTick+0x14>)
 8000d72:	681b      	ldr	r3, [r3, #0]
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	20000388 	.word	0x20000388

08000d84 <__NVIC_SetPriorityGrouping>:
{
 8000d84:	b480      	push	{r7}
 8000d86:	b085      	sub	sp, #20
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f003 0307 	and.w	r3, r3, #7
 8000d92:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d96:	68db      	ldr	r3, [r3, #12]
 8000d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d9a:	68ba      	ldr	r2, [r7, #8]
 8000d9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000da0:	4013      	ands	r3, r2
 8000da2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000db6:	4a04      	ldr	r2, [pc, #16]	; (8000dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	60d3      	str	r3, [r2, #12]
}
 8000dbc:	bf00      	nop
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000ed00 	.word	0xe000ed00

08000dcc <__NVIC_GetPriorityGrouping>:
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dd0:	4b04      	ldr	r3, [pc, #16]	; (8000de4 <__NVIC_GetPriorityGrouping+0x18>)
 8000dd2:	68db      	ldr	r3, [r3, #12]
 8000dd4:	0a1b      	lsrs	r3, r3, #8
 8000dd6:	f003 0307 	and.w	r3, r3, #7
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <__NVIC_EnableIRQ>:
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	4603      	mov	r3, r0
 8000df0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	db0b      	blt.n	8000e12 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dfa:	79fb      	ldrb	r3, [r7, #7]
 8000dfc:	f003 021f 	and.w	r2, r3, #31
 8000e00:	4907      	ldr	r1, [pc, #28]	; (8000e20 <__NVIC_EnableIRQ+0x38>)
 8000e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e06:	095b      	lsrs	r3, r3, #5
 8000e08:	2001      	movs	r0, #1
 8000e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	e000e100 	.word	0xe000e100

08000e24 <__NVIC_SetPriority>:
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	6039      	str	r1, [r7, #0]
 8000e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	db0a      	blt.n	8000e4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	b2da      	uxtb	r2, r3
 8000e3c:	490c      	ldr	r1, [pc, #48]	; (8000e70 <__NVIC_SetPriority+0x4c>)
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	0112      	lsls	r2, r2, #4
 8000e44:	b2d2      	uxtb	r2, r2
 8000e46:	440b      	add	r3, r1
 8000e48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000e4c:	e00a      	b.n	8000e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	4908      	ldr	r1, [pc, #32]	; (8000e74 <__NVIC_SetPriority+0x50>)
 8000e54:	79fb      	ldrb	r3, [r7, #7]
 8000e56:	f003 030f 	and.w	r3, r3, #15
 8000e5a:	3b04      	subs	r3, #4
 8000e5c:	0112      	lsls	r2, r2, #4
 8000e5e:	b2d2      	uxtb	r2, r2
 8000e60:	440b      	add	r3, r1
 8000e62:	761a      	strb	r2, [r3, #24]
}
 8000e64:	bf00      	nop
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000e100 	.word	0xe000e100
 8000e74:	e000ed00 	.word	0xe000ed00

08000e78 <NVIC_EncodePriority>:
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b089      	sub	sp, #36	; 0x24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	f003 0307 	and.w	r3, r3, #7
 8000e8a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	f1c3 0307 	rsb	r3, r3, #7
 8000e92:	2b04      	cmp	r3, #4
 8000e94:	bf28      	it	cs
 8000e96:	2304      	movcs	r3, #4
 8000e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	3304      	adds	r3, #4
 8000e9e:	2b06      	cmp	r3, #6
 8000ea0:	d902      	bls.n	8000ea8 <NVIC_EncodePriority+0x30>
 8000ea2:	69fb      	ldr	r3, [r7, #28]
 8000ea4:	3b03      	subs	r3, #3
 8000ea6:	e000      	b.n	8000eaa <NVIC_EncodePriority+0x32>
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eac:	f04f 32ff 	mov.w	r2, #4294967295
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43da      	mvns	r2, r3
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	401a      	ands	r2, r3
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ec0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eca:	43d9      	mvns	r1, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ed0:	4313      	orrs	r3, r2
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3724      	adds	r7, #36	; 0x24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr

08000ede <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff ff4c 	bl	8000d84 <__NVIC_SetPriorityGrouping>
}
 8000eec:	bf00      	nop
 8000eee:	3708      	adds	r7, #8
 8000ef0:	46bd      	mov	sp, r7
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	607a      	str	r2, [r7, #4]
 8000f00:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f02:	2300      	movs	r3, #0
 8000f04:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f06:	f7ff ff61 	bl	8000dcc <__NVIC_GetPriorityGrouping>
 8000f0a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	68b9      	ldr	r1, [r7, #8]
 8000f10:	6978      	ldr	r0, [r7, #20]
 8000f12:	f7ff ffb1 	bl	8000e78 <NVIC_EncodePriority>
 8000f16:	4602      	mov	r2, r0
 8000f18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f1c:	4611      	mov	r1, r2
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff ff80 	bl	8000e24 <__NVIC_SetPriority>
}
 8000f24:	bf00      	nop
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff ff54 	bl	8000de8 <__NVIC_EnableIRQ>
}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b089      	sub	sp, #36	; 0x24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f52:	2300      	movs	r3, #0
 8000f54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f56:	2300      	movs	r3, #0
 8000f58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	61fb      	str	r3, [r7, #28]
 8000f62:	e16b      	b.n	800123c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f64:	2201      	movs	r2, #1
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	697a      	ldr	r2, [r7, #20]
 8000f74:	4013      	ands	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f78:	693a      	ldr	r2, [r7, #16]
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	f040 815a 	bne.w	8001236 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f003 0303 	and.w	r3, r3, #3
 8000f8a:	2b01      	cmp	r3, #1
 8000f8c:	d005      	beq.n	8000f9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f96:	2b02      	cmp	r3, #2
 8000f98:	d130      	bne.n	8000ffc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	2203      	movs	r2, #3
 8000fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8000faa:	43db      	mvns	r3, r3
 8000fac:	69ba      	ldr	r2, [r7, #24]
 8000fae:	4013      	ands	r3, r2
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	68da      	ldr	r2, [r3, #12]
 8000fb6:	69fb      	ldr	r3, [r7, #28]
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	69ba      	ldr	r2, [r7, #24]
 8000fc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	69fb      	ldr	r3, [r7, #28]
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	43db      	mvns	r3, r3
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	091b      	lsrs	r3, r3, #4
 8000fe6:	f003 0201 	and.w	r2, r3, #1
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f003 0303 	and.w	r3, r3, #3
 8001004:	2b03      	cmp	r3, #3
 8001006:	d017      	beq.n	8001038 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	2203      	movs	r2, #3
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
 8001018:	43db      	mvns	r3, r3
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	4013      	ands	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	689a      	ldr	r2, [r3, #8]
 8001024:	69fb      	ldr	r3, [r7, #28]
 8001026:	005b      	lsls	r3, r3, #1
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	4313      	orrs	r3, r2
 8001030:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	69ba      	ldr	r2, [r7, #24]
 8001036:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f003 0303 	and.w	r3, r3, #3
 8001040:	2b02      	cmp	r3, #2
 8001042:	d123      	bne.n	800108c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	08da      	lsrs	r2, r3, #3
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3208      	adds	r2, #8
 800104c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001050:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	f003 0307 	and.w	r3, r3, #7
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	220f      	movs	r2, #15
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	43db      	mvns	r3, r3
 8001062:	69ba      	ldr	r2, [r7, #24]
 8001064:	4013      	ands	r3, r2
 8001066:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	691a      	ldr	r2, [r3, #16]
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	009b      	lsls	r3, r3, #2
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	4313      	orrs	r3, r2
 800107c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	08da      	lsrs	r2, r3, #3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	3208      	adds	r2, #8
 8001086:	69b9      	ldr	r1, [r7, #24]
 8001088:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	2203      	movs	r2, #3
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f003 0203 	and.w	r2, r3, #3
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	005b      	lsls	r3, r3, #1
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	f000 80b4 	beq.w	8001236 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ce:	2300      	movs	r3, #0
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	4b60      	ldr	r3, [pc, #384]	; (8001254 <HAL_GPIO_Init+0x30c>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	4a5f      	ldr	r2, [pc, #380]	; (8001254 <HAL_GPIO_Init+0x30c>)
 80010d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010dc:	6453      	str	r3, [r2, #68]	; 0x44
 80010de:	4b5d      	ldr	r3, [pc, #372]	; (8001254 <HAL_GPIO_Init+0x30c>)
 80010e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010ea:	4a5b      	ldr	r2, [pc, #364]	; (8001258 <HAL_GPIO_Init+0x310>)
 80010ec:	69fb      	ldr	r3, [r7, #28]
 80010ee:	089b      	lsrs	r3, r3, #2
 80010f0:	3302      	adds	r3, #2
 80010f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	f003 0303 	and.w	r3, r3, #3
 80010fe:	009b      	lsls	r3, r3, #2
 8001100:	220f      	movs	r2, #15
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43db      	mvns	r3, r3
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	4013      	ands	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a52      	ldr	r2, [pc, #328]	; (800125c <HAL_GPIO_Init+0x314>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d02b      	beq.n	800116e <HAL_GPIO_Init+0x226>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	4a51      	ldr	r2, [pc, #324]	; (8001260 <HAL_GPIO_Init+0x318>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d025      	beq.n	800116a <HAL_GPIO_Init+0x222>
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a50      	ldr	r2, [pc, #320]	; (8001264 <HAL_GPIO_Init+0x31c>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d01f      	beq.n	8001166 <HAL_GPIO_Init+0x21e>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a4f      	ldr	r2, [pc, #316]	; (8001268 <HAL_GPIO_Init+0x320>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d019      	beq.n	8001162 <HAL_GPIO_Init+0x21a>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a4e      	ldr	r2, [pc, #312]	; (800126c <HAL_GPIO_Init+0x324>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d013      	beq.n	800115e <HAL_GPIO_Init+0x216>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a4d      	ldr	r2, [pc, #308]	; (8001270 <HAL_GPIO_Init+0x328>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d00d      	beq.n	800115a <HAL_GPIO_Init+0x212>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a4c      	ldr	r2, [pc, #304]	; (8001274 <HAL_GPIO_Init+0x32c>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d007      	beq.n	8001156 <HAL_GPIO_Init+0x20e>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a4b      	ldr	r2, [pc, #300]	; (8001278 <HAL_GPIO_Init+0x330>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d101      	bne.n	8001152 <HAL_GPIO_Init+0x20a>
 800114e:	2307      	movs	r3, #7
 8001150:	e00e      	b.n	8001170 <HAL_GPIO_Init+0x228>
 8001152:	2308      	movs	r3, #8
 8001154:	e00c      	b.n	8001170 <HAL_GPIO_Init+0x228>
 8001156:	2306      	movs	r3, #6
 8001158:	e00a      	b.n	8001170 <HAL_GPIO_Init+0x228>
 800115a:	2305      	movs	r3, #5
 800115c:	e008      	b.n	8001170 <HAL_GPIO_Init+0x228>
 800115e:	2304      	movs	r3, #4
 8001160:	e006      	b.n	8001170 <HAL_GPIO_Init+0x228>
 8001162:	2303      	movs	r3, #3
 8001164:	e004      	b.n	8001170 <HAL_GPIO_Init+0x228>
 8001166:	2302      	movs	r3, #2
 8001168:	e002      	b.n	8001170 <HAL_GPIO_Init+0x228>
 800116a:	2301      	movs	r3, #1
 800116c:	e000      	b.n	8001170 <HAL_GPIO_Init+0x228>
 800116e:	2300      	movs	r3, #0
 8001170:	69fa      	ldr	r2, [r7, #28]
 8001172:	f002 0203 	and.w	r2, r2, #3
 8001176:	0092      	lsls	r2, r2, #2
 8001178:	4093      	lsls	r3, r2
 800117a:	69ba      	ldr	r2, [r7, #24]
 800117c:	4313      	orrs	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001180:	4935      	ldr	r1, [pc, #212]	; (8001258 <HAL_GPIO_Init+0x310>)
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	089b      	lsrs	r3, r3, #2
 8001186:	3302      	adds	r3, #2
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800118e:	4b3b      	ldr	r3, [pc, #236]	; (800127c <HAL_GPIO_Init+0x334>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	43db      	mvns	r3, r3
 8001198:	69ba      	ldr	r2, [r7, #24]
 800119a:	4013      	ands	r3, r2
 800119c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800119e:	683b      	ldr	r3, [r7, #0]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80011aa:	69ba      	ldr	r2, [r7, #24]
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011b2:	4a32      	ldr	r2, [pc, #200]	; (800127c <HAL_GPIO_Init+0x334>)
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011b8:	4b30      	ldr	r3, [pc, #192]	; (800127c <HAL_GPIO_Init+0x334>)
 80011ba:	68db      	ldr	r3, [r3, #12]
 80011bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	69ba      	ldr	r2, [r7, #24]
 80011c4:	4013      	ands	r3, r2
 80011c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d003      	beq.n	80011dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80011d4:	69ba      	ldr	r2, [r7, #24]
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	4313      	orrs	r3, r2
 80011da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011dc:	4a27      	ldr	r2, [pc, #156]	; (800127c <HAL_GPIO_Init+0x334>)
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011e2:	4b26      	ldr	r3, [pc, #152]	; (800127c <HAL_GPIO_Init+0x334>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	43db      	mvns	r3, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4013      	ands	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	685b      	ldr	r3, [r3, #4]
 80011f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011fe:	69ba      	ldr	r2, [r7, #24]
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	4313      	orrs	r3, r2
 8001204:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001206:	4a1d      	ldr	r2, [pc, #116]	; (800127c <HAL_GPIO_Init+0x334>)
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800120c:	4b1b      	ldr	r3, [pc, #108]	; (800127c <HAL_GPIO_Init+0x334>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	43db      	mvns	r3, r3
 8001216:	69ba      	ldr	r2, [r7, #24]
 8001218:	4013      	ands	r3, r2
 800121a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d003      	beq.n	8001230 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001230:	4a12      	ldr	r2, [pc, #72]	; (800127c <HAL_GPIO_Init+0x334>)
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3301      	adds	r3, #1
 800123a:	61fb      	str	r3, [r7, #28]
 800123c:	69fb      	ldr	r3, [r7, #28]
 800123e:	2b0f      	cmp	r3, #15
 8001240:	f67f ae90 	bls.w	8000f64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001244:	bf00      	nop
 8001246:	bf00      	nop
 8001248:	3724      	adds	r7, #36	; 0x24
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	40023800 	.word	0x40023800
 8001258:	40013800 	.word	0x40013800
 800125c:	40020000 	.word	0x40020000
 8001260:	40020400 	.word	0x40020400
 8001264:	40020800 	.word	0x40020800
 8001268:	40020c00 	.word	0x40020c00
 800126c:	40021000 	.word	0x40021000
 8001270:	40021400 	.word	0x40021400
 8001274:	40021800 	.word	0x40021800
 8001278:	40021c00 	.word	0x40021c00
 800127c:	40013c00 	.word	0x40013c00

08001280 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	807b      	strh	r3, [r7, #2]
 800128c:	4613      	mov	r3, r2
 800128e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001290:	787b      	ldrb	r3, [r7, #1]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001296:	887a      	ldrh	r2, [r7, #2]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800129c:	e003      	b.n	80012a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800129e:	887b      	ldrh	r3, [r7, #2]
 80012a0:	041a      	lsls	r2, r3, #16
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	619a      	str	r2, [r3, #24]
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b085      	sub	sp, #20
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	460b      	mov	r3, r1
 80012bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	695b      	ldr	r3, [r3, #20]
 80012c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012c4:	887a      	ldrh	r2, [r7, #2]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	4013      	ands	r3, r2
 80012ca:	041a      	lsls	r2, r3, #16
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	43d9      	mvns	r1, r3
 80012d0:	887b      	ldrh	r3, [r7, #2]
 80012d2:	400b      	ands	r3, r1
 80012d4:	431a      	orrs	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	619a      	str	r2, [r3, #24]
}
 80012da:	bf00      	nop
 80012dc:	3714      	adds	r7, #20
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
	...

080012e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b086      	sub	sp, #24
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d101      	bne.n	80012fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e267      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	2b00      	cmp	r3, #0
 8001304:	d075      	beq.n	80013f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001306:	4b88      	ldr	r3, [pc, #544]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f003 030c 	and.w	r3, r3, #12
 800130e:	2b04      	cmp	r3, #4
 8001310:	d00c      	beq.n	800132c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001312:	4b85      	ldr	r3, [pc, #532]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800131a:	2b08      	cmp	r3, #8
 800131c:	d112      	bne.n	8001344 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800131e:	4b82      	ldr	r3, [pc, #520]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001326:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800132a:	d10b      	bne.n	8001344 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800132c:	4b7e      	ldr	r3, [pc, #504]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d05b      	beq.n	80013f0 <HAL_RCC_OscConfig+0x108>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d157      	bne.n	80013f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001340:	2301      	movs	r3, #1
 8001342:	e242      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800134c:	d106      	bne.n	800135c <HAL_RCC_OscConfig+0x74>
 800134e:	4b76      	ldr	r3, [pc, #472]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a75      	ldr	r2, [pc, #468]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	e01d      	b.n	8001398 <HAL_RCC_OscConfig+0xb0>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001364:	d10c      	bne.n	8001380 <HAL_RCC_OscConfig+0x98>
 8001366:	4b70      	ldr	r3, [pc, #448]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a6f      	ldr	r2, [pc, #444]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 800136c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001370:	6013      	str	r3, [r2, #0]
 8001372:	4b6d      	ldr	r3, [pc, #436]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a6c      	ldr	r2, [pc, #432]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001378:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	e00b      	b.n	8001398 <HAL_RCC_OscConfig+0xb0>
 8001380:	4b69      	ldr	r3, [pc, #420]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a68      	ldr	r2, [pc, #416]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001386:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800138a:	6013      	str	r3, [r2, #0]
 800138c:	4b66      	ldr	r3, [pc, #408]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a65      	ldr	r2, [pc, #404]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001392:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001396:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d013      	beq.n	80013c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a0:	f7ff fce4 	bl	8000d6c <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013a8:	f7ff fce0 	bl	8000d6c <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b64      	cmp	r3, #100	; 0x64
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e207      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ba:	4b5b      	ldr	r3, [pc, #364]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d0f0      	beq.n	80013a8 <HAL_RCC_OscConfig+0xc0>
 80013c6:	e014      	b.n	80013f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013c8:	f7ff fcd0 	bl	8000d6c <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ce:	e008      	b.n	80013e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013d0:	f7ff fccc 	bl	8000d6c <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	2b64      	cmp	r3, #100	; 0x64
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e1f3      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013e2:	4b51      	ldr	r3, [pc, #324]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1f0      	bne.n	80013d0 <HAL_RCC_OscConfig+0xe8>
 80013ee:	e000      	b.n	80013f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0302 	and.w	r3, r3, #2
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d063      	beq.n	80014c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013fe:	4b4a      	ldr	r3, [pc, #296]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f003 030c 	and.w	r3, r3, #12
 8001406:	2b00      	cmp	r3, #0
 8001408:	d00b      	beq.n	8001422 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800140a:	4b47      	ldr	r3, [pc, #284]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001412:	2b08      	cmp	r3, #8
 8001414:	d11c      	bne.n	8001450 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001416:	4b44      	ldr	r3, [pc, #272]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001418:	685b      	ldr	r3, [r3, #4]
 800141a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d116      	bne.n	8001450 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001422:	4b41      	ldr	r3, [pc, #260]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d005      	beq.n	800143a <HAL_RCC_OscConfig+0x152>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	68db      	ldr	r3, [r3, #12]
 8001432:	2b01      	cmp	r3, #1
 8001434:	d001      	beq.n	800143a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001436:	2301      	movs	r3, #1
 8001438:	e1c7      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800143a:	4b3b      	ldr	r3, [pc, #236]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	691b      	ldr	r3, [r3, #16]
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	4937      	ldr	r1, [pc, #220]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 800144a:	4313      	orrs	r3, r2
 800144c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800144e:	e03a      	b.n	80014c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	2b00      	cmp	r3, #0
 8001456:	d020      	beq.n	800149a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001458:	4b34      	ldr	r3, [pc, #208]	; (800152c <HAL_RCC_OscConfig+0x244>)
 800145a:	2201      	movs	r2, #1
 800145c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800145e:	f7ff fc85 	bl	8000d6c <HAL_GetTick>
 8001462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001464:	e008      	b.n	8001478 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001466:	f7ff fc81 	bl	8000d6c <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e1a8      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001478:	4b2b      	ldr	r3, [pc, #172]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f003 0302 	and.w	r3, r3, #2
 8001480:	2b00      	cmp	r3, #0
 8001482:	d0f0      	beq.n	8001466 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001484:	4b28      	ldr	r3, [pc, #160]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	691b      	ldr	r3, [r3, #16]
 8001490:	00db      	lsls	r3, r3, #3
 8001492:	4925      	ldr	r1, [pc, #148]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 8001494:	4313      	orrs	r3, r2
 8001496:	600b      	str	r3, [r1, #0]
 8001498:	e015      	b.n	80014c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800149a:	4b24      	ldr	r3, [pc, #144]	; (800152c <HAL_RCC_OscConfig+0x244>)
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014a0:	f7ff fc64 	bl	8000d6c <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014a8:	f7ff fc60 	bl	8000d6c <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e187      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ba:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1f0      	bne.n	80014a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 0308 	and.w	r3, r3, #8
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d036      	beq.n	8001540 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	695b      	ldr	r3, [r3, #20]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d016      	beq.n	8001508 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <HAL_RCC_OscConfig+0x248>)
 80014dc:	2201      	movs	r2, #1
 80014de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e0:	f7ff fc44 	bl	8000d6c <HAL_GetTick>
 80014e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014e8:	f7ff fc40 	bl	8000d6c <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e167      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014fa:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <HAL_RCC_OscConfig+0x240>)
 80014fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014fe:	f003 0302 	and.w	r3, r3, #2
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0f0      	beq.n	80014e8 <HAL_RCC_OscConfig+0x200>
 8001506:	e01b      	b.n	8001540 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001508:	4b09      	ldr	r3, [pc, #36]	; (8001530 <HAL_RCC_OscConfig+0x248>)
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800150e:	f7ff fc2d 	bl	8000d6c <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001514:	e00e      	b.n	8001534 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001516:	f7ff fc29 	bl	8000d6c <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	2b02      	cmp	r3, #2
 8001522:	d907      	bls.n	8001534 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001524:	2303      	movs	r3, #3
 8001526:	e150      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
 8001528:	40023800 	.word	0x40023800
 800152c:	42470000 	.word	0x42470000
 8001530:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001534:	4b88      	ldr	r3, [pc, #544]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 8001536:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001538:	f003 0302 	and.w	r3, r3, #2
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1ea      	bne.n	8001516 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0304 	and.w	r3, r3, #4
 8001548:	2b00      	cmp	r3, #0
 800154a:	f000 8097 	beq.w	800167c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800154e:	2300      	movs	r3, #0
 8001550:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001552:	4b81      	ldr	r3, [pc, #516]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 8001554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800155a:	2b00      	cmp	r3, #0
 800155c:	d10f      	bne.n	800157e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	60bb      	str	r3, [r7, #8]
 8001562:	4b7d      	ldr	r3, [pc, #500]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	4a7c      	ldr	r2, [pc, #496]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 8001568:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800156c:	6413      	str	r3, [r2, #64]	; 0x40
 800156e:	4b7a      	ldr	r3, [pc, #488]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800157a:	2301      	movs	r3, #1
 800157c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800157e:	4b77      	ldr	r3, [pc, #476]	; (800175c <HAL_RCC_OscConfig+0x474>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001586:	2b00      	cmp	r3, #0
 8001588:	d118      	bne.n	80015bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800158a:	4b74      	ldr	r3, [pc, #464]	; (800175c <HAL_RCC_OscConfig+0x474>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a73      	ldr	r2, [pc, #460]	; (800175c <HAL_RCC_OscConfig+0x474>)
 8001590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001594:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001596:	f7ff fbe9 	bl	8000d6c <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800159c:	e008      	b.n	80015b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800159e:	f7ff fbe5 	bl	8000d6c <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d901      	bls.n	80015b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80015ac:	2303      	movs	r3, #3
 80015ae:	e10c      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b0:	4b6a      	ldr	r3, [pc, #424]	; (800175c <HAL_RCC_OscConfig+0x474>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d0f0      	beq.n	800159e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d106      	bne.n	80015d2 <HAL_RCC_OscConfig+0x2ea>
 80015c4:	4b64      	ldr	r3, [pc, #400]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 80015c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c8:	4a63      	ldr	r2, [pc, #396]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 80015ca:	f043 0301 	orr.w	r3, r3, #1
 80015ce:	6713      	str	r3, [r2, #112]	; 0x70
 80015d0:	e01c      	b.n	800160c <HAL_RCC_OscConfig+0x324>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	2b05      	cmp	r3, #5
 80015d8:	d10c      	bne.n	80015f4 <HAL_RCC_OscConfig+0x30c>
 80015da:	4b5f      	ldr	r3, [pc, #380]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 80015dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015de:	4a5e      	ldr	r2, [pc, #376]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 80015e0:	f043 0304 	orr.w	r3, r3, #4
 80015e4:	6713      	str	r3, [r2, #112]	; 0x70
 80015e6:	4b5c      	ldr	r3, [pc, #368]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 80015e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ea:	4a5b      	ldr	r2, [pc, #364]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	6713      	str	r3, [r2, #112]	; 0x70
 80015f2:	e00b      	b.n	800160c <HAL_RCC_OscConfig+0x324>
 80015f4:	4b58      	ldr	r3, [pc, #352]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 80015f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015f8:	4a57      	ldr	r2, [pc, #348]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 80015fa:	f023 0301 	bic.w	r3, r3, #1
 80015fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001600:	4b55      	ldr	r3, [pc, #340]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 8001602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001604:	4a54      	ldr	r2, [pc, #336]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 8001606:	f023 0304 	bic.w	r3, r3, #4
 800160a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d015      	beq.n	8001640 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001614:	f7ff fbaa 	bl	8000d6c <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800161a:	e00a      	b.n	8001632 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800161c:	f7ff fba6 	bl	8000d6c <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	f241 3288 	movw	r2, #5000	; 0x1388
 800162a:	4293      	cmp	r3, r2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e0cb      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001632:	4b49      	ldr	r3, [pc, #292]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 8001634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d0ee      	beq.n	800161c <HAL_RCC_OscConfig+0x334>
 800163e:	e014      	b.n	800166a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001640:	f7ff fb94 	bl	8000d6c <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001646:	e00a      	b.n	800165e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001648:	f7ff fb90 	bl	8000d6c <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	f241 3288 	movw	r2, #5000	; 0x1388
 8001656:	4293      	cmp	r3, r2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e0b5      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800165e:	4b3e      	ldr	r3, [pc, #248]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 8001660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1ee      	bne.n	8001648 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800166a:	7dfb      	ldrb	r3, [r7, #23]
 800166c:	2b01      	cmp	r3, #1
 800166e:	d105      	bne.n	800167c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001670:	4b39      	ldr	r3, [pc, #228]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 8001672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001674:	4a38      	ldr	r2, [pc, #224]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 8001676:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800167a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	699b      	ldr	r3, [r3, #24]
 8001680:	2b00      	cmp	r3, #0
 8001682:	f000 80a1 	beq.w	80017c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001686:	4b34      	ldr	r3, [pc, #208]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	f003 030c 	and.w	r3, r3, #12
 800168e:	2b08      	cmp	r3, #8
 8001690:	d05c      	beq.n	800174c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	2b02      	cmp	r3, #2
 8001698:	d141      	bne.n	800171e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800169a:	4b31      	ldr	r3, [pc, #196]	; (8001760 <HAL_RCC_OscConfig+0x478>)
 800169c:	2200      	movs	r2, #0
 800169e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a0:	f7ff fb64 	bl	8000d6c <HAL_GetTick>
 80016a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016a8:	f7ff fb60 	bl	8000d6c <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e087      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016ba:	4b27      	ldr	r3, [pc, #156]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1f0      	bne.n	80016a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69da      	ldr	r2, [r3, #28]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	431a      	orrs	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016d4:	019b      	lsls	r3, r3, #6
 80016d6:	431a      	orrs	r2, r3
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016dc:	085b      	lsrs	r3, r3, #1
 80016de:	3b01      	subs	r3, #1
 80016e0:	041b      	lsls	r3, r3, #16
 80016e2:	431a      	orrs	r2, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016e8:	061b      	lsls	r3, r3, #24
 80016ea:	491b      	ldr	r1, [pc, #108]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 80016ec:	4313      	orrs	r3, r2
 80016ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016f0:	4b1b      	ldr	r3, [pc, #108]	; (8001760 <HAL_RCC_OscConfig+0x478>)
 80016f2:	2201      	movs	r2, #1
 80016f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f6:	f7ff fb39 	bl	8000d6c <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016fc:	e008      	b.n	8001710 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016fe:	f7ff fb35 	bl	8000d6c <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e05c      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001710:	4b11      	ldr	r3, [pc, #68]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d0f0      	beq.n	80016fe <HAL_RCC_OscConfig+0x416>
 800171c:	e054      	b.n	80017c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800171e:	4b10      	ldr	r3, [pc, #64]	; (8001760 <HAL_RCC_OscConfig+0x478>)
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001724:	f7ff fb22 	bl	8000d6c <HAL_GetTick>
 8001728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800172a:	e008      	b.n	800173e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800172c:	f7ff fb1e 	bl	8000d6c <HAL_GetTick>
 8001730:	4602      	mov	r2, r0
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	1ad3      	subs	r3, r2, r3
 8001736:	2b02      	cmp	r3, #2
 8001738:	d901      	bls.n	800173e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800173a:	2303      	movs	r3, #3
 800173c:	e045      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800173e:	4b06      	ldr	r3, [pc, #24]	; (8001758 <HAL_RCC_OscConfig+0x470>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1f0      	bne.n	800172c <HAL_RCC_OscConfig+0x444>
 800174a:	e03d      	b.n	80017c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d107      	bne.n	8001764 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e038      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
 8001758:	40023800 	.word	0x40023800
 800175c:	40007000 	.word	0x40007000
 8001760:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001764:	4b1b      	ldr	r3, [pc, #108]	; (80017d4 <HAL_RCC_OscConfig+0x4ec>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	699b      	ldr	r3, [r3, #24]
 800176e:	2b01      	cmp	r3, #1
 8001770:	d028      	beq.n	80017c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800177c:	429a      	cmp	r2, r3
 800177e:	d121      	bne.n	80017c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800178a:	429a      	cmp	r2, r3
 800178c:	d11a      	bne.n	80017c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800178e:	68fa      	ldr	r2, [r7, #12]
 8001790:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001794:	4013      	ands	r3, r2
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800179a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800179c:	4293      	cmp	r3, r2
 800179e:	d111      	bne.n	80017c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017aa:	085b      	lsrs	r3, r3, #1
 80017ac:	3b01      	subs	r3, #1
 80017ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017b0:	429a      	cmp	r2, r3
 80017b2:	d107      	bne.n	80017c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d001      	beq.n	80017c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e000      	b.n	80017ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	40023800 	.word	0x40023800

080017d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d101      	bne.n	80017ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017e8:	2301      	movs	r3, #1
 80017ea:	e0cc      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017ec:	4b68      	ldr	r3, [pc, #416]	; (8001990 <HAL_RCC_ClockConfig+0x1b8>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0307 	and.w	r3, r3, #7
 80017f4:	683a      	ldr	r2, [r7, #0]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	d90c      	bls.n	8001814 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017fa:	4b65      	ldr	r3, [pc, #404]	; (8001990 <HAL_RCC_ClockConfig+0x1b8>)
 80017fc:	683a      	ldr	r2, [r7, #0]
 80017fe:	b2d2      	uxtb	r2, r2
 8001800:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001802:	4b63      	ldr	r3, [pc, #396]	; (8001990 <HAL_RCC_ClockConfig+0x1b8>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	429a      	cmp	r2, r3
 800180e:	d001      	beq.n	8001814 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e0b8      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d020      	beq.n	8001862 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	2b00      	cmp	r3, #0
 800182a:	d005      	beq.n	8001838 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800182c:	4b59      	ldr	r3, [pc, #356]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	4a58      	ldr	r2, [pc, #352]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001836:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0308 	and.w	r3, r3, #8
 8001840:	2b00      	cmp	r3, #0
 8001842:	d005      	beq.n	8001850 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001844:	4b53      	ldr	r3, [pc, #332]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	4a52      	ldr	r2, [pc, #328]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 800184a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800184e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001850:	4b50      	ldr	r3, [pc, #320]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	494d      	ldr	r1, [pc, #308]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 800185e:	4313      	orrs	r3, r2
 8001860:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b00      	cmp	r3, #0
 800186c:	d044      	beq.n	80018f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d107      	bne.n	8001886 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001876:	4b47      	ldr	r3, [pc, #284]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d119      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e07f      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b02      	cmp	r3, #2
 800188c:	d003      	beq.n	8001896 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001892:	2b03      	cmp	r3, #3
 8001894:	d107      	bne.n	80018a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001896:	4b3f      	ldr	r3, [pc, #252]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d109      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e06f      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018a6:	4b3b      	ldr	r3, [pc, #236]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0302 	and.w	r3, r3, #2
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e067      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018b6:	4b37      	ldr	r3, [pc, #220]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	f023 0203 	bic.w	r2, r3, #3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	4934      	ldr	r1, [pc, #208]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 80018c4:	4313      	orrs	r3, r2
 80018c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018c8:	f7ff fa50 	bl	8000d6c <HAL_GetTick>
 80018cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ce:	e00a      	b.n	80018e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018d0:	f7ff fa4c 	bl	8000d6c <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	f241 3288 	movw	r2, #5000	; 0x1388
 80018de:	4293      	cmp	r3, r2
 80018e0:	d901      	bls.n	80018e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e04f      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018e6:	4b2b      	ldr	r3, [pc, #172]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	f003 020c 	and.w	r2, r3, #12
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	009b      	lsls	r3, r3, #2
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d1eb      	bne.n	80018d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018f8:	4b25      	ldr	r3, [pc, #148]	; (8001990 <HAL_RCC_ClockConfig+0x1b8>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0307 	and.w	r3, r3, #7
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	429a      	cmp	r2, r3
 8001904:	d20c      	bcs.n	8001920 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001906:	4b22      	ldr	r3, [pc, #136]	; (8001990 <HAL_RCC_ClockConfig+0x1b8>)
 8001908:	683a      	ldr	r2, [r7, #0]
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800190e:	4b20      	ldr	r3, [pc, #128]	; (8001990 <HAL_RCC_ClockConfig+0x1b8>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0307 	and.w	r3, r3, #7
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	429a      	cmp	r2, r3
 800191a:	d001      	beq.n	8001920 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e032      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0304 	and.w	r3, r3, #4
 8001928:	2b00      	cmp	r3, #0
 800192a:	d008      	beq.n	800193e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800192c:	4b19      	ldr	r3, [pc, #100]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	4916      	ldr	r1, [pc, #88]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	4313      	orrs	r3, r2
 800193c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0308 	and.w	r3, r3, #8
 8001946:	2b00      	cmp	r3, #0
 8001948:	d009      	beq.n	800195e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800194a:	4b12      	ldr	r3, [pc, #72]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	490e      	ldr	r1, [pc, #56]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 800195a:	4313      	orrs	r3, r2
 800195c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800195e:	f000 f821 	bl	80019a4 <HAL_RCC_GetSysClockFreq>
 8001962:	4602      	mov	r2, r0
 8001964:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <HAL_RCC_ClockConfig+0x1bc>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	091b      	lsrs	r3, r3, #4
 800196a:	f003 030f 	and.w	r3, r3, #15
 800196e:	490a      	ldr	r1, [pc, #40]	; (8001998 <HAL_RCC_ClockConfig+0x1c0>)
 8001970:	5ccb      	ldrb	r3, [r1, r3]
 8001972:	fa22 f303 	lsr.w	r3, r2, r3
 8001976:	4a09      	ldr	r2, [pc, #36]	; (800199c <HAL_RCC_ClockConfig+0x1c4>)
 8001978:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800197a:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <HAL_RCC_ClockConfig+0x1c8>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff f866 	bl	8000a50 <HAL_InitTick>

  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40023c00 	.word	0x40023c00
 8001994:	40023800 	.word	0x40023800
 8001998:	080054d0 	.word	0x080054d0
 800199c:	20000000 	.word	0x20000000
 80019a0:	20000004 	.word	0x20000004

080019a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019a8:	b094      	sub	sp, #80	; 0x50
 80019aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80019ac:	2300      	movs	r3, #0
 80019ae:	647b      	str	r3, [r7, #68]	; 0x44
 80019b0:	2300      	movs	r3, #0
 80019b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019b4:	2300      	movs	r3, #0
 80019b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80019b8:	2300      	movs	r3, #0
 80019ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019bc:	4b79      	ldr	r3, [pc, #484]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f003 030c 	and.w	r3, r3, #12
 80019c4:	2b08      	cmp	r3, #8
 80019c6:	d00d      	beq.n	80019e4 <HAL_RCC_GetSysClockFreq+0x40>
 80019c8:	2b08      	cmp	r3, #8
 80019ca:	f200 80e1 	bhi.w	8001b90 <HAL_RCC_GetSysClockFreq+0x1ec>
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d002      	beq.n	80019d8 <HAL_RCC_GetSysClockFreq+0x34>
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	d003      	beq.n	80019de <HAL_RCC_GetSysClockFreq+0x3a>
 80019d6:	e0db      	b.n	8001b90 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019d8:	4b73      	ldr	r3, [pc, #460]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x204>)
 80019da:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80019dc:	e0db      	b.n	8001b96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019de:	4b73      	ldr	r3, [pc, #460]	; (8001bac <HAL_RCC_GetSysClockFreq+0x208>)
 80019e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80019e2:	e0d8      	b.n	8001b96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019e4:	4b6f      	ldr	r3, [pc, #444]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019ec:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019ee:	4b6d      	ldr	r3, [pc, #436]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d063      	beq.n	8001ac2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019fa:	4b6a      	ldr	r3, [pc, #424]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	099b      	lsrs	r3, r3, #6
 8001a00:	2200      	movs	r2, #0
 8001a02:	63bb      	str	r3, [r7, #56]	; 0x38
 8001a04:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a0c:	633b      	str	r3, [r7, #48]	; 0x30
 8001a0e:	2300      	movs	r3, #0
 8001a10:	637b      	str	r3, [r7, #52]	; 0x34
 8001a12:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001a16:	4622      	mov	r2, r4
 8001a18:	462b      	mov	r3, r5
 8001a1a:	f04f 0000 	mov.w	r0, #0
 8001a1e:	f04f 0100 	mov.w	r1, #0
 8001a22:	0159      	lsls	r1, r3, #5
 8001a24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a28:	0150      	lsls	r0, r2, #5
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	4621      	mov	r1, r4
 8001a30:	1a51      	subs	r1, r2, r1
 8001a32:	6139      	str	r1, [r7, #16]
 8001a34:	4629      	mov	r1, r5
 8001a36:	eb63 0301 	sbc.w	r3, r3, r1
 8001a3a:	617b      	str	r3, [r7, #20]
 8001a3c:	f04f 0200 	mov.w	r2, #0
 8001a40:	f04f 0300 	mov.w	r3, #0
 8001a44:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001a48:	4659      	mov	r1, fp
 8001a4a:	018b      	lsls	r3, r1, #6
 8001a4c:	4651      	mov	r1, sl
 8001a4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a52:	4651      	mov	r1, sl
 8001a54:	018a      	lsls	r2, r1, #6
 8001a56:	4651      	mov	r1, sl
 8001a58:	ebb2 0801 	subs.w	r8, r2, r1
 8001a5c:	4659      	mov	r1, fp
 8001a5e:	eb63 0901 	sbc.w	r9, r3, r1
 8001a62:	f04f 0200 	mov.w	r2, #0
 8001a66:	f04f 0300 	mov.w	r3, #0
 8001a6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001a6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001a72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001a76:	4690      	mov	r8, r2
 8001a78:	4699      	mov	r9, r3
 8001a7a:	4623      	mov	r3, r4
 8001a7c:	eb18 0303 	adds.w	r3, r8, r3
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	462b      	mov	r3, r5
 8001a84:	eb49 0303 	adc.w	r3, r9, r3
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	f04f 0200 	mov.w	r2, #0
 8001a8e:	f04f 0300 	mov.w	r3, #0
 8001a92:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001a96:	4629      	mov	r1, r5
 8001a98:	024b      	lsls	r3, r1, #9
 8001a9a:	4621      	mov	r1, r4
 8001a9c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001aa0:	4621      	mov	r1, r4
 8001aa2:	024a      	lsls	r2, r1, #9
 8001aa4:	4610      	mov	r0, r2
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aaa:	2200      	movs	r2, #0
 8001aac:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aae:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ab0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001ab4:	f7fe fbdc 	bl	8000270 <__aeabi_uldivmod>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	460b      	mov	r3, r1
 8001abc:	4613      	mov	r3, r2
 8001abe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ac0:	e058      	b.n	8001b74 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ac2:	4b38      	ldr	r3, [pc, #224]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	099b      	lsrs	r3, r3, #6
 8001ac8:	2200      	movs	r2, #0
 8001aca:	4618      	mov	r0, r3
 8001acc:	4611      	mov	r1, r2
 8001ace:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ad2:	623b      	str	r3, [r7, #32]
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001adc:	4642      	mov	r2, r8
 8001ade:	464b      	mov	r3, r9
 8001ae0:	f04f 0000 	mov.w	r0, #0
 8001ae4:	f04f 0100 	mov.w	r1, #0
 8001ae8:	0159      	lsls	r1, r3, #5
 8001aea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aee:	0150      	lsls	r0, r2, #5
 8001af0:	4602      	mov	r2, r0
 8001af2:	460b      	mov	r3, r1
 8001af4:	4641      	mov	r1, r8
 8001af6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001afa:	4649      	mov	r1, r9
 8001afc:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b00:	f04f 0200 	mov.w	r2, #0
 8001b04:	f04f 0300 	mov.w	r3, #0
 8001b08:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b0c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b10:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b14:	ebb2 040a 	subs.w	r4, r2, sl
 8001b18:	eb63 050b 	sbc.w	r5, r3, fp
 8001b1c:	f04f 0200 	mov.w	r2, #0
 8001b20:	f04f 0300 	mov.w	r3, #0
 8001b24:	00eb      	lsls	r3, r5, #3
 8001b26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b2a:	00e2      	lsls	r2, r4, #3
 8001b2c:	4614      	mov	r4, r2
 8001b2e:	461d      	mov	r5, r3
 8001b30:	4643      	mov	r3, r8
 8001b32:	18e3      	adds	r3, r4, r3
 8001b34:	603b      	str	r3, [r7, #0]
 8001b36:	464b      	mov	r3, r9
 8001b38:	eb45 0303 	adc.w	r3, r5, r3
 8001b3c:	607b      	str	r3, [r7, #4]
 8001b3e:	f04f 0200 	mov.w	r2, #0
 8001b42:	f04f 0300 	mov.w	r3, #0
 8001b46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001b4a:	4629      	mov	r1, r5
 8001b4c:	028b      	lsls	r3, r1, #10
 8001b4e:	4621      	mov	r1, r4
 8001b50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b54:	4621      	mov	r1, r4
 8001b56:	028a      	lsls	r2, r1, #10
 8001b58:	4610      	mov	r0, r2
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b5e:	2200      	movs	r2, #0
 8001b60:	61bb      	str	r3, [r7, #24]
 8001b62:	61fa      	str	r2, [r7, #28]
 8001b64:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b68:	f7fe fb82 	bl	8000270 <__aeabi_uldivmod>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4613      	mov	r3, r2
 8001b72:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b74:	4b0b      	ldr	r3, [pc, #44]	; (8001ba4 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	0c1b      	lsrs	r3, r3, #16
 8001b7a:	f003 0303 	and.w	r3, r3, #3
 8001b7e:	3301      	adds	r3, #1
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001b84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b8e:	e002      	b.n	8001b96 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001b90:	4b05      	ldr	r3, [pc, #20]	; (8001ba8 <HAL_RCC_GetSysClockFreq+0x204>)
 8001b92:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001b94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3750      	adds	r7, #80	; 0x50
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40023800 	.word	0x40023800
 8001ba8:	00f42400 	.word	0x00f42400
 8001bac:	007a1200 	.word	0x007a1200

08001bb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001bb4:	4b03      	ldr	r3, [pc, #12]	; (8001bc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	20000000 	.word	0x20000000

08001bc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001bcc:	f7ff fff0 	bl	8001bb0 <HAL_RCC_GetHCLKFreq>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	0b5b      	lsrs	r3, r3, #13
 8001bd8:	f003 0307 	and.w	r3, r3, #7
 8001bdc:	4903      	ldr	r1, [pc, #12]	; (8001bec <HAL_RCC_GetPCLK2Freq+0x24>)
 8001bde:	5ccb      	ldrb	r3, [r1, r3]
 8001be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40023800 	.word	0x40023800
 8001bec:	080054e0 	.word	0x080054e0

08001bf0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	220f      	movs	r2, #15
 8001bfe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c00:	4b12      	ldr	r3, [pc, #72]	; (8001c4c <HAL_RCC_GetClockConfig+0x5c>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 0203 	and.w	r2, r3, #3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c0c:	4b0f      	ldr	r3, [pc, #60]	; (8001c4c <HAL_RCC_GetClockConfig+0x5c>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c18:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <HAL_RCC_GetClockConfig+0x5c>)
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001c24:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <HAL_RCC_GetClockConfig+0x5c>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	08db      	lsrs	r3, r3, #3
 8001c2a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001c32:	4b07      	ldr	r3, [pc, #28]	; (8001c50 <HAL_RCC_GetClockConfig+0x60>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0207 	and.w	r2, r3, #7
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	601a      	str	r2, [r3, #0]
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40023c00 	.word	0x40023c00

08001c54 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b082      	sub	sp, #8
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e041      	b.n	8001cea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d106      	bne.n	8001c80 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f839 	bl	8001cf2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2202      	movs	r2, #2
 8001c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3304      	adds	r3, #4
 8001c90:	4619      	mov	r1, r3
 8001c92:	4610      	mov	r0, r2
 8001c94:	f000 f9d8 	bl	8002048 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2201      	movs	r2, #1
 8001cc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2201      	movs	r2, #1
 8001cdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001cf2:	b480      	push	{r7}
 8001cf4:	b083      	sub	sp, #12
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
	...

08001d08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b085      	sub	sp, #20
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d001      	beq.n	8001d20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e04e      	b.n	8001dbe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2202      	movs	r2, #2
 8001d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	68da      	ldr	r2, [r3, #12]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 0201 	orr.w	r2, r2, #1
 8001d36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a23      	ldr	r2, [pc, #140]	; (8001dcc <HAL_TIM_Base_Start_IT+0xc4>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d022      	beq.n	8001d88 <HAL_TIM_Base_Start_IT+0x80>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d4a:	d01d      	beq.n	8001d88 <HAL_TIM_Base_Start_IT+0x80>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a1f      	ldr	r2, [pc, #124]	; (8001dd0 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d018      	beq.n	8001d88 <HAL_TIM_Base_Start_IT+0x80>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a1e      	ldr	r2, [pc, #120]	; (8001dd4 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d013      	beq.n	8001d88 <HAL_TIM_Base_Start_IT+0x80>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a1c      	ldr	r2, [pc, #112]	; (8001dd8 <HAL_TIM_Base_Start_IT+0xd0>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d00e      	beq.n	8001d88 <HAL_TIM_Base_Start_IT+0x80>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a1b      	ldr	r2, [pc, #108]	; (8001ddc <HAL_TIM_Base_Start_IT+0xd4>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d009      	beq.n	8001d88 <HAL_TIM_Base_Start_IT+0x80>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a19      	ldr	r2, [pc, #100]	; (8001de0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d004      	beq.n	8001d88 <HAL_TIM_Base_Start_IT+0x80>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a18      	ldr	r2, [pc, #96]	; (8001de4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d111      	bne.n	8001dac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2b06      	cmp	r3, #6
 8001d98:	d010      	beq.n	8001dbc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f042 0201 	orr.w	r2, r2, #1
 8001da8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001daa:	e007      	b.n	8001dbc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f042 0201 	orr.w	r2, r2, #1
 8001dba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3714      	adds	r7, #20
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	40010000 	.word	0x40010000
 8001dd0:	40000400 	.word	0x40000400
 8001dd4:	40000800 	.word	0x40000800
 8001dd8:	40000c00 	.word	0x40000c00
 8001ddc:	40010400 	.word	0x40010400
 8001de0:	40014000 	.word	0x40014000
 8001de4:	40001800 	.word	0x40001800

08001de8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d122      	bne.n	8001e44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68db      	ldr	r3, [r3, #12]
 8001e04:	f003 0302 	and.w	r3, r3, #2
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d11b      	bne.n	8001e44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f06f 0202 	mvn.w	r2, #2
 8001e14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d003      	beq.n	8001e32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f000 f8ee 	bl	800200c <HAL_TIM_IC_CaptureCallback>
 8001e30:	e005      	b.n	8001e3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f000 f8e0 	bl	8001ff8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	f000 f8f1 	bl	8002020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	f003 0304 	and.w	r3, r3, #4
 8001e4e:	2b04      	cmp	r3, #4
 8001e50:	d122      	bne.n	8001e98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	f003 0304 	and.w	r3, r3, #4
 8001e5c:	2b04      	cmp	r3, #4
 8001e5e:	d11b      	bne.n	8001e98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f06f 0204 	mvn.w	r2, #4
 8001e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f8c4 	bl	800200c <HAL_TIM_IC_CaptureCallback>
 8001e84:	e005      	b.n	8001e92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f8b6 	bl	8001ff8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 f8c7 	bl	8002020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	f003 0308 	and.w	r3, r3, #8
 8001ea2:	2b08      	cmp	r3, #8
 8001ea4:	d122      	bne.n	8001eec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	f003 0308 	and.w	r3, r3, #8
 8001eb0:	2b08      	cmp	r3, #8
 8001eb2:	d11b      	bne.n	8001eec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f06f 0208 	mvn.w	r2, #8
 8001ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2204      	movs	r2, #4
 8001ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d003      	beq.n	8001eda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f89a 	bl	800200c <HAL_TIM_IC_CaptureCallback>
 8001ed8:	e005      	b.n	8001ee6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f88c 	bl	8001ff8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee0:	6878      	ldr	r0, [r7, #4]
 8001ee2:	f000 f89d 	bl	8002020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	f003 0310 	and.w	r3, r3, #16
 8001ef6:	2b10      	cmp	r3, #16
 8001ef8:	d122      	bne.n	8001f40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	f003 0310 	and.w	r3, r3, #16
 8001f04:	2b10      	cmp	r3, #16
 8001f06:	d11b      	bne.n	8001f40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f06f 0210 	mvn.w	r2, #16
 8001f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2208      	movs	r2, #8
 8001f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	69db      	ldr	r3, [r3, #28]
 8001f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f870 	bl	800200c <HAL_TIM_IC_CaptureCallback>
 8001f2c:	e005      	b.n	8001f3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f862 	bl	8001ff8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 f873 	bl	8002020 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d10e      	bne.n	8001f6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68db      	ldr	r3, [r3, #12]
 8001f54:	f003 0301 	and.w	r3, r3, #1
 8001f58:	2b01      	cmp	r3, #1
 8001f5a:	d107      	bne.n	8001f6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f06f 0201 	mvn.w	r2, #1
 8001f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7fe fd2e 	bl	80009c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	691b      	ldr	r3, [r3, #16]
 8001f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f76:	2b80      	cmp	r3, #128	; 0x80
 8001f78:	d10e      	bne.n	8001f98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	68db      	ldr	r3, [r3, #12]
 8001f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f84:	2b80      	cmp	r3, #128	; 0x80
 8001f86:	d107      	bne.n	8001f98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f902 	bl	800219c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa2:	2b40      	cmp	r3, #64	; 0x40
 8001fa4:	d10e      	bne.n	8001fc4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb0:	2b40      	cmp	r3, #64	; 0x40
 8001fb2:	d107      	bne.n	8001fc4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f838 	bl	8002034 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	691b      	ldr	r3, [r3, #16]
 8001fca:	f003 0320 	and.w	r3, r3, #32
 8001fce:	2b20      	cmp	r3, #32
 8001fd0:	d10e      	bne.n	8001ff0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f003 0320 	and.w	r3, r3, #32
 8001fdc:	2b20      	cmp	r3, #32
 8001fde:	d107      	bne.n	8001ff0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f06f 0220 	mvn.w	r2, #32
 8001fe8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f000 f8cc 	bl	8002188 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ff0:	bf00      	nop
 8001ff2:	3708      	adds	r7, #8
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b083      	sub	sp, #12
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002000:	bf00      	nop
 8002002:	370c      	adds	r7, #12
 8002004:	46bd      	mov	sp, r7
 8002006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200a:	4770      	bx	lr

0800200c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002014:	bf00      	nop
 8002016:	370c      	adds	r7, #12
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr

08002020 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002020:	b480      	push	{r7}
 8002022:	b083      	sub	sp, #12
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002028:	bf00      	nop
 800202a:	370c      	adds	r7, #12
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr

08002034 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800203c:	bf00      	nop
 800203e:	370c      	adds	r7, #12
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a40      	ldr	r2, [pc, #256]	; (800215c <TIM_Base_SetConfig+0x114>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d013      	beq.n	8002088 <TIM_Base_SetConfig+0x40>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002066:	d00f      	beq.n	8002088 <TIM_Base_SetConfig+0x40>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	4a3d      	ldr	r2, [pc, #244]	; (8002160 <TIM_Base_SetConfig+0x118>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d00b      	beq.n	8002088 <TIM_Base_SetConfig+0x40>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a3c      	ldr	r2, [pc, #240]	; (8002164 <TIM_Base_SetConfig+0x11c>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d007      	beq.n	8002088 <TIM_Base_SetConfig+0x40>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4a3b      	ldr	r2, [pc, #236]	; (8002168 <TIM_Base_SetConfig+0x120>)
 800207c:	4293      	cmp	r3, r2
 800207e:	d003      	beq.n	8002088 <TIM_Base_SetConfig+0x40>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	4a3a      	ldr	r2, [pc, #232]	; (800216c <TIM_Base_SetConfig+0x124>)
 8002084:	4293      	cmp	r3, r2
 8002086:	d108      	bne.n	800209a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800208e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	68fa      	ldr	r2, [r7, #12]
 8002096:	4313      	orrs	r3, r2
 8002098:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	4a2f      	ldr	r2, [pc, #188]	; (800215c <TIM_Base_SetConfig+0x114>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d02b      	beq.n	80020fa <TIM_Base_SetConfig+0xb2>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020a8:	d027      	beq.n	80020fa <TIM_Base_SetConfig+0xb2>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a2c      	ldr	r2, [pc, #176]	; (8002160 <TIM_Base_SetConfig+0x118>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d023      	beq.n	80020fa <TIM_Base_SetConfig+0xb2>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a2b      	ldr	r2, [pc, #172]	; (8002164 <TIM_Base_SetConfig+0x11c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d01f      	beq.n	80020fa <TIM_Base_SetConfig+0xb2>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a2a      	ldr	r2, [pc, #168]	; (8002168 <TIM_Base_SetConfig+0x120>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d01b      	beq.n	80020fa <TIM_Base_SetConfig+0xb2>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a29      	ldr	r2, [pc, #164]	; (800216c <TIM_Base_SetConfig+0x124>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d017      	beq.n	80020fa <TIM_Base_SetConfig+0xb2>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a28      	ldr	r2, [pc, #160]	; (8002170 <TIM_Base_SetConfig+0x128>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d013      	beq.n	80020fa <TIM_Base_SetConfig+0xb2>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a27      	ldr	r2, [pc, #156]	; (8002174 <TIM_Base_SetConfig+0x12c>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d00f      	beq.n	80020fa <TIM_Base_SetConfig+0xb2>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a26      	ldr	r2, [pc, #152]	; (8002178 <TIM_Base_SetConfig+0x130>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d00b      	beq.n	80020fa <TIM_Base_SetConfig+0xb2>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a25      	ldr	r2, [pc, #148]	; (800217c <TIM_Base_SetConfig+0x134>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d007      	beq.n	80020fa <TIM_Base_SetConfig+0xb2>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a24      	ldr	r2, [pc, #144]	; (8002180 <TIM_Base_SetConfig+0x138>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d003      	beq.n	80020fa <TIM_Base_SetConfig+0xb2>
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4a23      	ldr	r2, [pc, #140]	; (8002184 <TIM_Base_SetConfig+0x13c>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d108      	bne.n	800210c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002100:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	4313      	orrs	r3, r2
 800210a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	4313      	orrs	r3, r2
 8002118:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	68fa      	ldr	r2, [r7, #12]
 800211e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a0a      	ldr	r2, [pc, #40]	; (800215c <TIM_Base_SetConfig+0x114>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d003      	beq.n	8002140 <TIM_Base_SetConfig+0xf8>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a0c      	ldr	r2, [pc, #48]	; (800216c <TIM_Base_SetConfig+0x124>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d103      	bne.n	8002148 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	691a      	ldr	r2, [r3, #16]
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2201      	movs	r2, #1
 800214c:	615a      	str	r2, [r3, #20]
}
 800214e:	bf00      	nop
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	40010000 	.word	0x40010000
 8002160:	40000400 	.word	0x40000400
 8002164:	40000800 	.word	0x40000800
 8002168:	40000c00 	.word	0x40000c00
 800216c:	40010400 	.word	0x40010400
 8002170:	40014000 	.word	0x40014000
 8002174:	40014400 	.word	0x40014400
 8002178:	40014800 	.word	0x40014800
 800217c:	40001800 	.word	0x40001800
 8002180:	40001c00 	.word	0x40001c00
 8002184:	40002000 	.word	0x40002000

08002188 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219a:	4770      	bx	lr

0800219c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b085      	sub	sp, #20
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	4603      	mov	r3, r0
 80021b8:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80021ba:	2300      	movs	r3, #0
 80021bc:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80021be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80021c2:	2b84      	cmp	r3, #132	; 0x84
 80021c4:	d005      	beq.n	80021d2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80021c6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	4413      	add	r3, r2
 80021ce:	3303      	adds	r3, #3
 80021d0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80021d2:	68fb      	ldr	r3, [r7, #12]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3714      	adds	r7, #20
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021e6:	f3ef 8305 	mrs	r3, IPSR
 80021ea:	607b      	str	r3, [r7, #4]
  return(result);
 80021ec:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	bf14      	ite	ne
 80021f2:	2301      	movne	r3, #1
 80021f4:	2300      	moveq	r3, #0
 80021f6:	b2db      	uxtb	r3, r3
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	370c      	adds	r7, #12
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002208:	f000 fff6 	bl	80031f8 <vTaskStartScheduler>
  
  return osOK;
 800220c:	2300      	movs	r3, #0
}
 800220e:	4618      	mov	r0, r3
 8002210:	bd80      	pop	{r7, pc}

08002212 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002212:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002214:	b089      	sub	sp, #36	; 0x24
 8002216:	af04      	add	r7, sp, #16
 8002218:	6078      	str	r0, [r7, #4]
 800221a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	695b      	ldr	r3, [r3, #20]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d020      	beq.n	8002266 <osThreadCreate+0x54>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	699b      	ldr	r3, [r3, #24]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d01c      	beq.n	8002266 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685c      	ldr	r4, [r3, #4]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	691e      	ldr	r6, [r3, #16]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800223e:	4618      	mov	r0, r3
 8002240:	f7ff ffb6 	bl	80021b0 <makeFreeRtosPriority>
 8002244:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	687a      	ldr	r2, [r7, #4]
 800224c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800224e:	9202      	str	r2, [sp, #8]
 8002250:	9301      	str	r3, [sp, #4]
 8002252:	9100      	str	r1, [sp, #0]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	4632      	mov	r2, r6
 8002258:	4629      	mov	r1, r5
 800225a:	4620      	mov	r0, r4
 800225c:	f000 fc5a 	bl	8002b14 <xTaskCreateStatic>
 8002260:	4603      	mov	r3, r0
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	e01c      	b.n	80022a0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685c      	ldr	r4, [r3, #4]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002272:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff ff98 	bl	80021b0 <makeFreeRtosPriority>
 8002280:	4602      	mov	r2, r0
 8002282:	f107 030c 	add.w	r3, r7, #12
 8002286:	9301      	str	r3, [sp, #4]
 8002288:	9200      	str	r2, [sp, #0]
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	4632      	mov	r2, r6
 800228e:	4629      	mov	r1, r5
 8002290:	4620      	mov	r0, r4
 8002292:	f000 fc9c 	bl	8002bce <xTaskCreate>
 8002296:	4603      	mov	r3, r0
 8002298:	2b01      	cmp	r3, #1
 800229a:	d001      	beq.n	80022a0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800229c:	2300      	movs	r3, #0
 800229e:	e000      	b.n	80022a2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80022a0:	68fb      	ldr	r3, [r7, #12]
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3714      	adds	r7, #20
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080022aa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b084      	sub	sp, #16
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <osDelay+0x16>
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	e000      	b.n	80022c2 <osDelay+0x18>
 80022c0:	2301      	movs	r3, #1
 80022c2:	4618      	mov	r0, r3
 80022c4:	f000 fdd0 	bl	8002e68 <vTaskDelay>
  
  return osOK;
 80022c8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3710      	adds	r7, #16
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}

080022d2 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80022d2:	b580      	push	{r7, lr}
 80022d4:	b086      	sub	sp, #24
 80022d6:	af02      	add	r7, sp, #8
 80022d8:	6078      	str	r0, [r7, #4]
 80022da:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d00f      	beq.n	8002304 <osSemaphoreCreate+0x32>
    if (count == 1) {
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d10a      	bne.n	8002300 <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2203      	movs	r2, #3
 80022f0:	9200      	str	r2, [sp, #0]
 80022f2:	2200      	movs	r2, #0
 80022f4:	2100      	movs	r1, #0
 80022f6:	2001      	movs	r0, #1
 80022f8:	f000 f968 	bl	80025cc <xQueueGenericCreateStatic>
 80022fc:	4603      	mov	r3, r0
 80022fe:	e016      	b.n	800232e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8002300:	2300      	movs	r3, #0
 8002302:	e014      	b.n	800232e <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	2b01      	cmp	r3, #1
 8002308:	d110      	bne.n	800232c <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800230a:	2203      	movs	r2, #3
 800230c:	2100      	movs	r1, #0
 800230e:	2001      	movs	r0, #1
 8002310:	f000 f9d4 	bl	80026bc <xQueueGenericCreate>
 8002314:	60f8      	str	r0, [r7, #12]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d005      	beq.n	8002328 <osSemaphoreCreate+0x56>
 800231c:	2300      	movs	r3, #0
 800231e:	2200      	movs	r2, #0
 8002320:	2100      	movs	r1, #0
 8002322:	68f8      	ldr	r0, [r7, #12]
 8002324:	f000 fa24 	bl	8002770 <xQueueGenericSend>
      return sema;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	e000      	b.n	800232e <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800232c:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800232e:	4618      	mov	r0, r3
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <osThreadSuspend>:
* @brief  Suspend execution of a thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadSuspend (osThreadId thread_id)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b082      	sub	sp, #8
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)
    vTaskSuspend(thread_id);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f000 fdc6 	bl	8002ed0 <vTaskSuspend>
  
  return osOK;
 8002344:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <osThreadResume>:
* @brief  Resume execution of a suspended thread.
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osThreadResume (osThreadId thread_id)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskSuspend == 1)  
  if(inHandlerMode())
 8002358:	f7ff ff42 	bl	80021e0 <inHandlerMode>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00e      	beq.n	8002380 <osThreadResume+0x30>
  {
    if (xTaskResumeFromISR(thread_id) == pdTRUE)
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f000 fed6 	bl	8003114 <xTaskResumeFromISR>
 8002368:	4603      	mov	r3, r0
 800236a:	2b01      	cmp	r3, #1
 800236c:	d10b      	bne.n	8002386 <osThreadResume+0x36>
    {
      portYIELD_FROM_ISR(pdTRUE);
 800236e:	4b08      	ldr	r3, [pc, #32]	; (8002390 <osThreadResume+0x40>)
 8002370:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002374:	601a      	str	r2, [r3, #0]
 8002376:	f3bf 8f4f 	dsb	sy
 800237a:	f3bf 8f6f 	isb	sy
 800237e:	e002      	b.n	8002386 <osThreadResume+0x36>
    }
  }
  else
  {
    vTaskResume(thread_id);
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f000 fe69 	bl	8003058 <vTaskResume>
  }
  return osOK;
 8002386:	2300      	movs	r3, #0
#else
  return osErrorResource;
#endif
}
 8002388:	4618      	mov	r0, r3
 800238a:	3708      	adds	r7, #8
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	e000ed04 	.word	0xe000ed04

08002394 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002394:	b480      	push	{r7}
 8002396:	b083      	sub	sp, #12
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	f103 0208 	add.w	r2, r3, #8
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f04f 32ff 	mov.w	r2, #4294967295
 80023ac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f103 0208 	add.w	r2, r3, #8
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	f103 0208 	add.w	r2, r3, #8
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr

080023ee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80023ee:	b480      	push	{r7}
 80023f0:	b085      	sub	sp, #20
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
 80023f6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	68fa      	ldr	r2, [r7, #12]
 8002402:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	683a      	ldr	r2, [r7, #0]
 8002412:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	683a      	ldr	r2, [r7, #0]
 8002418:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	1c5a      	adds	r2, r3, #1
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	601a      	str	r2, [r3, #0]
}
 800242a:	bf00      	nop
 800242c:	3714      	adds	r7, #20
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002436:	b480      	push	{r7}
 8002438:	b085      	sub	sp, #20
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
 800243e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002446:	68bb      	ldr	r3, [r7, #8]
 8002448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800244c:	d103      	bne.n	8002456 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	691b      	ldr	r3, [r3, #16]
 8002452:	60fb      	str	r3, [r7, #12]
 8002454:	e00c      	b.n	8002470 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	3308      	adds	r3, #8
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	e002      	b.n	8002464 <vListInsert+0x2e>
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	68ba      	ldr	r2, [r7, #8]
 800246c:	429a      	cmp	r2, r3
 800246e:	d2f6      	bcs.n	800245e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	685a      	ldr	r2, [r3, #4]
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	68fa      	ldr	r2, [r7, #12]
 8002484:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	683a      	ldr	r2, [r7, #0]
 800248a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	687a      	ldr	r2, [r7, #4]
 8002490:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	1c5a      	adds	r2, r3, #1
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	601a      	str	r2, [r3, #0]
}
 800249c:	bf00      	nop
 800249e:	3714      	adds	r7, #20
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80024a8:	b480      	push	{r7}
 80024aa:	b085      	sub	sp, #20
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	687a      	ldr	r2, [r7, #4]
 80024bc:	6892      	ldr	r2, [r2, #8]
 80024be:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6852      	ldr	r2, [r2, #4]
 80024c8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d103      	bne.n	80024dc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689a      	ldr	r2, [r3, #8]
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	1e5a      	subs	r2, r3, #1
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3714      	adds	r7, #20
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b084      	sub	sp, #16
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d10a      	bne.n	8002526 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002510:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002514:	f383 8811 	msr	BASEPRI, r3
 8002518:	f3bf 8f6f 	isb	sy
 800251c:	f3bf 8f4f 	dsb	sy
 8002520:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002522:	bf00      	nop
 8002524:	e7fe      	b.n	8002524 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002526:	f001 fcad 	bl	8003e84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002532:	68f9      	ldr	r1, [r7, #12]
 8002534:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002536:	fb01 f303 	mul.w	r3, r1, r3
 800253a:	441a      	add	r2, r3
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2200      	movs	r2, #0
 8002544:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002556:	3b01      	subs	r3, #1
 8002558:	68f9      	ldr	r1, [r7, #12]
 800255a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800255c:	fb01 f303 	mul.w	r3, r1, r3
 8002560:	441a      	add	r2, r3
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	22ff      	movs	r2, #255	; 0xff
 800256a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	22ff      	movs	r2, #255	; 0xff
 8002572:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d114      	bne.n	80025a6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d01a      	beq.n	80025ba <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	3310      	adds	r3, #16
 8002588:	4618      	mov	r0, r3
 800258a:	f001 f887 	bl	800369c <xTaskRemoveFromEventList>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d012      	beq.n	80025ba <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002594:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <xQueueGenericReset+0xcc>)
 8002596:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	f3bf 8f4f 	dsb	sy
 80025a0:	f3bf 8f6f 	isb	sy
 80025a4:	e009      	b.n	80025ba <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	3310      	adds	r3, #16
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff fef2 	bl	8002394 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	3324      	adds	r3, #36	; 0x24
 80025b4:	4618      	mov	r0, r3
 80025b6:	f7ff feed 	bl	8002394 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80025ba:	f001 fc93 	bl	8003ee4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80025be:	2301      	movs	r3, #1
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}
 80025c8:	e000ed04 	.word	0xe000ed04

080025cc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08e      	sub	sp, #56	; 0x38
 80025d0:	af02      	add	r7, sp, #8
 80025d2:	60f8      	str	r0, [r7, #12]
 80025d4:	60b9      	str	r1, [r7, #8]
 80025d6:	607a      	str	r2, [r7, #4]
 80025d8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10a      	bne.n	80025f6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80025e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e4:	f383 8811 	msr	BASEPRI, r3
 80025e8:	f3bf 8f6f 	isb	sy
 80025ec:	f3bf 8f4f 	dsb	sy
 80025f0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80025f2:	bf00      	nop
 80025f4:	e7fe      	b.n	80025f4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d10a      	bne.n	8002612 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80025fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002600:	f383 8811 	msr	BASEPRI, r3
 8002604:	f3bf 8f6f 	isb	sy
 8002608:	f3bf 8f4f 	dsb	sy
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800260e:	bf00      	nop
 8002610:	e7fe      	b.n	8002610 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d002      	beq.n	800261e <xQueueGenericCreateStatic+0x52>
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d001      	beq.n	8002622 <xQueueGenericCreateStatic+0x56>
 800261e:	2301      	movs	r3, #1
 8002620:	e000      	b.n	8002624 <xQueueGenericCreateStatic+0x58>
 8002622:	2300      	movs	r3, #0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d10a      	bne.n	800263e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800262c:	f383 8811 	msr	BASEPRI, r3
 8002630:	f3bf 8f6f 	isb	sy
 8002634:	f3bf 8f4f 	dsb	sy
 8002638:	623b      	str	r3, [r7, #32]
}
 800263a:	bf00      	nop
 800263c:	e7fe      	b.n	800263c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d102      	bne.n	800264a <xQueueGenericCreateStatic+0x7e>
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <xQueueGenericCreateStatic+0x82>
 800264a:	2301      	movs	r3, #1
 800264c:	e000      	b.n	8002650 <xQueueGenericCreateStatic+0x84>
 800264e:	2300      	movs	r3, #0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d10a      	bne.n	800266a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002658:	f383 8811 	msr	BASEPRI, r3
 800265c:	f3bf 8f6f 	isb	sy
 8002660:	f3bf 8f4f 	dsb	sy
 8002664:	61fb      	str	r3, [r7, #28]
}
 8002666:	bf00      	nop
 8002668:	e7fe      	b.n	8002668 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800266a:	2348      	movs	r3, #72	; 0x48
 800266c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800266e:	697b      	ldr	r3, [r7, #20]
 8002670:	2b48      	cmp	r3, #72	; 0x48
 8002672:	d00a      	beq.n	800268a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002674:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002678:	f383 8811 	msr	BASEPRI, r3
 800267c:	f3bf 8f6f 	isb	sy
 8002680:	f3bf 8f4f 	dsb	sy
 8002684:	61bb      	str	r3, [r7, #24]
}
 8002686:	bf00      	nop
 8002688:	e7fe      	b.n	8002688 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800268a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00d      	beq.n	80026b2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002698:	2201      	movs	r2, #1
 800269a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800269e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80026a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026a4:	9300      	str	r3, [sp, #0]
 80026a6:	4613      	mov	r3, r2
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	68b9      	ldr	r1, [r7, #8]
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f000 f83f 	bl	8002730 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80026b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3730      	adds	r7, #48	; 0x30
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b08a      	sub	sp, #40	; 0x28
 80026c0:	af02      	add	r7, sp, #8
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	60b9      	str	r1, [r7, #8]
 80026c6:	4613      	mov	r3, r2
 80026c8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d10a      	bne.n	80026e6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80026d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026d4:	f383 8811 	msr	BASEPRI, r3
 80026d8:	f3bf 8f6f 	isb	sy
 80026dc:	f3bf 8f4f 	dsb	sy
 80026e0:	613b      	str	r3, [r7, #16]
}
 80026e2:	bf00      	nop
 80026e4:	e7fe      	b.n	80026e4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	fb02 f303 	mul.w	r3, r2, r3
 80026ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	3348      	adds	r3, #72	; 0x48
 80026f4:	4618      	mov	r0, r3
 80026f6:	f001 fce7 	bl	80040c8 <pvPortMalloc>
 80026fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d011      	beq.n	8002726 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	3348      	adds	r3, #72	; 0x48
 800270a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002714:	79fa      	ldrb	r2, [r7, #7]
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	4613      	mov	r3, r2
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	68b9      	ldr	r1, [r7, #8]
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f000 f805 	bl	8002730 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002726:	69bb      	ldr	r3, [r7, #24]
	}
 8002728:	4618      	mov	r0, r3
 800272a:	3720      	adds	r7, #32
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	60f8      	str	r0, [r7, #12]
 8002738:	60b9      	str	r1, [r7, #8]
 800273a:	607a      	str	r2, [r7, #4]
 800273c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800273e:	68bb      	ldr	r3, [r7, #8]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d103      	bne.n	800274c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	601a      	str	r2, [r3, #0]
 800274a:	e002      	b.n	8002752 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	68fa      	ldr	r2, [r7, #12]
 8002756:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002758:	69bb      	ldr	r3, [r7, #24]
 800275a:	68ba      	ldr	r2, [r7, #8]
 800275c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800275e:	2101      	movs	r1, #1
 8002760:	69b8      	ldr	r0, [r7, #24]
 8002762:	f7ff fecb 	bl	80024fc <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002766:	bf00      	nop
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}
	...

08002770 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b08e      	sub	sp, #56	; 0x38
 8002774:	af00      	add	r7, sp, #0
 8002776:	60f8      	str	r0, [r7, #12]
 8002778:	60b9      	str	r1, [r7, #8]
 800277a:	607a      	str	r2, [r7, #4]
 800277c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800277e:	2300      	movs	r3, #0
 8002780:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10a      	bne.n	80027a2 <xQueueGenericSend+0x32>
	__asm volatile
 800278c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002790:	f383 8811 	msr	BASEPRI, r3
 8002794:	f3bf 8f6f 	isb	sy
 8002798:	f3bf 8f4f 	dsb	sy
 800279c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800279e:	bf00      	nop
 80027a0:	e7fe      	b.n	80027a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d103      	bne.n	80027b0 <xQueueGenericSend+0x40>
 80027a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <xQueueGenericSend+0x44>
 80027b0:	2301      	movs	r3, #1
 80027b2:	e000      	b.n	80027b6 <xQueueGenericSend+0x46>
 80027b4:	2300      	movs	r3, #0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10a      	bne.n	80027d0 <xQueueGenericSend+0x60>
	__asm volatile
 80027ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027be:	f383 8811 	msr	BASEPRI, r3
 80027c2:	f3bf 8f6f 	isb	sy
 80027c6:	f3bf 8f4f 	dsb	sy
 80027ca:	627b      	str	r3, [r7, #36]	; 0x24
}
 80027cc:	bf00      	nop
 80027ce:	e7fe      	b.n	80027ce <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d103      	bne.n	80027de <xQueueGenericSend+0x6e>
 80027d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d101      	bne.n	80027e2 <xQueueGenericSend+0x72>
 80027de:	2301      	movs	r3, #1
 80027e0:	e000      	b.n	80027e4 <xQueueGenericSend+0x74>
 80027e2:	2300      	movs	r3, #0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d10a      	bne.n	80027fe <xQueueGenericSend+0x8e>
	__asm volatile
 80027e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ec:	f383 8811 	msr	BASEPRI, r3
 80027f0:	f3bf 8f6f 	isb	sy
 80027f4:	f3bf 8f4f 	dsb	sy
 80027f8:	623b      	str	r3, [r7, #32]
}
 80027fa:	bf00      	nop
 80027fc:	e7fe      	b.n	80027fc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80027fe:	f001 f90d 	bl	8003a1c <xTaskGetSchedulerState>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d102      	bne.n	800280e <xQueueGenericSend+0x9e>
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <xQueueGenericSend+0xa2>
 800280e:	2301      	movs	r3, #1
 8002810:	e000      	b.n	8002814 <xQueueGenericSend+0xa4>
 8002812:	2300      	movs	r3, #0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d10a      	bne.n	800282e <xQueueGenericSend+0xbe>
	__asm volatile
 8002818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800281c:	f383 8811 	msr	BASEPRI, r3
 8002820:	f3bf 8f6f 	isb	sy
 8002824:	f3bf 8f4f 	dsb	sy
 8002828:	61fb      	str	r3, [r7, #28]
}
 800282a:	bf00      	nop
 800282c:	e7fe      	b.n	800282c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800282e:	f001 fb29 	bl	8003e84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002834:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800283a:	429a      	cmp	r2, r3
 800283c:	d302      	bcc.n	8002844 <xQueueGenericSend+0xd4>
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	2b02      	cmp	r3, #2
 8002842:	d129      	bne.n	8002898 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	68b9      	ldr	r1, [r7, #8]
 8002848:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800284a:	f000 f88f 	bl	800296c <prvCopyDataToQueue>
 800284e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	2b00      	cmp	r3, #0
 8002856:	d010      	beq.n	800287a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800285a:	3324      	adds	r3, #36	; 0x24
 800285c:	4618      	mov	r0, r3
 800285e:	f000 ff1d 	bl	800369c <xTaskRemoveFromEventList>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d013      	beq.n	8002890 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002868:	4b3f      	ldr	r3, [pc, #252]	; (8002968 <xQueueGenericSend+0x1f8>)
 800286a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800286e:	601a      	str	r2, [r3, #0]
 8002870:	f3bf 8f4f 	dsb	sy
 8002874:	f3bf 8f6f 	isb	sy
 8002878:	e00a      	b.n	8002890 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800287a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287c:	2b00      	cmp	r3, #0
 800287e:	d007      	beq.n	8002890 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002880:	4b39      	ldr	r3, [pc, #228]	; (8002968 <xQueueGenericSend+0x1f8>)
 8002882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002886:	601a      	str	r2, [r3, #0]
 8002888:	f3bf 8f4f 	dsb	sy
 800288c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002890:	f001 fb28 	bl	8003ee4 <vPortExitCritical>
				return pdPASS;
 8002894:	2301      	movs	r3, #1
 8002896:	e063      	b.n	8002960 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d103      	bne.n	80028a6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800289e:	f001 fb21 	bl	8003ee4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80028a2:	2300      	movs	r3, #0
 80028a4:	e05c      	b.n	8002960 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80028a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d106      	bne.n	80028ba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80028ac:	f107 0314 	add.w	r3, r7, #20
 80028b0:	4618      	mov	r0, r3
 80028b2:	f000 ff55 	bl	8003760 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80028b6:	2301      	movs	r3, #1
 80028b8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80028ba:	f001 fb13 	bl	8003ee4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80028be:	f000 fd05 	bl	80032cc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80028c2:	f001 fadf 	bl	8003e84 <vPortEnterCritical>
 80028c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028cc:	b25b      	sxtb	r3, r3
 80028ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d2:	d103      	bne.n	80028dc <xQueueGenericSend+0x16c>
 80028d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028e2:	b25b      	sxtb	r3, r3
 80028e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e8:	d103      	bne.n	80028f2 <xQueueGenericSend+0x182>
 80028ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028f2:	f001 faf7 	bl	8003ee4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028f6:	1d3a      	adds	r2, r7, #4
 80028f8:	f107 0314 	add.w	r3, r7, #20
 80028fc:	4611      	mov	r1, r2
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 ff44 	bl	800378c <xTaskCheckForTimeOut>
 8002904:	4603      	mov	r3, r0
 8002906:	2b00      	cmp	r3, #0
 8002908:	d124      	bne.n	8002954 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800290a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800290c:	f000 f8ea 	bl	8002ae4 <prvIsQueueFull>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d018      	beq.n	8002948 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002918:	3310      	adds	r3, #16
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	4611      	mov	r1, r2
 800291e:	4618      	mov	r0, r3
 8002920:	f000 fe98 	bl	8003654 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002924:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002926:	f000 f88b 	bl	8002a40 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800292a:	f000 fcdd 	bl	80032e8 <xTaskResumeAll>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	f47f af7c 	bne.w	800282e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002936:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <xQueueGenericSend+0x1f8>)
 8002938:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	f3bf 8f4f 	dsb	sy
 8002942:	f3bf 8f6f 	isb	sy
 8002946:	e772      	b.n	800282e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002948:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800294a:	f000 f879 	bl	8002a40 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800294e:	f000 fccb 	bl	80032e8 <xTaskResumeAll>
 8002952:	e76c      	b.n	800282e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002954:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002956:	f000 f873 	bl	8002a40 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800295a:	f000 fcc5 	bl	80032e8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800295e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002960:	4618      	mov	r0, r3
 8002962:	3738      	adds	r7, #56	; 0x38
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	e000ed04 	.word	0xe000ed04

0800296c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	60f8      	str	r0, [r7, #12]
 8002974:	60b9      	str	r1, [r7, #8]
 8002976:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002978:	2300      	movs	r3, #0
 800297a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002980:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10d      	bne.n	80029a6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d14d      	bne.n	8002a2e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	4618      	mov	r0, r3
 8002998:	f001 f85e 	bl	8003a58 <xTaskPriorityDisinherit>
 800299c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	609a      	str	r2, [r3, #8]
 80029a4:	e043      	b.n	8002a2e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d119      	bne.n	80029e0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6858      	ldr	r0, [r3, #4]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b4:	461a      	mov	r2, r3
 80029b6:	68b9      	ldr	r1, [r7, #8]
 80029b8:	f001 ff59 	bl	800486e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c4:	441a      	add	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d32b      	bcc.n	8002a2e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	605a      	str	r2, [r3, #4]
 80029de:	e026      	b.n	8002a2e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	68d8      	ldr	r0, [r3, #12]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e8:	461a      	mov	r2, r3
 80029ea:	68b9      	ldr	r1, [r7, #8]
 80029ec:	f001 ff3f 	bl	800486e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	68da      	ldr	r2, [r3, #12]
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f8:	425b      	negs	r3, r3
 80029fa:	441a      	add	r2, r3
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	68da      	ldr	r2, [r3, #12]
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d207      	bcs.n	8002a1c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	689a      	ldr	r2, [r3, #8]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a14:	425b      	negs	r3, r3
 8002a16:	441a      	add	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d105      	bne.n	8002a2e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d002      	beq.n	8002a2e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1c5a      	adds	r2, r3, #1
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002a36:	697b      	ldr	r3, [r7, #20]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	3718      	adds	r7, #24
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002a48:	f001 fa1c 	bl	8003e84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a52:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a54:	e011      	b.n	8002a7a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d012      	beq.n	8002a84 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	3324      	adds	r3, #36	; 0x24
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 fe1a 	bl	800369c <xTaskRemoveFromEventList>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d001      	beq.n	8002a72 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002a6e:	f000 feef 	bl	8003850 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002a72:	7bfb      	ldrb	r3, [r7, #15]
 8002a74:	3b01      	subs	r3, #1
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002a7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	dce9      	bgt.n	8002a56 <prvUnlockQueue+0x16>
 8002a82:	e000      	b.n	8002a86 <prvUnlockQueue+0x46>
					break;
 8002a84:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	22ff      	movs	r2, #255	; 0xff
 8002a8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002a8e:	f001 fa29 	bl	8003ee4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002a92:	f001 f9f7 	bl	8003e84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002a9c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002a9e:	e011      	b.n	8002ac4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d012      	beq.n	8002ace <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3310      	adds	r3, #16
 8002aac:	4618      	mov	r0, r3
 8002aae:	f000 fdf5 	bl	800369c <xTaskRemoveFromEventList>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d001      	beq.n	8002abc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002ab8:	f000 feca 	bl	8003850 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002abc:	7bbb      	ldrb	r3, [r7, #14]
 8002abe:	3b01      	subs	r3, #1
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002ac4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	dce9      	bgt.n	8002aa0 <prvUnlockQueue+0x60>
 8002acc:	e000      	b.n	8002ad0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002ace:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	22ff      	movs	r2, #255	; 0xff
 8002ad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002ad8:	f001 fa04 	bl	8003ee4 <vPortExitCritical>
}
 8002adc:	bf00      	nop
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002aec:	f001 f9ca 	bl	8003e84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d102      	bne.n	8002b02 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002afc:	2301      	movs	r3, #1
 8002afe:	60fb      	str	r3, [r7, #12]
 8002b00:	e001      	b.n	8002b06 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002b02:	2300      	movs	r3, #0
 8002b04:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002b06:	f001 f9ed 	bl	8003ee4 <vPortExitCritical>

	return xReturn;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	3710      	adds	r7, #16
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}

08002b14 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b08e      	sub	sp, #56	; 0x38
 8002b18:	af04      	add	r7, sp, #16
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
 8002b20:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10a      	bne.n	8002b3e <xTaskCreateStatic+0x2a>
	__asm volatile
 8002b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b2c:	f383 8811 	msr	BASEPRI, r3
 8002b30:	f3bf 8f6f 	isb	sy
 8002b34:	f3bf 8f4f 	dsb	sy
 8002b38:	623b      	str	r3, [r7, #32]
}
 8002b3a:	bf00      	nop
 8002b3c:	e7fe      	b.n	8002b3c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002b3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10a      	bne.n	8002b5a <xTaskCreateStatic+0x46>
	__asm volatile
 8002b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b48:	f383 8811 	msr	BASEPRI, r3
 8002b4c:	f3bf 8f6f 	isb	sy
 8002b50:	f3bf 8f4f 	dsb	sy
 8002b54:	61fb      	str	r3, [r7, #28]
}
 8002b56:	bf00      	nop
 8002b58:	e7fe      	b.n	8002b58 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002b5a:	23a0      	movs	r3, #160	; 0xa0
 8002b5c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	2ba0      	cmp	r3, #160	; 0xa0
 8002b62:	d00a      	beq.n	8002b7a <xTaskCreateStatic+0x66>
	__asm volatile
 8002b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b68:	f383 8811 	msr	BASEPRI, r3
 8002b6c:	f3bf 8f6f 	isb	sy
 8002b70:	f3bf 8f4f 	dsb	sy
 8002b74:	61bb      	str	r3, [r7, #24]
}
 8002b76:	bf00      	nop
 8002b78:	e7fe      	b.n	8002b78 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002b7a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d01e      	beq.n	8002bc0 <xTaskCreateStatic+0xac>
 8002b82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d01b      	beq.n	8002bc0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002b88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b8a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002b90:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b94:	2202      	movs	r2, #2
 8002b96:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	9303      	str	r3, [sp, #12]
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba0:	9302      	str	r3, [sp, #8]
 8002ba2:	f107 0314 	add.w	r3, r7, #20
 8002ba6:	9301      	str	r3, [sp, #4]
 8002ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	68b9      	ldr	r1, [r7, #8]
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f000 f850 	bl	8002c58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002bb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002bba:	f000 f8eb 	bl	8002d94 <prvAddNewTaskToReadyList>
 8002bbe:	e001      	b.n	8002bc4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002bc4:	697b      	ldr	r3, [r7, #20]
	}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3728      	adds	r7, #40	; 0x28
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b08c      	sub	sp, #48	; 0x30
 8002bd2:	af04      	add	r7, sp, #16
 8002bd4:	60f8      	str	r0, [r7, #12]
 8002bd6:	60b9      	str	r1, [r7, #8]
 8002bd8:	603b      	str	r3, [r7, #0]
 8002bda:	4613      	mov	r3, r2
 8002bdc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002bde:	88fb      	ldrh	r3, [r7, #6]
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4618      	mov	r0, r3
 8002be4:	f001 fa70 	bl	80040c8 <pvPortMalloc>
 8002be8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00e      	beq.n	8002c0e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002bf0:	20a0      	movs	r0, #160	; 0xa0
 8002bf2:	f001 fa69 	bl	80040c8 <pvPortMalloc>
 8002bf6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d003      	beq.n	8002c06 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	697a      	ldr	r2, [r7, #20]
 8002c02:	631a      	str	r2, [r3, #48]	; 0x30
 8002c04:	e005      	b.n	8002c12 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002c06:	6978      	ldr	r0, [r7, #20]
 8002c08:	f001 fb2a 	bl	8004260 <vPortFree>
 8002c0c:	e001      	b.n	8002c12 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d017      	beq.n	8002c48 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002c20:	88fa      	ldrh	r2, [r7, #6]
 8002c22:	2300      	movs	r3, #0
 8002c24:	9303      	str	r3, [sp, #12]
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	9302      	str	r3, [sp, #8]
 8002c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c2c:	9301      	str	r3, [sp, #4]
 8002c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c30:	9300      	str	r3, [sp, #0]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	68b9      	ldr	r1, [r7, #8]
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f000 f80e 	bl	8002c58 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002c3c:	69f8      	ldr	r0, [r7, #28]
 8002c3e:	f000 f8a9 	bl	8002d94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002c42:	2301      	movs	r3, #1
 8002c44:	61bb      	str	r3, [r7, #24]
 8002c46:	e002      	b.n	8002c4e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002c48:	f04f 33ff 	mov.w	r3, #4294967295
 8002c4c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002c4e:	69bb      	ldr	r3, [r7, #24]
	}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3720      	adds	r7, #32
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}

08002c58 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b088      	sub	sp, #32
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	60b9      	str	r1, [r7, #8]
 8002c62:	607a      	str	r2, [r7, #4]
 8002c64:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002c70:	3b01      	subs	r3, #1
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	f023 0307 	bic.w	r3, r3, #7
 8002c7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00a      	beq.n	8002ca0 <prvInitialiseNewTask+0x48>
	__asm volatile
 8002c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c8e:	f383 8811 	msr	BASEPRI, r3
 8002c92:	f3bf 8f6f 	isb	sy
 8002c96:	f3bf 8f4f 	dsb	sy
 8002c9a:	617b      	str	r3, [r7, #20]
}
 8002c9c:	bf00      	nop
 8002c9e:	e7fe      	b.n	8002c9e <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002ca0:	68bb      	ldr	r3, [r7, #8]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d01f      	beq.n	8002ce6 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61fb      	str	r3, [r7, #28]
 8002caa:	e012      	b.n	8002cd2 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002cac:	68ba      	ldr	r2, [r7, #8]
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	7819      	ldrb	r1, [r3, #0]
 8002cb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	4413      	add	r3, r2
 8002cba:	3334      	adds	r3, #52	; 0x34
 8002cbc:	460a      	mov	r2, r1
 8002cbe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002cc0:	68ba      	ldr	r2, [r7, #8]
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d006      	beq.n	8002cda <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ccc:	69fb      	ldr	r3, [r7, #28]
 8002cce:	3301      	adds	r3, #1
 8002cd0:	61fb      	str	r3, [r7, #28]
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	2b0f      	cmp	r3, #15
 8002cd6:	d9e9      	bls.n	8002cac <prvInitialiseNewTask+0x54>
 8002cd8:	e000      	b.n	8002cdc <prvInitialiseNewTask+0x84>
			{
				break;
 8002cda:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ce4:	e003      	b.n	8002cee <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf0:	2b06      	cmp	r3, #6
 8002cf2:	d901      	bls.n	8002cf8 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002cf4:	2306      	movs	r3, #6
 8002cf6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002cfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002cfc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d02:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d06:	2200      	movs	r2, #0
 8002d08:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0c:	3304      	adds	r3, #4
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff fb60 	bl	80023d4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d16:	3318      	adds	r3, #24
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7ff fb5b 	bl	80023d4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d26:	f1c3 0207 	rsb	r2, r3, #7
 8002d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d32:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d36:	2200      	movs	r2, #0
 8002d38:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d46:	334c      	adds	r3, #76	; 0x4c
 8002d48:	224c      	movs	r2, #76	; 0x4c
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f001 fcbc 	bl	80046ca <memset>
 8002d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d54:	4a0c      	ldr	r2, [pc, #48]	; (8002d88 <prvInitialiseNewTask+0x130>)
 8002d56:	651a      	str	r2, [r3, #80]	; 0x50
 8002d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d5a:	4a0c      	ldr	r2, [pc, #48]	; (8002d8c <prvInitialiseNewTask+0x134>)
 8002d5c:	655a      	str	r2, [r3, #84]	; 0x54
 8002d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d60:	4a0b      	ldr	r2, [pc, #44]	; (8002d90 <prvInitialiseNewTask+0x138>)
 8002d62:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	68f9      	ldr	r1, [r7, #12]
 8002d68:	69b8      	ldr	r0, [r7, #24]
 8002d6a:	f000 ff61 	bl	8003c30 <pxPortInitialiseStack>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d72:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d002      	beq.n	8002d80 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d7e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002d80:	bf00      	nop
 8002d82:	3720      	adds	r7, #32
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}
 8002d88:	200040e0 	.word	0x200040e0
 8002d8c:	20004148 	.word	0x20004148
 8002d90:	200041b0 	.word	0x200041b0

08002d94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002d9c:	f001 f872 	bl	8003e84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002da0:	4b2a      	ldr	r3, [pc, #168]	; (8002e4c <prvAddNewTaskToReadyList+0xb8>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	3301      	adds	r3, #1
 8002da6:	4a29      	ldr	r2, [pc, #164]	; (8002e4c <prvAddNewTaskToReadyList+0xb8>)
 8002da8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002daa:	4b29      	ldr	r3, [pc, #164]	; (8002e50 <prvAddNewTaskToReadyList+0xbc>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d109      	bne.n	8002dc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002db2:	4a27      	ldr	r2, [pc, #156]	; (8002e50 <prvAddNewTaskToReadyList+0xbc>)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002db8:	4b24      	ldr	r3, [pc, #144]	; (8002e4c <prvAddNewTaskToReadyList+0xb8>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d110      	bne.n	8002de2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002dc0:	f000 fd6a 	bl	8003898 <prvInitialiseTaskLists>
 8002dc4:	e00d      	b.n	8002de2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002dc6:	4b23      	ldr	r3, [pc, #140]	; (8002e54 <prvAddNewTaskToReadyList+0xc0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d109      	bne.n	8002de2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002dce:	4b20      	ldr	r3, [pc, #128]	; (8002e50 <prvAddNewTaskToReadyList+0xbc>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d802      	bhi.n	8002de2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002ddc:	4a1c      	ldr	r2, [pc, #112]	; (8002e50 <prvAddNewTaskToReadyList+0xbc>)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002de2:	4b1d      	ldr	r3, [pc, #116]	; (8002e58 <prvAddNewTaskToReadyList+0xc4>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	3301      	adds	r3, #1
 8002de8:	4a1b      	ldr	r2, [pc, #108]	; (8002e58 <prvAddNewTaskToReadyList+0xc4>)
 8002dea:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df0:	2201      	movs	r2, #1
 8002df2:	409a      	lsls	r2, r3
 8002df4:	4b19      	ldr	r3, [pc, #100]	; (8002e5c <prvAddNewTaskToReadyList+0xc8>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	4a18      	ldr	r2, [pc, #96]	; (8002e5c <prvAddNewTaskToReadyList+0xc8>)
 8002dfc:	6013      	str	r3, [r2, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e02:	4613      	mov	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4413      	add	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4a15      	ldr	r2, [pc, #84]	; (8002e60 <prvAddNewTaskToReadyList+0xcc>)
 8002e0c:	441a      	add	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	3304      	adds	r3, #4
 8002e12:	4619      	mov	r1, r3
 8002e14:	4610      	mov	r0, r2
 8002e16:	f7ff faea 	bl	80023ee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002e1a:	f001 f863 	bl	8003ee4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002e1e:	4b0d      	ldr	r3, [pc, #52]	; (8002e54 <prvAddNewTaskToReadyList+0xc0>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00e      	beq.n	8002e44 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002e26:	4b0a      	ldr	r3, [pc, #40]	; (8002e50 <prvAddNewTaskToReadyList+0xbc>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d207      	bcs.n	8002e44 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002e34:	4b0b      	ldr	r3, [pc, #44]	; (8002e64 <prvAddNewTaskToReadyList+0xd0>)
 8002e36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e3a:	601a      	str	r2, [r3, #0]
 8002e3c:	f3bf 8f4f 	dsb	sy
 8002e40:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002e44:	bf00      	nop
 8002e46:	3708      	adds	r7, #8
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	2000048c 	.word	0x2000048c
 8002e50:	2000038c 	.word	0x2000038c
 8002e54:	20000498 	.word	0x20000498
 8002e58:	200004a8 	.word	0x200004a8
 8002e5c:	20000494 	.word	0x20000494
 8002e60:	20000390 	.word	0x20000390
 8002e64:	e000ed04 	.word	0xe000ed04

08002e68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002e70:	2300      	movs	r3, #0
 8002e72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d017      	beq.n	8002eaa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002e7a:	4b13      	ldr	r3, [pc, #76]	; (8002ec8 <vTaskDelay+0x60>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d00a      	beq.n	8002e98 <vTaskDelay+0x30>
	__asm volatile
 8002e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e86:	f383 8811 	msr	BASEPRI, r3
 8002e8a:	f3bf 8f6f 	isb	sy
 8002e8e:	f3bf 8f4f 	dsb	sy
 8002e92:	60bb      	str	r3, [r7, #8]
}
 8002e94:	bf00      	nop
 8002e96:	e7fe      	b.n	8002e96 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002e98:	f000 fa18 	bl	80032cc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002e9c:	2100      	movs	r1, #0
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f000 fe60 	bl	8003b64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002ea4:	f000 fa20 	bl	80032e8 <xTaskResumeAll>
 8002ea8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d107      	bne.n	8002ec0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002eb0:	4b06      	ldr	r3, [pc, #24]	; (8002ecc <vTaskDelay+0x64>)
 8002eb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	f3bf 8f4f 	dsb	sy
 8002ebc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002ec0:	bf00      	nop
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	200004b4 	.word	0x200004b4
 8002ecc:	e000ed04 	.word	0xe000ed04

08002ed0 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8002ed8:	f000 ffd4 	bl	8003e84 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d102      	bne.n	8002ee8 <vTaskSuspend+0x18>
 8002ee2:	4b3c      	ldr	r3, [pc, #240]	; (8002fd4 <vTaskSuspend+0x104>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	e000      	b.n	8002eea <vTaskSuspend+0x1a>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	3304      	adds	r3, #4
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7ff fad9 	bl	80024a8 <uxListRemove>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d115      	bne.n	8002f28 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f00:	4935      	ldr	r1, [pc, #212]	; (8002fd8 <vTaskSuspend+0x108>)
 8002f02:	4613      	mov	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	440b      	add	r3, r1
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10a      	bne.n	8002f28 <vTaskSuspend+0x58>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f16:	2201      	movs	r2, #1
 8002f18:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1c:	43da      	mvns	r2, r3
 8002f1e:	4b2f      	ldr	r3, [pc, #188]	; (8002fdc <vTaskSuspend+0x10c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4013      	ands	r3, r2
 8002f24:	4a2d      	ldr	r2, [pc, #180]	; (8002fdc <vTaskSuspend+0x10c>)
 8002f26:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d004      	beq.n	8002f3a <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	3318      	adds	r3, #24
 8002f34:	4618      	mov	r0, r3
 8002f36:	f7ff fab7 	bl	80024a8 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	3304      	adds	r3, #4
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4827      	ldr	r0, [pc, #156]	; (8002fe0 <vTaskSuspend+0x110>)
 8002f42:	f7ff fa54 	bl	80023ee <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d103      	bne.n	8002f5a <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8002f5a:	f000 ffc3 	bl	8003ee4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8002f5e:	4b21      	ldr	r3, [pc, #132]	; (8002fe4 <vTaskSuspend+0x114>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d005      	beq.n	8002f72 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8002f66:	f000 ff8d 	bl	8003e84 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8002f6a:	f000 fd37 	bl	80039dc <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8002f6e:	f000 ffb9 	bl	8003ee4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8002f72:	4b18      	ldr	r3, [pc, #96]	; (8002fd4 <vTaskSuspend+0x104>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d127      	bne.n	8002fcc <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8002f7c:	4b19      	ldr	r3, [pc, #100]	; (8002fe4 <vTaskSuspend+0x114>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d017      	beq.n	8002fb4 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8002f84:	4b18      	ldr	r3, [pc, #96]	; (8002fe8 <vTaskSuspend+0x118>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00a      	beq.n	8002fa2 <vTaskSuspend+0xd2>
	__asm volatile
 8002f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f90:	f383 8811 	msr	BASEPRI, r3
 8002f94:	f3bf 8f6f 	isb	sy
 8002f98:	f3bf 8f4f 	dsb	sy
 8002f9c:	60bb      	str	r3, [r7, #8]
}
 8002f9e:	bf00      	nop
 8002fa0:	e7fe      	b.n	8002fa0 <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8002fa2:	4b12      	ldr	r3, [pc, #72]	; (8002fec <vTaskSuspend+0x11c>)
 8002fa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fa8:	601a      	str	r2, [r3, #0]
 8002faa:	f3bf 8f4f 	dsb	sy
 8002fae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002fb2:	e00b      	b.n	8002fcc <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8002fb4:	4b0a      	ldr	r3, [pc, #40]	; (8002fe0 <vTaskSuspend+0x110>)
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	4b0d      	ldr	r3, [pc, #52]	; (8002ff0 <vTaskSuspend+0x120>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	429a      	cmp	r2, r3
 8002fbe:	d103      	bne.n	8002fc8 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8002fc0:	4b04      	ldr	r3, [pc, #16]	; (8002fd4 <vTaskSuspend+0x104>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	601a      	str	r2, [r3, #0]
	}
 8002fc6:	e001      	b.n	8002fcc <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8002fc8:	f000 fae2 	bl	8003590 <vTaskSwitchContext>
	}
 8002fcc:	bf00      	nop
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	2000038c 	.word	0x2000038c
 8002fd8:	20000390 	.word	0x20000390
 8002fdc:	20000494 	.word	0x20000494
 8002fe0:	20000478 	.word	0x20000478
 8002fe4:	20000498 	.word	0x20000498
 8002fe8:	200004b4 	.word	0x200004b4
 8002fec:	e000ed04 	.word	0xe000ed04
 8002ff0:	2000048c 	.word	0x2000048c

08002ff4 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b087      	sub	sp, #28
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10a      	bne.n	8003020 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 800300a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800300e:	f383 8811 	msr	BASEPRI, r3
 8003012:	f3bf 8f6f 	isb	sy
 8003016:	f3bf 8f4f 	dsb	sy
 800301a:	60fb      	str	r3, [r7, #12]
}
 800301c:	bf00      	nop
 800301e:	e7fe      	b.n	800301e <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003020:	693b      	ldr	r3, [r7, #16]
 8003022:	695b      	ldr	r3, [r3, #20]
 8003024:	4a0a      	ldr	r2, [pc, #40]	; (8003050 <prvTaskIsTaskSuspended+0x5c>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d10a      	bne.n	8003040 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800302e:	4a09      	ldr	r2, [pc, #36]	; (8003054 <prvTaskIsTaskSuspended+0x60>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d005      	beq.n	8003040 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003038:	2b00      	cmp	r3, #0
 800303a:	d101      	bne.n	8003040 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 800303c:	2301      	movs	r3, #1
 800303e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003040:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8003042:	4618      	mov	r0, r3
 8003044:	371c      	adds	r7, #28
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	20000478 	.word	0x20000478
 8003054:	2000044c 	.word	0x2000044c

08003058 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10a      	bne.n	8003080 <vTaskResume+0x28>
	__asm volatile
 800306a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800306e:	f383 8811 	msr	BASEPRI, r3
 8003072:	f3bf 8f6f 	isb	sy
 8003076:	f3bf 8f4f 	dsb	sy
 800307a:	60bb      	str	r3, [r7, #8]
}
 800307c:	bf00      	nop
 800307e:	e7fe      	b.n	800307e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8003080:	4b20      	ldr	r3, [pc, #128]	; (8003104 <vTaskResume+0xac>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	429a      	cmp	r2, r3
 8003088:	d037      	beq.n	80030fa <vTaskResume+0xa2>
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d034      	beq.n	80030fa <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 8003090:	f000 fef8 	bl	8003e84 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f7ff ffad 	bl	8002ff4 <prvTaskIsTaskSuspended>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d02a      	beq.n	80030f6 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	3304      	adds	r3, #4
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff f9ff 	bl	80024a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ae:	2201      	movs	r2, #1
 80030b0:	409a      	lsls	r2, r3
 80030b2:	4b15      	ldr	r3, [pc, #84]	; (8003108 <vTaskResume+0xb0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	4a13      	ldr	r2, [pc, #76]	; (8003108 <vTaskResume+0xb0>)
 80030ba:	6013      	str	r3, [r2, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c0:	4613      	mov	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4a10      	ldr	r2, [pc, #64]	; (800310c <vTaskResume+0xb4>)
 80030ca:	441a      	add	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	3304      	adds	r3, #4
 80030d0:	4619      	mov	r1, r3
 80030d2:	4610      	mov	r0, r2
 80030d4:	f7ff f98b 	bl	80023ee <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030dc:	4b09      	ldr	r3, [pc, #36]	; (8003104 <vTaskResume+0xac>)
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d307      	bcc.n	80030f6 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80030e6:	4b0a      	ldr	r3, [pc, #40]	; (8003110 <vTaskResume+0xb8>)
 80030e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	f3bf 8f4f 	dsb	sy
 80030f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80030f6:	f000 fef5 	bl	8003ee4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80030fa:	bf00      	nop
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	2000038c 	.word	0x2000038c
 8003108:	20000494 	.word	0x20000494
 800310c:	20000390 	.word	0x20000390
 8003110:	e000ed04 	.word	0xe000ed04

08003114 <xTaskResumeFromISR>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) )

	BaseType_t xTaskResumeFromISR( TaskHandle_t xTaskToResume )
	{
 8003114:	b580      	push	{r7, lr}
 8003116:	b08a      	sub	sp, #40	; 0x28
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
	BaseType_t xYieldRequired = pdFALSE;
 800311c:	2300      	movs	r3, #0
 800311e:	627b      	str	r3, [r7, #36]	; 0x24
	TCB_t * const pxTCB = xTaskToResume;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	623b      	str	r3, [r7, #32]
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToResume );
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10a      	bne.n	8003140 <xTaskResumeFromISR+0x2c>
	__asm volatile
 800312a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800312e:	f383 8811 	msr	BASEPRI, r3
 8003132:	f3bf 8f6f 	isb	sy
 8003136:	f3bf 8f4f 	dsb	sy
 800313a:	61bb      	str	r3, [r7, #24]
}
 800313c:	bf00      	nop
 800313e:	e7fe      	b.n	800313e <xTaskResumeFromISR+0x2a>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		https://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003140:	f000 ff82 	bl	8004048 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003144:	f3ef 8211 	mrs	r2, BASEPRI
 8003148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800314c:	f383 8811 	msr	BASEPRI, r3
 8003150:	f3bf 8f6f 	isb	sy
 8003154:	f3bf 8f4f 	dsb	sy
 8003158:	617a      	str	r2, [r7, #20]
 800315a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800315c:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800315e:	61fb      	str	r3, [r7, #28]
		{
			if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8003160:	6a38      	ldr	r0, [r7, #32]
 8003162:	f7ff ff47 	bl	8002ff4 <prvTaskIsTaskSuspended>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d02f      	beq.n	80031cc <xTaskResumeFromISR+0xb8>
			{
				traceTASK_RESUME_FROM_ISR( pxTCB );

				/* Check the ready lists can be accessed. */
				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800316c:	4b1d      	ldr	r3, [pc, #116]	; (80031e4 <xTaskResumeFromISR+0xd0>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d125      	bne.n	80031c0 <xTaskResumeFromISR+0xac>
				{
					/* Ready lists can be accessed so move the task from the
					suspended list to the ready list directly. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003174:	6a3b      	ldr	r3, [r7, #32]
 8003176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003178:	4b1b      	ldr	r3, [pc, #108]	; (80031e8 <xTaskResumeFromISR+0xd4>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800317e:	429a      	cmp	r2, r3
 8003180:	d301      	bcc.n	8003186 <xTaskResumeFromISR+0x72>
					{
						xYieldRequired = pdTRUE;
 8003182:	2301      	movs	r3, #1
 8003184:	627b      	str	r3, [r7, #36]	; 0x24
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003186:	6a3b      	ldr	r3, [r7, #32]
 8003188:	3304      	adds	r3, #4
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff f98c 	bl	80024a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003190:	6a3b      	ldr	r3, [r7, #32]
 8003192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003194:	2201      	movs	r2, #1
 8003196:	409a      	lsls	r2, r3
 8003198:	4b14      	ldr	r3, [pc, #80]	; (80031ec <xTaskResumeFromISR+0xd8>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4313      	orrs	r3, r2
 800319e:	4a13      	ldr	r2, [pc, #76]	; (80031ec <xTaskResumeFromISR+0xd8>)
 80031a0:	6013      	str	r3, [r2, #0]
 80031a2:	6a3b      	ldr	r3, [r7, #32]
 80031a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031a6:	4613      	mov	r3, r2
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	4413      	add	r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	4a10      	ldr	r2, [pc, #64]	; (80031f0 <xTaskResumeFromISR+0xdc>)
 80031b0:	441a      	add	r2, r3
 80031b2:	6a3b      	ldr	r3, [r7, #32]
 80031b4:	3304      	adds	r3, #4
 80031b6:	4619      	mov	r1, r3
 80031b8:	4610      	mov	r0, r2
 80031ba:	f7ff f918 	bl	80023ee <vListInsertEnd>
 80031be:	e005      	b.n	80031cc <xTaskResumeFromISR+0xb8>
				else
				{
					/* The delayed or ready lists cannot be accessed so the task
					is held in the pending ready list until the scheduler is
					unsuspended. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80031c0:	6a3b      	ldr	r3, [r7, #32]
 80031c2:	3318      	adds	r3, #24
 80031c4:	4619      	mov	r1, r3
 80031c6:	480b      	ldr	r0, [pc, #44]	; (80031f4 <xTaskResumeFromISR+0xe0>)
 80031c8:	f7ff f911 	bl	80023ee <vListInsertEnd>
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80031d6:	bf00      	nop
				mtCOVERAGE_TEST_MARKER();
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xYieldRequired;
 80031d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 80031da:	4618      	mov	r0, r3
 80031dc:	3728      	adds	r7, #40	; 0x28
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	200004b4 	.word	0x200004b4
 80031e8:	2000038c 	.word	0x2000038c
 80031ec:	20000494 	.word	0x20000494
 80031f0:	20000390 	.word	0x20000390
 80031f4:	2000044c 	.word	0x2000044c

080031f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b08a      	sub	sp, #40	; 0x28
 80031fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80031fe:	2300      	movs	r3, #0
 8003200:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003202:	2300      	movs	r3, #0
 8003204:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003206:	463a      	mov	r2, r7
 8003208:	1d39      	adds	r1, r7, #4
 800320a:	f107 0308 	add.w	r3, r7, #8
 800320e:	4618      	mov	r0, r3
 8003210:	f7fd f9ac 	bl	800056c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003214:	6839      	ldr	r1, [r7, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	9202      	str	r2, [sp, #8]
 800321c:	9301      	str	r3, [sp, #4]
 800321e:	2300      	movs	r3, #0
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	2300      	movs	r3, #0
 8003224:	460a      	mov	r2, r1
 8003226:	4921      	ldr	r1, [pc, #132]	; (80032ac <vTaskStartScheduler+0xb4>)
 8003228:	4821      	ldr	r0, [pc, #132]	; (80032b0 <vTaskStartScheduler+0xb8>)
 800322a:	f7ff fc73 	bl	8002b14 <xTaskCreateStatic>
 800322e:	4603      	mov	r3, r0
 8003230:	4a20      	ldr	r2, [pc, #128]	; (80032b4 <vTaskStartScheduler+0xbc>)
 8003232:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003234:	4b1f      	ldr	r3, [pc, #124]	; (80032b4 <vTaskStartScheduler+0xbc>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d002      	beq.n	8003242 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800323c:	2301      	movs	r3, #1
 800323e:	617b      	str	r3, [r7, #20]
 8003240:	e001      	b.n	8003246 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003242:	2300      	movs	r3, #0
 8003244:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d11b      	bne.n	8003284 <vTaskStartScheduler+0x8c>
	__asm volatile
 800324c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003250:	f383 8811 	msr	BASEPRI, r3
 8003254:	f3bf 8f6f 	isb	sy
 8003258:	f3bf 8f4f 	dsb	sy
 800325c:	613b      	str	r3, [r7, #16]
}
 800325e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003260:	4b15      	ldr	r3, [pc, #84]	; (80032b8 <vTaskStartScheduler+0xc0>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	334c      	adds	r3, #76	; 0x4c
 8003266:	4a15      	ldr	r2, [pc, #84]	; (80032bc <vTaskStartScheduler+0xc4>)
 8003268:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800326a:	4b15      	ldr	r3, [pc, #84]	; (80032c0 <vTaskStartScheduler+0xc8>)
 800326c:	f04f 32ff 	mov.w	r2, #4294967295
 8003270:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003272:	4b14      	ldr	r3, [pc, #80]	; (80032c4 <vTaskStartScheduler+0xcc>)
 8003274:	2201      	movs	r2, #1
 8003276:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003278:	4b13      	ldr	r3, [pc, #76]	; (80032c8 <vTaskStartScheduler+0xd0>)
 800327a:	2200      	movs	r2, #0
 800327c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800327e:	f000 fd5f 	bl	8003d40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003282:	e00e      	b.n	80032a2 <vTaskStartScheduler+0xaa>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800328a:	d10a      	bne.n	80032a2 <vTaskStartScheduler+0xaa>
	__asm volatile
 800328c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003290:	f383 8811 	msr	BASEPRI, r3
 8003294:	f3bf 8f6f 	isb	sy
 8003298:	f3bf 8f4f 	dsb	sy
 800329c:	60fb      	str	r3, [r7, #12]
}
 800329e:	bf00      	nop
 80032a0:	e7fe      	b.n	80032a0 <vTaskStartScheduler+0xa8>
}
 80032a2:	bf00      	nop
 80032a4:	3718      	adds	r7, #24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	080054c8 	.word	0x080054c8
 80032b0:	08003869 	.word	0x08003869
 80032b4:	200004b0 	.word	0x200004b0
 80032b8:	2000038c 	.word	0x2000038c
 80032bc:	20000068 	.word	0x20000068
 80032c0:	200004ac 	.word	0x200004ac
 80032c4:	20000498 	.word	0x20000498
 80032c8:	20000490 	.word	0x20000490

080032cc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80032cc:	b480      	push	{r7}
 80032ce:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80032d0:	4b04      	ldr	r3, [pc, #16]	; (80032e4 <vTaskSuspendAll+0x18>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	3301      	adds	r3, #1
 80032d6:	4a03      	ldr	r2, [pc, #12]	; (80032e4 <vTaskSuspendAll+0x18>)
 80032d8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80032da:	bf00      	nop
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr
 80032e4:	200004b4 	.word	0x200004b4

080032e8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80032ee:	2300      	movs	r3, #0
 80032f0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80032f2:	2300      	movs	r3, #0
 80032f4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80032f6:	4b41      	ldr	r3, [pc, #260]	; (80033fc <xTaskResumeAll+0x114>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10a      	bne.n	8003314 <xTaskResumeAll+0x2c>
	__asm volatile
 80032fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003302:	f383 8811 	msr	BASEPRI, r3
 8003306:	f3bf 8f6f 	isb	sy
 800330a:	f3bf 8f4f 	dsb	sy
 800330e:	603b      	str	r3, [r7, #0]
}
 8003310:	bf00      	nop
 8003312:	e7fe      	b.n	8003312 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003314:	f000 fdb6 	bl	8003e84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003318:	4b38      	ldr	r3, [pc, #224]	; (80033fc <xTaskResumeAll+0x114>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	3b01      	subs	r3, #1
 800331e:	4a37      	ldr	r2, [pc, #220]	; (80033fc <xTaskResumeAll+0x114>)
 8003320:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003322:	4b36      	ldr	r3, [pc, #216]	; (80033fc <xTaskResumeAll+0x114>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d161      	bne.n	80033ee <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800332a:	4b35      	ldr	r3, [pc, #212]	; (8003400 <xTaskResumeAll+0x118>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d05d      	beq.n	80033ee <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003332:	e02e      	b.n	8003392 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003334:	4b33      	ldr	r3, [pc, #204]	; (8003404 <xTaskResumeAll+0x11c>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	3318      	adds	r3, #24
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff f8b1 	bl	80024a8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	3304      	adds	r3, #4
 800334a:	4618      	mov	r0, r3
 800334c:	f7ff f8ac 	bl	80024a8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003354:	2201      	movs	r2, #1
 8003356:	409a      	lsls	r2, r3
 8003358:	4b2b      	ldr	r3, [pc, #172]	; (8003408 <xTaskResumeAll+0x120>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4313      	orrs	r3, r2
 800335e:	4a2a      	ldr	r2, [pc, #168]	; (8003408 <xTaskResumeAll+0x120>)
 8003360:	6013      	str	r3, [r2, #0]
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003366:	4613      	mov	r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	4413      	add	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4a27      	ldr	r2, [pc, #156]	; (800340c <xTaskResumeAll+0x124>)
 8003370:	441a      	add	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	3304      	adds	r3, #4
 8003376:	4619      	mov	r1, r3
 8003378:	4610      	mov	r0, r2
 800337a:	f7ff f838 	bl	80023ee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003382:	4b23      	ldr	r3, [pc, #140]	; (8003410 <xTaskResumeAll+0x128>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003388:	429a      	cmp	r2, r3
 800338a:	d302      	bcc.n	8003392 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800338c:	4b21      	ldr	r3, [pc, #132]	; (8003414 <xTaskResumeAll+0x12c>)
 800338e:	2201      	movs	r2, #1
 8003390:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003392:	4b1c      	ldr	r3, [pc, #112]	; (8003404 <xTaskResumeAll+0x11c>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1cc      	bne.n	8003334 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d001      	beq.n	80033a4 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80033a0:	f000 fb1c 	bl	80039dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80033a4:	4b1c      	ldr	r3, [pc, #112]	; (8003418 <xTaskResumeAll+0x130>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d010      	beq.n	80033d2 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80033b0:	f000 f836 	bl	8003420 <xTaskIncrementTick>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d002      	beq.n	80033c0 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 80033ba:	4b16      	ldr	r3, [pc, #88]	; (8003414 <xTaskResumeAll+0x12c>)
 80033bc:	2201      	movs	r2, #1
 80033be:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	3b01      	subs	r3, #1
 80033c4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1f1      	bne.n	80033b0 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 80033cc:	4b12      	ldr	r3, [pc, #72]	; (8003418 <xTaskResumeAll+0x130>)
 80033ce:	2200      	movs	r2, #0
 80033d0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80033d2:	4b10      	ldr	r3, [pc, #64]	; (8003414 <xTaskResumeAll+0x12c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d009      	beq.n	80033ee <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80033da:	2301      	movs	r3, #1
 80033dc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80033de:	4b0f      	ldr	r3, [pc, #60]	; (800341c <xTaskResumeAll+0x134>)
 80033e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033e4:	601a      	str	r2, [r3, #0]
 80033e6:	f3bf 8f4f 	dsb	sy
 80033ea:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80033ee:	f000 fd79 	bl	8003ee4 <vPortExitCritical>

	return xAlreadyYielded;
 80033f2:	68bb      	ldr	r3, [r7, #8]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3710      	adds	r7, #16
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	200004b4 	.word	0x200004b4
 8003400:	2000048c 	.word	0x2000048c
 8003404:	2000044c 	.word	0x2000044c
 8003408:	20000494 	.word	0x20000494
 800340c:	20000390 	.word	0x20000390
 8003410:	2000038c 	.word	0x2000038c
 8003414:	200004a0 	.word	0x200004a0
 8003418:	2000049c 	.word	0x2000049c
 800341c:	e000ed04 	.word	0xe000ed04

08003420 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003426:	2300      	movs	r3, #0
 8003428:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800342a:	4b4e      	ldr	r3, [pc, #312]	; (8003564 <xTaskIncrementTick+0x144>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	2b00      	cmp	r3, #0
 8003430:	f040 808e 	bne.w	8003550 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003434:	4b4c      	ldr	r3, [pc, #304]	; (8003568 <xTaskIncrementTick+0x148>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	3301      	adds	r3, #1
 800343a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800343c:	4a4a      	ldr	r2, [pc, #296]	; (8003568 <xTaskIncrementTick+0x148>)
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d120      	bne.n	800348a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003448:	4b48      	ldr	r3, [pc, #288]	; (800356c <xTaskIncrementTick+0x14c>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d00a      	beq.n	8003468 <xTaskIncrementTick+0x48>
	__asm volatile
 8003452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003456:	f383 8811 	msr	BASEPRI, r3
 800345a:	f3bf 8f6f 	isb	sy
 800345e:	f3bf 8f4f 	dsb	sy
 8003462:	603b      	str	r3, [r7, #0]
}
 8003464:	bf00      	nop
 8003466:	e7fe      	b.n	8003466 <xTaskIncrementTick+0x46>
 8003468:	4b40      	ldr	r3, [pc, #256]	; (800356c <xTaskIncrementTick+0x14c>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	60fb      	str	r3, [r7, #12]
 800346e:	4b40      	ldr	r3, [pc, #256]	; (8003570 <xTaskIncrementTick+0x150>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a3e      	ldr	r2, [pc, #248]	; (800356c <xTaskIncrementTick+0x14c>)
 8003474:	6013      	str	r3, [r2, #0]
 8003476:	4a3e      	ldr	r2, [pc, #248]	; (8003570 <xTaskIncrementTick+0x150>)
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6013      	str	r3, [r2, #0]
 800347c:	4b3d      	ldr	r3, [pc, #244]	; (8003574 <xTaskIncrementTick+0x154>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	3301      	adds	r3, #1
 8003482:	4a3c      	ldr	r2, [pc, #240]	; (8003574 <xTaskIncrementTick+0x154>)
 8003484:	6013      	str	r3, [r2, #0]
 8003486:	f000 faa9 	bl	80039dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800348a:	4b3b      	ldr	r3, [pc, #236]	; (8003578 <xTaskIncrementTick+0x158>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	429a      	cmp	r2, r3
 8003492:	d348      	bcc.n	8003526 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003494:	4b35      	ldr	r3, [pc, #212]	; (800356c <xTaskIncrementTick+0x14c>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d104      	bne.n	80034a8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800349e:	4b36      	ldr	r3, [pc, #216]	; (8003578 <xTaskIncrementTick+0x158>)
 80034a0:	f04f 32ff 	mov.w	r2, #4294967295
 80034a4:	601a      	str	r2, [r3, #0]
					break;
 80034a6:	e03e      	b.n	8003526 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034a8:	4b30      	ldr	r3, [pc, #192]	; (800356c <xTaskIncrementTick+0x14c>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d203      	bcs.n	80034c8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80034c0:	4a2d      	ldr	r2, [pc, #180]	; (8003578 <xTaskIncrementTick+0x158>)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80034c6:	e02e      	b.n	8003526 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	3304      	adds	r3, #4
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7fe ffeb 	bl	80024a8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d004      	beq.n	80034e4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	3318      	adds	r3, #24
 80034de:	4618      	mov	r0, r3
 80034e0:	f7fe ffe2 	bl	80024a8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e8:	2201      	movs	r2, #1
 80034ea:	409a      	lsls	r2, r3
 80034ec:	4b23      	ldr	r3, [pc, #140]	; (800357c <xTaskIncrementTick+0x15c>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	4a22      	ldr	r2, [pc, #136]	; (800357c <xTaskIncrementTick+0x15c>)
 80034f4:	6013      	str	r3, [r2, #0]
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034fa:	4613      	mov	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	4413      	add	r3, r2
 8003500:	009b      	lsls	r3, r3, #2
 8003502:	4a1f      	ldr	r2, [pc, #124]	; (8003580 <xTaskIncrementTick+0x160>)
 8003504:	441a      	add	r2, r3
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	3304      	adds	r3, #4
 800350a:	4619      	mov	r1, r3
 800350c:	4610      	mov	r0, r2
 800350e:	f7fe ff6e 	bl	80023ee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003512:	68bb      	ldr	r3, [r7, #8]
 8003514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003516:	4b1b      	ldr	r3, [pc, #108]	; (8003584 <xTaskIncrementTick+0x164>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800351c:	429a      	cmp	r2, r3
 800351e:	d3b9      	bcc.n	8003494 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003520:	2301      	movs	r3, #1
 8003522:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003524:	e7b6      	b.n	8003494 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003526:	4b17      	ldr	r3, [pc, #92]	; (8003584 <xTaskIncrementTick+0x164>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800352c:	4914      	ldr	r1, [pc, #80]	; (8003580 <xTaskIncrementTick+0x160>)
 800352e:	4613      	mov	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4413      	add	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	440b      	add	r3, r1
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d901      	bls.n	8003542 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800353e:	2301      	movs	r3, #1
 8003540:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003542:	4b11      	ldr	r3, [pc, #68]	; (8003588 <xTaskIncrementTick+0x168>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d007      	beq.n	800355a <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800354a:	2301      	movs	r3, #1
 800354c:	617b      	str	r3, [r7, #20]
 800354e:	e004      	b.n	800355a <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003550:	4b0e      	ldr	r3, [pc, #56]	; (800358c <xTaskIncrementTick+0x16c>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	3301      	adds	r3, #1
 8003556:	4a0d      	ldr	r2, [pc, #52]	; (800358c <xTaskIncrementTick+0x16c>)
 8003558:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800355a:	697b      	ldr	r3, [r7, #20]
}
 800355c:	4618      	mov	r0, r3
 800355e:	3718      	adds	r7, #24
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	200004b4 	.word	0x200004b4
 8003568:	20000490 	.word	0x20000490
 800356c:	20000444 	.word	0x20000444
 8003570:	20000448 	.word	0x20000448
 8003574:	200004a4 	.word	0x200004a4
 8003578:	200004ac 	.word	0x200004ac
 800357c:	20000494 	.word	0x20000494
 8003580:	20000390 	.word	0x20000390
 8003584:	2000038c 	.word	0x2000038c
 8003588:	200004a0 	.word	0x200004a0
 800358c:	2000049c 	.word	0x2000049c

08003590 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003590:	b480      	push	{r7}
 8003592:	b087      	sub	sp, #28
 8003594:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003596:	4b29      	ldr	r3, [pc, #164]	; (800363c <vTaskSwitchContext+0xac>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d003      	beq.n	80035a6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800359e:	4b28      	ldr	r3, [pc, #160]	; (8003640 <vTaskSwitchContext+0xb0>)
 80035a0:	2201      	movs	r2, #1
 80035a2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80035a4:	e044      	b.n	8003630 <vTaskSwitchContext+0xa0>
		xYieldPending = pdFALSE;
 80035a6:	4b26      	ldr	r3, [pc, #152]	; (8003640 <vTaskSwitchContext+0xb0>)
 80035a8:	2200      	movs	r2, #0
 80035aa:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035ac:	4b25      	ldr	r3, [pc, #148]	; (8003644 <vTaskSwitchContext+0xb4>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	fab3 f383 	clz	r3, r3
 80035b8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80035ba:	7afb      	ldrb	r3, [r7, #11]
 80035bc:	f1c3 031f 	rsb	r3, r3, #31
 80035c0:	617b      	str	r3, [r7, #20]
 80035c2:	4921      	ldr	r1, [pc, #132]	; (8003648 <vTaskSwitchContext+0xb8>)
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	4613      	mov	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	440b      	add	r3, r1
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d10a      	bne.n	80035ec <vTaskSwitchContext+0x5c>
	__asm volatile
 80035d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035da:	f383 8811 	msr	BASEPRI, r3
 80035de:	f3bf 8f6f 	isb	sy
 80035e2:	f3bf 8f4f 	dsb	sy
 80035e6:	607b      	str	r3, [r7, #4]
}
 80035e8:	bf00      	nop
 80035ea:	e7fe      	b.n	80035ea <vTaskSwitchContext+0x5a>
 80035ec:	697a      	ldr	r2, [r7, #20]
 80035ee:	4613      	mov	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4413      	add	r3, r2
 80035f4:	009b      	lsls	r3, r3, #2
 80035f6:	4a14      	ldr	r2, [pc, #80]	; (8003648 <vTaskSwitchContext+0xb8>)
 80035f8:	4413      	add	r3, r2
 80035fa:	613b      	str	r3, [r7, #16]
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	605a      	str	r2, [r3, #4]
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	685a      	ldr	r2, [r3, #4]
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	3308      	adds	r3, #8
 800360e:	429a      	cmp	r2, r3
 8003610:	d104      	bne.n	800361c <vTaskSwitchContext+0x8c>
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	605a      	str	r2, [r3, #4]
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	4a0a      	ldr	r2, [pc, #40]	; (800364c <vTaskSwitchContext+0xbc>)
 8003624:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003626:	4b09      	ldr	r3, [pc, #36]	; (800364c <vTaskSwitchContext+0xbc>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	334c      	adds	r3, #76	; 0x4c
 800362c:	4a08      	ldr	r2, [pc, #32]	; (8003650 <vTaskSwitchContext+0xc0>)
 800362e:	6013      	str	r3, [r2, #0]
}
 8003630:	bf00      	nop
 8003632:	371c      	adds	r7, #28
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	200004b4 	.word	0x200004b4
 8003640:	200004a0 	.word	0x200004a0
 8003644:	20000494 	.word	0x20000494
 8003648:	20000390 	.word	0x20000390
 800364c:	2000038c 	.word	0x2000038c
 8003650:	20000068 	.word	0x20000068

08003654 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d10a      	bne.n	800367a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003668:	f383 8811 	msr	BASEPRI, r3
 800366c:	f3bf 8f6f 	isb	sy
 8003670:	f3bf 8f4f 	dsb	sy
 8003674:	60fb      	str	r3, [r7, #12]
}
 8003676:	bf00      	nop
 8003678:	e7fe      	b.n	8003678 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800367a:	4b07      	ldr	r3, [pc, #28]	; (8003698 <vTaskPlaceOnEventList+0x44>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	3318      	adds	r3, #24
 8003680:	4619      	mov	r1, r3
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7fe fed7 	bl	8002436 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003688:	2101      	movs	r1, #1
 800368a:	6838      	ldr	r0, [r7, #0]
 800368c:	f000 fa6a 	bl	8003b64 <prvAddCurrentTaskToDelayedList>
}
 8003690:	bf00      	nop
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	2000038c 	.word	0x2000038c

0800369c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d10a      	bne.n	80036c8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80036b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b6:	f383 8811 	msr	BASEPRI, r3
 80036ba:	f3bf 8f6f 	isb	sy
 80036be:	f3bf 8f4f 	dsb	sy
 80036c2:	60fb      	str	r3, [r7, #12]
}
 80036c4:	bf00      	nop
 80036c6:	e7fe      	b.n	80036c6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	3318      	adds	r3, #24
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fe feeb 	bl	80024a8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80036d2:	4b1d      	ldr	r3, [pc, #116]	; (8003748 <xTaskRemoveFromEventList+0xac>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d11c      	bne.n	8003714 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	3304      	adds	r3, #4
 80036de:	4618      	mov	r0, r3
 80036e0:	f7fe fee2 	bl	80024a8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e8:	2201      	movs	r2, #1
 80036ea:	409a      	lsls	r2, r3
 80036ec:	4b17      	ldr	r3, [pc, #92]	; (800374c <xTaskRemoveFromEventList+0xb0>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	4a16      	ldr	r2, [pc, #88]	; (800374c <xTaskRemoveFromEventList+0xb0>)
 80036f4:	6013      	str	r3, [r2, #0]
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036fa:	4613      	mov	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4413      	add	r3, r2
 8003700:	009b      	lsls	r3, r3, #2
 8003702:	4a13      	ldr	r2, [pc, #76]	; (8003750 <xTaskRemoveFromEventList+0xb4>)
 8003704:	441a      	add	r2, r3
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	3304      	adds	r3, #4
 800370a:	4619      	mov	r1, r3
 800370c:	4610      	mov	r0, r2
 800370e:	f7fe fe6e 	bl	80023ee <vListInsertEnd>
 8003712:	e005      	b.n	8003720 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	3318      	adds	r3, #24
 8003718:	4619      	mov	r1, r3
 800371a:	480e      	ldr	r0, [pc, #56]	; (8003754 <xTaskRemoveFromEventList+0xb8>)
 800371c:	f7fe fe67 	bl	80023ee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003724:	4b0c      	ldr	r3, [pc, #48]	; (8003758 <xTaskRemoveFromEventList+0xbc>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372a:	429a      	cmp	r2, r3
 800372c:	d905      	bls.n	800373a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800372e:	2301      	movs	r3, #1
 8003730:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003732:	4b0a      	ldr	r3, [pc, #40]	; (800375c <xTaskRemoveFromEventList+0xc0>)
 8003734:	2201      	movs	r2, #1
 8003736:	601a      	str	r2, [r3, #0]
 8003738:	e001      	b.n	800373e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800373a:	2300      	movs	r3, #0
 800373c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800373e:	697b      	ldr	r3, [r7, #20]
}
 8003740:	4618      	mov	r0, r3
 8003742:	3718      	adds	r7, #24
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}
 8003748:	200004b4 	.word	0x200004b4
 800374c:	20000494 	.word	0x20000494
 8003750:	20000390 	.word	0x20000390
 8003754:	2000044c 	.word	0x2000044c
 8003758:	2000038c 	.word	0x2000038c
 800375c:	200004a0 	.word	0x200004a0

08003760 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003768:	4b06      	ldr	r3, [pc, #24]	; (8003784 <vTaskInternalSetTimeOutState+0x24>)
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003770:	4b05      	ldr	r3, [pc, #20]	; (8003788 <vTaskInternalSetTimeOutState+0x28>)
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	605a      	str	r2, [r3, #4]
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr
 8003784:	200004a4 	.word	0x200004a4
 8003788:	20000490 	.word	0x20000490

0800378c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b088      	sub	sp, #32
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d10a      	bne.n	80037b2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800379c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037a0:	f383 8811 	msr	BASEPRI, r3
 80037a4:	f3bf 8f6f 	isb	sy
 80037a8:	f3bf 8f4f 	dsb	sy
 80037ac:	613b      	str	r3, [r7, #16]
}
 80037ae:	bf00      	nop
 80037b0:	e7fe      	b.n	80037b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10a      	bne.n	80037ce <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80037b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037bc:	f383 8811 	msr	BASEPRI, r3
 80037c0:	f3bf 8f6f 	isb	sy
 80037c4:	f3bf 8f4f 	dsb	sy
 80037c8:	60fb      	str	r3, [r7, #12]
}
 80037ca:	bf00      	nop
 80037cc:	e7fe      	b.n	80037cc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80037ce:	f000 fb59 	bl	8003e84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80037d2:	4b1d      	ldr	r3, [pc, #116]	; (8003848 <xTaskCheckForTimeOut+0xbc>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	69ba      	ldr	r2, [r7, #24]
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037ea:	d102      	bne.n	80037f2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80037ec:	2300      	movs	r3, #0
 80037ee:	61fb      	str	r3, [r7, #28]
 80037f0:	e023      	b.n	800383a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	4b15      	ldr	r3, [pc, #84]	; (800384c <xTaskCheckForTimeOut+0xc0>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d007      	beq.n	800380e <xTaskCheckForTimeOut+0x82>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	429a      	cmp	r2, r3
 8003806:	d302      	bcc.n	800380e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003808:	2301      	movs	r3, #1
 800380a:	61fb      	str	r3, [r7, #28]
 800380c:	e015      	b.n	800383a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	697a      	ldr	r2, [r7, #20]
 8003814:	429a      	cmp	r2, r3
 8003816:	d20b      	bcs.n	8003830 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	1ad2      	subs	r2, r2, r3
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f7ff ff9b 	bl	8003760 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800382a:	2300      	movs	r3, #0
 800382c:	61fb      	str	r3, [r7, #28]
 800382e:	e004      	b.n	800383a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	2200      	movs	r2, #0
 8003834:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003836:	2301      	movs	r3, #1
 8003838:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800383a:	f000 fb53 	bl	8003ee4 <vPortExitCritical>

	return xReturn;
 800383e:	69fb      	ldr	r3, [r7, #28]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3720      	adds	r7, #32
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	20000490 	.word	0x20000490
 800384c:	200004a4 	.word	0x200004a4

08003850 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003854:	4b03      	ldr	r3, [pc, #12]	; (8003864 <vTaskMissedYield+0x14>)
 8003856:	2201      	movs	r2, #1
 8003858:	601a      	str	r2, [r3, #0]
}
 800385a:	bf00      	nop
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	200004a0 	.word	0x200004a0

08003868 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b082      	sub	sp, #8
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003870:	f000 f852 	bl	8003918 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003874:	4b06      	ldr	r3, [pc, #24]	; (8003890 <prvIdleTask+0x28>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d9f9      	bls.n	8003870 <prvIdleTask+0x8>
			{
				taskYIELD();
 800387c:	4b05      	ldr	r3, [pc, #20]	; (8003894 <prvIdleTask+0x2c>)
 800387e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003882:	601a      	str	r2, [r3, #0]
 8003884:	f3bf 8f4f 	dsb	sy
 8003888:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800388c:	e7f0      	b.n	8003870 <prvIdleTask+0x8>
 800388e:	bf00      	nop
 8003890:	20000390 	.word	0x20000390
 8003894:	e000ed04 	.word	0xe000ed04

08003898 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b082      	sub	sp, #8
 800389c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800389e:	2300      	movs	r3, #0
 80038a0:	607b      	str	r3, [r7, #4]
 80038a2:	e00c      	b.n	80038be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	4613      	mov	r3, r2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	4413      	add	r3, r2
 80038ac:	009b      	lsls	r3, r3, #2
 80038ae:	4a12      	ldr	r2, [pc, #72]	; (80038f8 <prvInitialiseTaskLists+0x60>)
 80038b0:	4413      	add	r3, r2
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fe fd6e 	bl	8002394 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	3301      	adds	r3, #1
 80038bc:	607b      	str	r3, [r7, #4]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2b06      	cmp	r3, #6
 80038c2:	d9ef      	bls.n	80038a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80038c4:	480d      	ldr	r0, [pc, #52]	; (80038fc <prvInitialiseTaskLists+0x64>)
 80038c6:	f7fe fd65 	bl	8002394 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80038ca:	480d      	ldr	r0, [pc, #52]	; (8003900 <prvInitialiseTaskLists+0x68>)
 80038cc:	f7fe fd62 	bl	8002394 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80038d0:	480c      	ldr	r0, [pc, #48]	; (8003904 <prvInitialiseTaskLists+0x6c>)
 80038d2:	f7fe fd5f 	bl	8002394 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80038d6:	480c      	ldr	r0, [pc, #48]	; (8003908 <prvInitialiseTaskLists+0x70>)
 80038d8:	f7fe fd5c 	bl	8002394 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80038dc:	480b      	ldr	r0, [pc, #44]	; (800390c <prvInitialiseTaskLists+0x74>)
 80038de:	f7fe fd59 	bl	8002394 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80038e2:	4b0b      	ldr	r3, [pc, #44]	; (8003910 <prvInitialiseTaskLists+0x78>)
 80038e4:	4a05      	ldr	r2, [pc, #20]	; (80038fc <prvInitialiseTaskLists+0x64>)
 80038e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80038e8:	4b0a      	ldr	r3, [pc, #40]	; (8003914 <prvInitialiseTaskLists+0x7c>)
 80038ea:	4a05      	ldr	r2, [pc, #20]	; (8003900 <prvInitialiseTaskLists+0x68>)
 80038ec:	601a      	str	r2, [r3, #0]
}
 80038ee:	bf00      	nop
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	20000390 	.word	0x20000390
 80038fc:	2000041c 	.word	0x2000041c
 8003900:	20000430 	.word	0x20000430
 8003904:	2000044c 	.word	0x2000044c
 8003908:	20000460 	.word	0x20000460
 800390c:	20000478 	.word	0x20000478
 8003910:	20000444 	.word	0x20000444
 8003914:	20000448 	.word	0x20000448

08003918 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800391e:	e019      	b.n	8003954 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003920:	f000 fab0 	bl	8003e84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003924:	4b10      	ldr	r3, [pc, #64]	; (8003968 <prvCheckTasksWaitingTermination+0x50>)
 8003926:	68db      	ldr	r3, [r3, #12]
 8003928:	68db      	ldr	r3, [r3, #12]
 800392a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	3304      	adds	r3, #4
 8003930:	4618      	mov	r0, r3
 8003932:	f7fe fdb9 	bl	80024a8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003936:	4b0d      	ldr	r3, [pc, #52]	; (800396c <prvCheckTasksWaitingTermination+0x54>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	3b01      	subs	r3, #1
 800393c:	4a0b      	ldr	r2, [pc, #44]	; (800396c <prvCheckTasksWaitingTermination+0x54>)
 800393e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003940:	4b0b      	ldr	r3, [pc, #44]	; (8003970 <prvCheckTasksWaitingTermination+0x58>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	3b01      	subs	r3, #1
 8003946:	4a0a      	ldr	r2, [pc, #40]	; (8003970 <prvCheckTasksWaitingTermination+0x58>)
 8003948:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800394a:	f000 facb 	bl	8003ee4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f810 	bl	8003974 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003954:	4b06      	ldr	r3, [pc, #24]	; (8003970 <prvCheckTasksWaitingTermination+0x58>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d1e1      	bne.n	8003920 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800395c:	bf00      	nop
 800395e:	bf00      	nop
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	20000460 	.word	0x20000460
 800396c:	2000048c 	.word	0x2000048c
 8003970:	20000474 	.word	0x20000474

08003974 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003974:	b580      	push	{r7, lr}
 8003976:	b084      	sub	sp, #16
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	334c      	adds	r3, #76	; 0x4c
 8003980:	4618      	mov	r0, r3
 8003982:	f000 febb 	bl	80046fc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800398c:	2b00      	cmp	r3, #0
 800398e:	d108      	bne.n	80039a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003994:	4618      	mov	r0, r3
 8003996:	f000 fc63 	bl	8004260 <vPortFree>
				vPortFree( pxTCB );
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f000 fc60 	bl	8004260 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80039a0:	e018      	b.n	80039d4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d103      	bne.n	80039b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 fc57 	bl	8004260 <vPortFree>
	}
 80039b2:	e00f      	b.n	80039d4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d00a      	beq.n	80039d4 <prvDeleteTCB+0x60>
	__asm volatile
 80039be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c2:	f383 8811 	msr	BASEPRI, r3
 80039c6:	f3bf 8f6f 	isb	sy
 80039ca:	f3bf 8f4f 	dsb	sy
 80039ce:	60fb      	str	r3, [r7, #12]
}
 80039d0:	bf00      	nop
 80039d2:	e7fe      	b.n	80039d2 <prvDeleteTCB+0x5e>
	}
 80039d4:	bf00      	nop
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}

080039dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80039e2:	4b0c      	ldr	r3, [pc, #48]	; (8003a14 <prvResetNextTaskUnblockTime+0x38>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d104      	bne.n	80039f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80039ec:	4b0a      	ldr	r3, [pc, #40]	; (8003a18 <prvResetNextTaskUnblockTime+0x3c>)
 80039ee:	f04f 32ff 	mov.w	r2, #4294967295
 80039f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80039f4:	e008      	b.n	8003a08 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039f6:	4b07      	ldr	r3, [pc, #28]	; (8003a14 <prvResetNextTaskUnblockTime+0x38>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	4a04      	ldr	r2, [pc, #16]	; (8003a18 <prvResetNextTaskUnblockTime+0x3c>)
 8003a06:	6013      	str	r3, [r2, #0]
}
 8003a08:	bf00      	nop
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	20000444 	.word	0x20000444
 8003a18:	200004ac 	.word	0x200004ac

08003a1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003a22:	4b0b      	ldr	r3, [pc, #44]	; (8003a50 <xTaskGetSchedulerState+0x34>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d102      	bne.n	8003a30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	607b      	str	r3, [r7, #4]
 8003a2e:	e008      	b.n	8003a42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a30:	4b08      	ldr	r3, [pc, #32]	; (8003a54 <xTaskGetSchedulerState+0x38>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d102      	bne.n	8003a3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003a38:	2302      	movs	r3, #2
 8003a3a:	607b      	str	r3, [r7, #4]
 8003a3c:	e001      	b.n	8003a42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003a42:	687b      	ldr	r3, [r7, #4]
	}
 8003a44:	4618      	mov	r0, r3
 8003a46:	370c      	adds	r7, #12
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4e:	4770      	bx	lr
 8003a50:	20000498 	.word	0x20000498
 8003a54:	200004b4 	.word	0x200004b4

08003a58 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003a64:	2300      	movs	r3, #0
 8003a66:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d06e      	beq.n	8003b4c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003a6e:	4b3a      	ldr	r3, [pc, #232]	; (8003b58 <xTaskPriorityDisinherit+0x100>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d00a      	beq.n	8003a8e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a7c:	f383 8811 	msr	BASEPRI, r3
 8003a80:	f3bf 8f6f 	isb	sy
 8003a84:	f3bf 8f4f 	dsb	sy
 8003a88:	60fb      	str	r3, [r7, #12]
}
 8003a8a:	bf00      	nop
 8003a8c:	e7fe      	b.n	8003a8c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d10a      	bne.n	8003aac <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a9a:	f383 8811 	msr	BASEPRI, r3
 8003a9e:	f3bf 8f6f 	isb	sy
 8003aa2:	f3bf 8f4f 	dsb	sy
 8003aa6:	60bb      	str	r3, [r7, #8]
}
 8003aa8:	bf00      	nop
 8003aaa:	e7fe      	b.n	8003aaa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ab0:	1e5a      	subs	r2, r3, #1
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003abe:	429a      	cmp	r2, r3
 8003ac0:	d044      	beq.n	8003b4c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d140      	bne.n	8003b4c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	3304      	adds	r3, #4
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7fe fcea 	bl	80024a8 <uxListRemove>
 8003ad4:	4603      	mov	r3, r0
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d115      	bne.n	8003b06 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ade:	491f      	ldr	r1, [pc, #124]	; (8003b5c <xTaskPriorityDisinherit+0x104>)
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	4413      	add	r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	440b      	add	r3, r1
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d10a      	bne.n	8003b06 <xTaskPriorityDisinherit+0xae>
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003af4:	2201      	movs	r2, #1
 8003af6:	fa02 f303 	lsl.w	r3, r2, r3
 8003afa:	43da      	mvns	r2, r3
 8003afc:	4b18      	ldr	r3, [pc, #96]	; (8003b60 <xTaskPriorityDisinherit+0x108>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4013      	ands	r3, r2
 8003b02:	4a17      	ldr	r2, [pc, #92]	; (8003b60 <xTaskPriorityDisinherit+0x108>)
 8003b04:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b12:	f1c3 0207 	rsb	r2, r3, #7
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1e:	2201      	movs	r2, #1
 8003b20:	409a      	lsls	r2, r3
 8003b22:	4b0f      	ldr	r3, [pc, #60]	; (8003b60 <xTaskPriorityDisinherit+0x108>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4313      	orrs	r3, r2
 8003b28:	4a0d      	ldr	r2, [pc, #52]	; (8003b60 <xTaskPriorityDisinherit+0x108>)
 8003b2a:	6013      	str	r3, [r2, #0]
 8003b2c:	693b      	ldr	r3, [r7, #16]
 8003b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b30:	4613      	mov	r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	4413      	add	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4a08      	ldr	r2, [pc, #32]	; (8003b5c <xTaskPriorityDisinherit+0x104>)
 8003b3a:	441a      	add	r2, r3
 8003b3c:	693b      	ldr	r3, [r7, #16]
 8003b3e:	3304      	adds	r3, #4
 8003b40:	4619      	mov	r1, r3
 8003b42:	4610      	mov	r0, r2
 8003b44:	f7fe fc53 	bl	80023ee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003b4c:	697b      	ldr	r3, [r7, #20]
	}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3718      	adds	r7, #24
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	2000038c 	.word	0x2000038c
 8003b5c:	20000390 	.word	0x20000390
 8003b60:	20000494 	.word	0x20000494

08003b64 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003b6e:	4b29      	ldr	r3, [pc, #164]	; (8003c14 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b74:	4b28      	ldr	r3, [pc, #160]	; (8003c18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	3304      	adds	r3, #4
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fe fc94 	bl	80024a8 <uxListRemove>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10b      	bne.n	8003b9e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003b86:	4b24      	ldr	r3, [pc, #144]	; (8003c18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b92:	43da      	mvns	r2, r3
 8003b94:	4b21      	ldr	r3, [pc, #132]	; (8003c1c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	4a20      	ldr	r2, [pc, #128]	; (8003c1c <prvAddCurrentTaskToDelayedList+0xb8>)
 8003b9c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ba4:	d10a      	bne.n	8003bbc <prvAddCurrentTaskToDelayedList+0x58>
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d007      	beq.n	8003bbc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bac:	4b1a      	ldr	r3, [pc, #104]	; (8003c18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	481a      	ldr	r0, [pc, #104]	; (8003c20 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003bb6:	f7fe fc1a 	bl	80023ee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003bba:	e026      	b.n	8003c0a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003bc4:	4b14      	ldr	r3, [pc, #80]	; (8003c18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68ba      	ldr	r2, [r7, #8]
 8003bca:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003bcc:	68ba      	ldr	r2, [r7, #8]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d209      	bcs.n	8003be8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003bd4:	4b13      	ldr	r3, [pc, #76]	; (8003c24 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	4b0f      	ldr	r3, [pc, #60]	; (8003c18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	3304      	adds	r3, #4
 8003bde:	4619      	mov	r1, r3
 8003be0:	4610      	mov	r0, r2
 8003be2:	f7fe fc28 	bl	8002436 <vListInsert>
}
 8003be6:	e010      	b.n	8003c0a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003be8:	4b0f      	ldr	r3, [pc, #60]	; (8003c28 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	4b0a      	ldr	r3, [pc, #40]	; (8003c18 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	3304      	adds	r3, #4
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	4610      	mov	r0, r2
 8003bf6:	f7fe fc1e 	bl	8002436 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003bfa:	4b0c      	ldr	r3, [pc, #48]	; (8003c2c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	68ba      	ldr	r2, [r7, #8]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d202      	bcs.n	8003c0a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003c04:	4a09      	ldr	r2, [pc, #36]	; (8003c2c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	6013      	str	r3, [r2, #0]
}
 8003c0a:	bf00      	nop
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	20000490 	.word	0x20000490
 8003c18:	2000038c 	.word	0x2000038c
 8003c1c:	20000494 	.word	0x20000494
 8003c20:	20000478 	.word	0x20000478
 8003c24:	20000448 	.word	0x20000448
 8003c28:	20000444 	.word	0x20000444
 8003c2c:	200004ac 	.word	0x200004ac

08003c30 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	3b04      	subs	r3, #4
 8003c40:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003c48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	3b04      	subs	r3, #4
 8003c4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	f023 0201 	bic.w	r2, r3, #1
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	3b04      	subs	r3, #4
 8003c5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003c60:	4a0c      	ldr	r2, [pc, #48]	; (8003c94 <pxPortInitialiseStack+0x64>)
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	3b14      	subs	r3, #20
 8003c6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003c6c:	687a      	ldr	r2, [r7, #4]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	3b04      	subs	r3, #4
 8003c76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	f06f 0202 	mvn.w	r2, #2
 8003c7e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	3b20      	subs	r3, #32
 8003c84:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003c86:	68fb      	ldr	r3, [r7, #12]
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3714      	adds	r7, #20
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr
 8003c94:	08003c99 	.word	0x08003c99

08003c98 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003ca2:	4b12      	ldr	r3, [pc, #72]	; (8003cec <prvTaskExitError+0x54>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003caa:	d00a      	beq.n	8003cc2 <prvTaskExitError+0x2a>
	__asm volatile
 8003cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb0:	f383 8811 	msr	BASEPRI, r3
 8003cb4:	f3bf 8f6f 	isb	sy
 8003cb8:	f3bf 8f4f 	dsb	sy
 8003cbc:	60fb      	str	r3, [r7, #12]
}
 8003cbe:	bf00      	nop
 8003cc0:	e7fe      	b.n	8003cc0 <prvTaskExitError+0x28>
	__asm volatile
 8003cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc6:	f383 8811 	msr	BASEPRI, r3
 8003cca:	f3bf 8f6f 	isb	sy
 8003cce:	f3bf 8f4f 	dsb	sy
 8003cd2:	60bb      	str	r3, [r7, #8]
}
 8003cd4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003cd6:	bf00      	nop
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d0fc      	beq.n	8003cd8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003cde:	bf00      	nop
 8003ce0:	bf00      	nop
 8003ce2:	3714      	adds	r7, #20
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr
 8003cec:	2000000c 	.word	0x2000000c

08003cf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003cf0:	4b07      	ldr	r3, [pc, #28]	; (8003d10 <pxCurrentTCBConst2>)
 8003cf2:	6819      	ldr	r1, [r3, #0]
 8003cf4:	6808      	ldr	r0, [r1, #0]
 8003cf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003cfa:	f380 8809 	msr	PSP, r0
 8003cfe:	f3bf 8f6f 	isb	sy
 8003d02:	f04f 0000 	mov.w	r0, #0
 8003d06:	f380 8811 	msr	BASEPRI, r0
 8003d0a:	4770      	bx	lr
 8003d0c:	f3af 8000 	nop.w

08003d10 <pxCurrentTCBConst2>:
 8003d10:	2000038c 	.word	0x2000038c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003d14:	bf00      	nop
 8003d16:	bf00      	nop

08003d18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003d18:	4808      	ldr	r0, [pc, #32]	; (8003d3c <prvPortStartFirstTask+0x24>)
 8003d1a:	6800      	ldr	r0, [r0, #0]
 8003d1c:	6800      	ldr	r0, [r0, #0]
 8003d1e:	f380 8808 	msr	MSP, r0
 8003d22:	f04f 0000 	mov.w	r0, #0
 8003d26:	f380 8814 	msr	CONTROL, r0
 8003d2a:	b662      	cpsie	i
 8003d2c:	b661      	cpsie	f
 8003d2e:	f3bf 8f4f 	dsb	sy
 8003d32:	f3bf 8f6f 	isb	sy
 8003d36:	df00      	svc	0
 8003d38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003d3a:	bf00      	nop
 8003d3c:	e000ed08 	.word	0xe000ed08

08003d40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003d46:	4b46      	ldr	r3, [pc, #280]	; (8003e60 <xPortStartScheduler+0x120>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a46      	ldr	r2, [pc, #280]	; (8003e64 <xPortStartScheduler+0x124>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d10a      	bne.n	8003d66 <xPortStartScheduler+0x26>
	__asm volatile
 8003d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d54:	f383 8811 	msr	BASEPRI, r3
 8003d58:	f3bf 8f6f 	isb	sy
 8003d5c:	f3bf 8f4f 	dsb	sy
 8003d60:	613b      	str	r3, [r7, #16]
}
 8003d62:	bf00      	nop
 8003d64:	e7fe      	b.n	8003d64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003d66:	4b3e      	ldr	r3, [pc, #248]	; (8003e60 <xPortStartScheduler+0x120>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a3f      	ldr	r2, [pc, #252]	; (8003e68 <xPortStartScheduler+0x128>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d10a      	bne.n	8003d86 <xPortStartScheduler+0x46>
	__asm volatile
 8003d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d74:	f383 8811 	msr	BASEPRI, r3
 8003d78:	f3bf 8f6f 	isb	sy
 8003d7c:	f3bf 8f4f 	dsb	sy
 8003d80:	60fb      	str	r3, [r7, #12]
}
 8003d82:	bf00      	nop
 8003d84:	e7fe      	b.n	8003d84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003d86:	4b39      	ldr	r3, [pc, #228]	; (8003e6c <xPortStartScheduler+0x12c>)
 8003d88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	b2db      	uxtb	r3, r3
 8003d90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	22ff      	movs	r2, #255	; 0xff
 8003d96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003da0:	78fb      	ldrb	r3, [r7, #3]
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003da8:	b2da      	uxtb	r2, r3
 8003daa:	4b31      	ldr	r3, [pc, #196]	; (8003e70 <xPortStartScheduler+0x130>)
 8003dac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003dae:	4b31      	ldr	r3, [pc, #196]	; (8003e74 <xPortStartScheduler+0x134>)
 8003db0:	2207      	movs	r2, #7
 8003db2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003db4:	e009      	b.n	8003dca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003db6:	4b2f      	ldr	r3, [pc, #188]	; (8003e74 <xPortStartScheduler+0x134>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	3b01      	subs	r3, #1
 8003dbc:	4a2d      	ldr	r2, [pc, #180]	; (8003e74 <xPortStartScheduler+0x134>)
 8003dbe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003dc0:	78fb      	ldrb	r3, [r7, #3]
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	b2db      	uxtb	r3, r3
 8003dc8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003dca:	78fb      	ldrb	r3, [r7, #3]
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd2:	2b80      	cmp	r3, #128	; 0x80
 8003dd4:	d0ef      	beq.n	8003db6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003dd6:	4b27      	ldr	r3, [pc, #156]	; (8003e74 <xPortStartScheduler+0x134>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f1c3 0307 	rsb	r3, r3, #7
 8003dde:	2b04      	cmp	r3, #4
 8003de0:	d00a      	beq.n	8003df8 <xPortStartScheduler+0xb8>
	__asm volatile
 8003de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de6:	f383 8811 	msr	BASEPRI, r3
 8003dea:	f3bf 8f6f 	isb	sy
 8003dee:	f3bf 8f4f 	dsb	sy
 8003df2:	60bb      	str	r3, [r7, #8]
}
 8003df4:	bf00      	nop
 8003df6:	e7fe      	b.n	8003df6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003df8:	4b1e      	ldr	r3, [pc, #120]	; (8003e74 <xPortStartScheduler+0x134>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	021b      	lsls	r3, r3, #8
 8003dfe:	4a1d      	ldr	r2, [pc, #116]	; (8003e74 <xPortStartScheduler+0x134>)
 8003e00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003e02:	4b1c      	ldr	r3, [pc, #112]	; (8003e74 <xPortStartScheduler+0x134>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003e0a:	4a1a      	ldr	r2, [pc, #104]	; (8003e74 <xPortStartScheduler+0x134>)
 8003e0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003e16:	4b18      	ldr	r3, [pc, #96]	; (8003e78 <xPortStartScheduler+0x138>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a17      	ldr	r2, [pc, #92]	; (8003e78 <xPortStartScheduler+0x138>)
 8003e1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003e22:	4b15      	ldr	r3, [pc, #84]	; (8003e78 <xPortStartScheduler+0x138>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a14      	ldr	r2, [pc, #80]	; (8003e78 <xPortStartScheduler+0x138>)
 8003e28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003e2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003e2e:	f000 f8dd 	bl	8003fec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003e32:	4b12      	ldr	r3, [pc, #72]	; (8003e7c <xPortStartScheduler+0x13c>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003e38:	f000 f8fc 	bl	8004034 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003e3c:	4b10      	ldr	r3, [pc, #64]	; (8003e80 <xPortStartScheduler+0x140>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a0f      	ldr	r2, [pc, #60]	; (8003e80 <xPortStartScheduler+0x140>)
 8003e42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003e46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003e48:	f7ff ff66 	bl	8003d18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003e4c:	f7ff fba0 	bl	8003590 <vTaskSwitchContext>
	prvTaskExitError();
 8003e50:	f7ff ff22 	bl	8003c98 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003e54:	2300      	movs	r3, #0
}
 8003e56:	4618      	mov	r0, r3
 8003e58:	3718      	adds	r7, #24
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	e000ed00 	.word	0xe000ed00
 8003e64:	410fc271 	.word	0x410fc271
 8003e68:	410fc270 	.word	0x410fc270
 8003e6c:	e000e400 	.word	0xe000e400
 8003e70:	200004b8 	.word	0x200004b8
 8003e74:	200004bc 	.word	0x200004bc
 8003e78:	e000ed20 	.word	0xe000ed20
 8003e7c:	2000000c 	.word	0x2000000c
 8003e80:	e000ef34 	.word	0xe000ef34

08003e84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
	__asm volatile
 8003e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e8e:	f383 8811 	msr	BASEPRI, r3
 8003e92:	f3bf 8f6f 	isb	sy
 8003e96:	f3bf 8f4f 	dsb	sy
 8003e9a:	607b      	str	r3, [r7, #4]
}
 8003e9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003e9e:	4b0f      	ldr	r3, [pc, #60]	; (8003edc <vPortEnterCritical+0x58>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	3301      	adds	r3, #1
 8003ea4:	4a0d      	ldr	r2, [pc, #52]	; (8003edc <vPortEnterCritical+0x58>)
 8003ea6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003ea8:	4b0c      	ldr	r3, [pc, #48]	; (8003edc <vPortEnterCritical+0x58>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d10f      	bne.n	8003ed0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003eb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ee0 <vPortEnterCritical+0x5c>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00a      	beq.n	8003ed0 <vPortEnterCritical+0x4c>
	__asm volatile
 8003eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ebe:	f383 8811 	msr	BASEPRI, r3
 8003ec2:	f3bf 8f6f 	isb	sy
 8003ec6:	f3bf 8f4f 	dsb	sy
 8003eca:	603b      	str	r3, [r7, #0]
}
 8003ecc:	bf00      	nop
 8003ece:	e7fe      	b.n	8003ece <vPortEnterCritical+0x4a>
	}
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	2000000c 	.word	0x2000000c
 8003ee0:	e000ed04 	.word	0xe000ed04

08003ee4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b083      	sub	sp, #12
 8003ee8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003eea:	4b12      	ldr	r3, [pc, #72]	; (8003f34 <vPortExitCritical+0x50>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10a      	bne.n	8003f08 <vPortExitCritical+0x24>
	__asm volatile
 8003ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef6:	f383 8811 	msr	BASEPRI, r3
 8003efa:	f3bf 8f6f 	isb	sy
 8003efe:	f3bf 8f4f 	dsb	sy
 8003f02:	607b      	str	r3, [r7, #4]
}
 8003f04:	bf00      	nop
 8003f06:	e7fe      	b.n	8003f06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003f08:	4b0a      	ldr	r3, [pc, #40]	; (8003f34 <vPortExitCritical+0x50>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	4a09      	ldr	r2, [pc, #36]	; (8003f34 <vPortExitCritical+0x50>)
 8003f10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003f12:	4b08      	ldr	r3, [pc, #32]	; (8003f34 <vPortExitCritical+0x50>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d105      	bne.n	8003f26 <vPortExitCritical+0x42>
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	f383 8811 	msr	BASEPRI, r3
}
 8003f24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003f26:	bf00      	nop
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
 8003f32:	bf00      	nop
 8003f34:	2000000c 	.word	0x2000000c
	...

08003f40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003f40:	f3ef 8009 	mrs	r0, PSP
 8003f44:	f3bf 8f6f 	isb	sy
 8003f48:	4b15      	ldr	r3, [pc, #84]	; (8003fa0 <pxCurrentTCBConst>)
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	f01e 0f10 	tst.w	lr, #16
 8003f50:	bf08      	it	eq
 8003f52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003f56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f5a:	6010      	str	r0, [r2, #0]
 8003f5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003f60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003f64:	f380 8811 	msr	BASEPRI, r0
 8003f68:	f3bf 8f4f 	dsb	sy
 8003f6c:	f3bf 8f6f 	isb	sy
 8003f70:	f7ff fb0e 	bl	8003590 <vTaskSwitchContext>
 8003f74:	f04f 0000 	mov.w	r0, #0
 8003f78:	f380 8811 	msr	BASEPRI, r0
 8003f7c:	bc09      	pop	{r0, r3}
 8003f7e:	6819      	ldr	r1, [r3, #0]
 8003f80:	6808      	ldr	r0, [r1, #0]
 8003f82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f86:	f01e 0f10 	tst.w	lr, #16
 8003f8a:	bf08      	it	eq
 8003f8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003f90:	f380 8809 	msr	PSP, r0
 8003f94:	f3bf 8f6f 	isb	sy
 8003f98:	4770      	bx	lr
 8003f9a:	bf00      	nop
 8003f9c:	f3af 8000 	nop.w

08003fa0 <pxCurrentTCBConst>:
 8003fa0:	2000038c 	.word	0x2000038c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003fa4:	bf00      	nop
 8003fa6:	bf00      	nop

08003fa8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b082      	sub	sp, #8
 8003fac:	af00      	add	r7, sp, #0
	__asm volatile
 8003fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb2:	f383 8811 	msr	BASEPRI, r3
 8003fb6:	f3bf 8f6f 	isb	sy
 8003fba:	f3bf 8f4f 	dsb	sy
 8003fbe:	607b      	str	r3, [r7, #4]
}
 8003fc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003fc2:	f7ff fa2d 	bl	8003420 <xTaskIncrementTick>
 8003fc6:	4603      	mov	r3, r0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d003      	beq.n	8003fd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003fcc:	4b06      	ldr	r3, [pc, #24]	; (8003fe8 <SysTick_Handler+0x40>)
 8003fce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fd2:	601a      	str	r2, [r3, #0]
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	f383 8811 	msr	BASEPRI, r3
}
 8003fde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003fe0:	bf00      	nop
 8003fe2:	3708      	adds	r7, #8
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	e000ed04 	.word	0xe000ed04

08003fec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003fec:	b480      	push	{r7}
 8003fee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003ff0:	4b0b      	ldr	r3, [pc, #44]	; (8004020 <vPortSetupTimerInterrupt+0x34>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003ff6:	4b0b      	ldr	r3, [pc, #44]	; (8004024 <vPortSetupTimerInterrupt+0x38>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003ffc:	4b0a      	ldr	r3, [pc, #40]	; (8004028 <vPortSetupTimerInterrupt+0x3c>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a0a      	ldr	r2, [pc, #40]	; (800402c <vPortSetupTimerInterrupt+0x40>)
 8004002:	fba2 2303 	umull	r2, r3, r2, r3
 8004006:	099b      	lsrs	r3, r3, #6
 8004008:	4a09      	ldr	r2, [pc, #36]	; (8004030 <vPortSetupTimerInterrupt+0x44>)
 800400a:	3b01      	subs	r3, #1
 800400c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800400e:	4b04      	ldr	r3, [pc, #16]	; (8004020 <vPortSetupTimerInterrupt+0x34>)
 8004010:	2207      	movs	r2, #7
 8004012:	601a      	str	r2, [r3, #0]
}
 8004014:	bf00      	nop
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
 800401e:	bf00      	nop
 8004020:	e000e010 	.word	0xe000e010
 8004024:	e000e018 	.word	0xe000e018
 8004028:	20000000 	.word	0x20000000
 800402c:	10624dd3 	.word	0x10624dd3
 8004030:	e000e014 	.word	0xe000e014

08004034 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004034:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004044 <vPortEnableVFP+0x10>
 8004038:	6801      	ldr	r1, [r0, #0]
 800403a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800403e:	6001      	str	r1, [r0, #0]
 8004040:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004042:	bf00      	nop
 8004044:	e000ed88 	.word	0xe000ed88

08004048 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800404e:	f3ef 8305 	mrs	r3, IPSR
 8004052:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2b0f      	cmp	r3, #15
 8004058:	d914      	bls.n	8004084 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800405a:	4a17      	ldr	r2, [pc, #92]	; (80040b8 <vPortValidateInterruptPriority+0x70>)
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	4413      	add	r3, r2
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004064:	4b15      	ldr	r3, [pc, #84]	; (80040bc <vPortValidateInterruptPriority+0x74>)
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	7afa      	ldrb	r2, [r7, #11]
 800406a:	429a      	cmp	r2, r3
 800406c:	d20a      	bcs.n	8004084 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800406e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004072:	f383 8811 	msr	BASEPRI, r3
 8004076:	f3bf 8f6f 	isb	sy
 800407a:	f3bf 8f4f 	dsb	sy
 800407e:	607b      	str	r3, [r7, #4]
}
 8004080:	bf00      	nop
 8004082:	e7fe      	b.n	8004082 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004084:	4b0e      	ldr	r3, [pc, #56]	; (80040c0 <vPortValidateInterruptPriority+0x78>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800408c:	4b0d      	ldr	r3, [pc, #52]	; (80040c4 <vPortValidateInterruptPriority+0x7c>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	429a      	cmp	r2, r3
 8004092:	d90a      	bls.n	80040aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004098:	f383 8811 	msr	BASEPRI, r3
 800409c:	f3bf 8f6f 	isb	sy
 80040a0:	f3bf 8f4f 	dsb	sy
 80040a4:	603b      	str	r3, [r7, #0]
}
 80040a6:	bf00      	nop
 80040a8:	e7fe      	b.n	80040a8 <vPortValidateInterruptPriority+0x60>
	}
 80040aa:	bf00      	nop
 80040ac:	3714      	adds	r7, #20
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	e000e3f0 	.word	0xe000e3f0
 80040bc:	200004b8 	.word	0x200004b8
 80040c0:	e000ed0c 	.word	0xe000ed0c
 80040c4:	200004bc 	.word	0x200004bc

080040c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b08a      	sub	sp, #40	; 0x28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80040d0:	2300      	movs	r3, #0
 80040d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80040d4:	f7ff f8fa 	bl	80032cc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80040d8:	4b5b      	ldr	r3, [pc, #364]	; (8004248 <pvPortMalloc+0x180>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d101      	bne.n	80040e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80040e0:	f000 f920 	bl	8004324 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80040e4:	4b59      	ldr	r3, [pc, #356]	; (800424c <pvPortMalloc+0x184>)
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4013      	ands	r3, r2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	f040 8093 	bne.w	8004218 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d01d      	beq.n	8004134 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80040f8:	2208      	movs	r2, #8
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4413      	add	r3, r2
 80040fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	f003 0307 	and.w	r3, r3, #7
 8004106:	2b00      	cmp	r3, #0
 8004108:	d014      	beq.n	8004134 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f023 0307 	bic.w	r3, r3, #7
 8004110:	3308      	adds	r3, #8
 8004112:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f003 0307 	and.w	r3, r3, #7
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <pvPortMalloc+0x6c>
	__asm volatile
 800411e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004122:	f383 8811 	msr	BASEPRI, r3
 8004126:	f3bf 8f6f 	isb	sy
 800412a:	f3bf 8f4f 	dsb	sy
 800412e:	617b      	str	r3, [r7, #20]
}
 8004130:	bf00      	nop
 8004132:	e7fe      	b.n	8004132 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d06e      	beq.n	8004218 <pvPortMalloc+0x150>
 800413a:	4b45      	ldr	r3, [pc, #276]	; (8004250 <pvPortMalloc+0x188>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	429a      	cmp	r2, r3
 8004142:	d869      	bhi.n	8004218 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004144:	4b43      	ldr	r3, [pc, #268]	; (8004254 <pvPortMalloc+0x18c>)
 8004146:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004148:	4b42      	ldr	r3, [pc, #264]	; (8004254 <pvPortMalloc+0x18c>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800414e:	e004      	b.n	800415a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004152:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	687a      	ldr	r2, [r7, #4]
 8004160:	429a      	cmp	r2, r3
 8004162:	d903      	bls.n	800416c <pvPortMalloc+0xa4>
 8004164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1f1      	bne.n	8004150 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800416c:	4b36      	ldr	r3, [pc, #216]	; (8004248 <pvPortMalloc+0x180>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004172:	429a      	cmp	r2, r3
 8004174:	d050      	beq.n	8004218 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004176:	6a3b      	ldr	r3, [r7, #32]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2208      	movs	r2, #8
 800417c:	4413      	add	r3, r2
 800417e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	6a3b      	ldr	r3, [r7, #32]
 8004186:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	1ad2      	subs	r2, r2, r3
 8004190:	2308      	movs	r3, #8
 8004192:	005b      	lsls	r3, r3, #1
 8004194:	429a      	cmp	r2, r3
 8004196:	d91f      	bls.n	80041d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	4413      	add	r3, r2
 800419e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	f003 0307 	and.w	r3, r3, #7
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00a      	beq.n	80041c0 <pvPortMalloc+0xf8>
	__asm volatile
 80041aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041ae:	f383 8811 	msr	BASEPRI, r3
 80041b2:	f3bf 8f6f 	isb	sy
 80041b6:	f3bf 8f4f 	dsb	sy
 80041ba:	613b      	str	r3, [r7, #16]
}
 80041bc:	bf00      	nop
 80041be:	e7fe      	b.n	80041be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80041c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c2:	685a      	ldr	r2, [r3, #4]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	1ad2      	subs	r2, r2, r3
 80041c8:	69bb      	ldr	r3, [r7, #24]
 80041ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80041cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ce:	687a      	ldr	r2, [r7, #4]
 80041d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80041d2:	69b8      	ldr	r0, [r7, #24]
 80041d4:	f000 f908 	bl	80043e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80041d8:	4b1d      	ldr	r3, [pc, #116]	; (8004250 <pvPortMalloc+0x188>)
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	1ad3      	subs	r3, r2, r3
 80041e2:	4a1b      	ldr	r2, [pc, #108]	; (8004250 <pvPortMalloc+0x188>)
 80041e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80041e6:	4b1a      	ldr	r3, [pc, #104]	; (8004250 <pvPortMalloc+0x188>)
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	4b1b      	ldr	r3, [pc, #108]	; (8004258 <pvPortMalloc+0x190>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d203      	bcs.n	80041fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80041f2:	4b17      	ldr	r3, [pc, #92]	; (8004250 <pvPortMalloc+0x188>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a18      	ldr	r2, [pc, #96]	; (8004258 <pvPortMalloc+0x190>)
 80041f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80041fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fc:	685a      	ldr	r2, [r3, #4]
 80041fe:	4b13      	ldr	r3, [pc, #76]	; (800424c <pvPortMalloc+0x184>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	431a      	orrs	r2, r3
 8004204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004206:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420a:	2200      	movs	r2, #0
 800420c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800420e:	4b13      	ldr	r3, [pc, #76]	; (800425c <pvPortMalloc+0x194>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	3301      	adds	r3, #1
 8004214:	4a11      	ldr	r2, [pc, #68]	; (800425c <pvPortMalloc+0x194>)
 8004216:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004218:	f7ff f866 	bl	80032e8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800421c:	69fb      	ldr	r3, [r7, #28]
 800421e:	f003 0307 	and.w	r3, r3, #7
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00a      	beq.n	800423c <pvPortMalloc+0x174>
	__asm volatile
 8004226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800422a:	f383 8811 	msr	BASEPRI, r3
 800422e:	f3bf 8f6f 	isb	sy
 8004232:	f3bf 8f4f 	dsb	sy
 8004236:	60fb      	str	r3, [r7, #12]
}
 8004238:	bf00      	nop
 800423a:	e7fe      	b.n	800423a <pvPortMalloc+0x172>
	return pvReturn;
 800423c:	69fb      	ldr	r3, [r7, #28]
}
 800423e:	4618      	mov	r0, r3
 8004240:	3728      	adds	r7, #40	; 0x28
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	200040c8 	.word	0x200040c8
 800424c:	200040dc 	.word	0x200040dc
 8004250:	200040cc 	.word	0x200040cc
 8004254:	200040c0 	.word	0x200040c0
 8004258:	200040d0 	.word	0x200040d0
 800425c:	200040d4 	.word	0x200040d4

08004260 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d04d      	beq.n	800430e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004272:	2308      	movs	r3, #8
 8004274:	425b      	negs	r3, r3
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	4413      	add	r3, r2
 800427a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004280:	693b      	ldr	r3, [r7, #16]
 8004282:	685a      	ldr	r2, [r3, #4]
 8004284:	4b24      	ldr	r3, [pc, #144]	; (8004318 <vPortFree+0xb8>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4013      	ands	r3, r2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d10a      	bne.n	80042a4 <vPortFree+0x44>
	__asm volatile
 800428e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004292:	f383 8811 	msr	BASEPRI, r3
 8004296:	f3bf 8f6f 	isb	sy
 800429a:	f3bf 8f4f 	dsb	sy
 800429e:	60fb      	str	r3, [r7, #12]
}
 80042a0:	bf00      	nop
 80042a2:	e7fe      	b.n	80042a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d00a      	beq.n	80042c2 <vPortFree+0x62>
	__asm volatile
 80042ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b0:	f383 8811 	msr	BASEPRI, r3
 80042b4:	f3bf 8f6f 	isb	sy
 80042b8:	f3bf 8f4f 	dsb	sy
 80042bc:	60bb      	str	r3, [r7, #8]
}
 80042be:	bf00      	nop
 80042c0:	e7fe      	b.n	80042c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	685a      	ldr	r2, [r3, #4]
 80042c6:	4b14      	ldr	r3, [pc, #80]	; (8004318 <vPortFree+0xb8>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4013      	ands	r3, r2
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d01e      	beq.n	800430e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d11a      	bne.n	800430e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	4b0e      	ldr	r3, [pc, #56]	; (8004318 <vPortFree+0xb8>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	43db      	mvns	r3, r3
 80042e2:	401a      	ands	r2, r3
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80042e8:	f7fe fff0 	bl	80032cc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	4b0a      	ldr	r3, [pc, #40]	; (800431c <vPortFree+0xbc>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4413      	add	r3, r2
 80042f6:	4a09      	ldr	r2, [pc, #36]	; (800431c <vPortFree+0xbc>)
 80042f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80042fa:	6938      	ldr	r0, [r7, #16]
 80042fc:	f000 f874 	bl	80043e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004300:	4b07      	ldr	r3, [pc, #28]	; (8004320 <vPortFree+0xc0>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	3301      	adds	r3, #1
 8004306:	4a06      	ldr	r2, [pc, #24]	; (8004320 <vPortFree+0xc0>)
 8004308:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800430a:	f7fe ffed 	bl	80032e8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800430e:	bf00      	nop
 8004310:	3718      	adds	r7, #24
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
 8004316:	bf00      	nop
 8004318:	200040dc 	.word	0x200040dc
 800431c:	200040cc 	.word	0x200040cc
 8004320:	200040d8 	.word	0x200040d8

08004324 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800432a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800432e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004330:	4b27      	ldr	r3, [pc, #156]	; (80043d0 <prvHeapInit+0xac>)
 8004332:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	f003 0307 	and.w	r3, r3, #7
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00c      	beq.n	8004358 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	3307      	adds	r3, #7
 8004342:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f023 0307 	bic.w	r3, r3, #7
 800434a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800434c:	68ba      	ldr	r2, [r7, #8]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	4a1f      	ldr	r2, [pc, #124]	; (80043d0 <prvHeapInit+0xac>)
 8004354:	4413      	add	r3, r2
 8004356:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800435c:	4a1d      	ldr	r2, [pc, #116]	; (80043d4 <prvHeapInit+0xb0>)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004362:	4b1c      	ldr	r3, [pc, #112]	; (80043d4 <prvHeapInit+0xb0>)
 8004364:	2200      	movs	r2, #0
 8004366:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68ba      	ldr	r2, [r7, #8]
 800436c:	4413      	add	r3, r2
 800436e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004370:	2208      	movs	r2, #8
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	1a9b      	subs	r3, r3, r2
 8004376:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f023 0307 	bic.w	r3, r3, #7
 800437e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4a15      	ldr	r2, [pc, #84]	; (80043d8 <prvHeapInit+0xb4>)
 8004384:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004386:	4b14      	ldr	r3, [pc, #80]	; (80043d8 <prvHeapInit+0xb4>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2200      	movs	r2, #0
 800438c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800438e:	4b12      	ldr	r3, [pc, #72]	; (80043d8 <prvHeapInit+0xb4>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2200      	movs	r2, #0
 8004394:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	1ad2      	subs	r2, r2, r3
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80043a4:	4b0c      	ldr	r3, [pc, #48]	; (80043d8 <prvHeapInit+0xb4>)
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	4a0a      	ldr	r2, [pc, #40]	; (80043dc <prvHeapInit+0xb8>)
 80043b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	4a09      	ldr	r2, [pc, #36]	; (80043e0 <prvHeapInit+0xbc>)
 80043ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80043bc:	4b09      	ldr	r3, [pc, #36]	; (80043e4 <prvHeapInit+0xc0>)
 80043be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80043c2:	601a      	str	r2, [r3, #0]
}
 80043c4:	bf00      	nop
 80043c6:	3714      	adds	r7, #20
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr
 80043d0:	200004c0 	.word	0x200004c0
 80043d4:	200040c0 	.word	0x200040c0
 80043d8:	200040c8 	.word	0x200040c8
 80043dc:	200040d0 	.word	0x200040d0
 80043e0:	200040cc 	.word	0x200040cc
 80043e4:	200040dc 	.word	0x200040dc

080043e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80043f0:	4b28      	ldr	r3, [pc, #160]	; (8004494 <prvInsertBlockIntoFreeList+0xac>)
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	e002      	b.n	80043fc <prvInsertBlockIntoFreeList+0x14>
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	60fb      	str	r3, [r7, #12]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	429a      	cmp	r2, r3
 8004404:	d8f7      	bhi.n	80043f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	68ba      	ldr	r2, [r7, #8]
 8004410:	4413      	add	r3, r2
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	429a      	cmp	r2, r3
 8004416:	d108      	bne.n	800442a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	441a      	add	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	441a      	add	r2, r3
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	429a      	cmp	r2, r3
 800443c:	d118      	bne.n	8004470 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	4b15      	ldr	r3, [pc, #84]	; (8004498 <prvInsertBlockIntoFreeList+0xb0>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	429a      	cmp	r2, r3
 8004448:	d00d      	beq.n	8004466 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685a      	ldr	r2, [r3, #4]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	441a      	add	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	601a      	str	r2, [r3, #0]
 8004464:	e008      	b.n	8004478 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004466:	4b0c      	ldr	r3, [pc, #48]	; (8004498 <prvInsertBlockIntoFreeList+0xb0>)
 8004468:	681a      	ldr	r2, [r3, #0]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	601a      	str	r2, [r3, #0]
 800446e:	e003      	b.n	8004478 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681a      	ldr	r2, [r3, #0]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	429a      	cmp	r2, r3
 800447e:	d002      	beq.n	8004486 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	687a      	ldr	r2, [r7, #4]
 8004484:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004486:	bf00      	nop
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	200040c0 	.word	0x200040c0
 8004498:	200040c8 	.word	0x200040c8

0800449c <std>:
 800449c:	2300      	movs	r3, #0
 800449e:	b510      	push	{r4, lr}
 80044a0:	4604      	mov	r4, r0
 80044a2:	e9c0 3300 	strd	r3, r3, [r0]
 80044a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80044aa:	6083      	str	r3, [r0, #8]
 80044ac:	8181      	strh	r1, [r0, #12]
 80044ae:	6643      	str	r3, [r0, #100]	; 0x64
 80044b0:	81c2      	strh	r2, [r0, #14]
 80044b2:	6183      	str	r3, [r0, #24]
 80044b4:	4619      	mov	r1, r3
 80044b6:	2208      	movs	r2, #8
 80044b8:	305c      	adds	r0, #92	; 0x5c
 80044ba:	f000 f906 	bl	80046ca <memset>
 80044be:	4b0d      	ldr	r3, [pc, #52]	; (80044f4 <std+0x58>)
 80044c0:	6263      	str	r3, [r4, #36]	; 0x24
 80044c2:	4b0d      	ldr	r3, [pc, #52]	; (80044f8 <std+0x5c>)
 80044c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80044c6:	4b0d      	ldr	r3, [pc, #52]	; (80044fc <std+0x60>)
 80044c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80044ca:	4b0d      	ldr	r3, [pc, #52]	; (8004500 <std+0x64>)
 80044cc:	6323      	str	r3, [r4, #48]	; 0x30
 80044ce:	4b0d      	ldr	r3, [pc, #52]	; (8004504 <std+0x68>)
 80044d0:	6224      	str	r4, [r4, #32]
 80044d2:	429c      	cmp	r4, r3
 80044d4:	d006      	beq.n	80044e4 <std+0x48>
 80044d6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80044da:	4294      	cmp	r4, r2
 80044dc:	d002      	beq.n	80044e4 <std+0x48>
 80044de:	33d0      	adds	r3, #208	; 0xd0
 80044e0:	429c      	cmp	r4, r3
 80044e2:	d105      	bne.n	80044f0 <std+0x54>
 80044e4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80044e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80044ec:	f000 b9bc 	b.w	8004868 <__retarget_lock_init_recursive>
 80044f0:	bd10      	pop	{r4, pc}
 80044f2:	bf00      	nop
 80044f4:	08004645 	.word	0x08004645
 80044f8:	08004667 	.word	0x08004667
 80044fc:	0800469f 	.word	0x0800469f
 8004500:	080046c3 	.word	0x080046c3
 8004504:	200040e0 	.word	0x200040e0

08004508 <stdio_exit_handler>:
 8004508:	4a02      	ldr	r2, [pc, #8]	; (8004514 <stdio_exit_handler+0xc>)
 800450a:	4903      	ldr	r1, [pc, #12]	; (8004518 <stdio_exit_handler+0x10>)
 800450c:	4803      	ldr	r0, [pc, #12]	; (800451c <stdio_exit_handler+0x14>)
 800450e:	f000 b869 	b.w	80045e4 <_fwalk_sglue>
 8004512:	bf00      	nop
 8004514:	20000010 	.word	0x20000010
 8004518:	08005131 	.word	0x08005131
 800451c:	2000001c 	.word	0x2000001c

08004520 <cleanup_stdio>:
 8004520:	6841      	ldr	r1, [r0, #4]
 8004522:	4b0c      	ldr	r3, [pc, #48]	; (8004554 <cleanup_stdio+0x34>)
 8004524:	4299      	cmp	r1, r3
 8004526:	b510      	push	{r4, lr}
 8004528:	4604      	mov	r4, r0
 800452a:	d001      	beq.n	8004530 <cleanup_stdio+0x10>
 800452c:	f000 fe00 	bl	8005130 <_fflush_r>
 8004530:	68a1      	ldr	r1, [r4, #8]
 8004532:	4b09      	ldr	r3, [pc, #36]	; (8004558 <cleanup_stdio+0x38>)
 8004534:	4299      	cmp	r1, r3
 8004536:	d002      	beq.n	800453e <cleanup_stdio+0x1e>
 8004538:	4620      	mov	r0, r4
 800453a:	f000 fdf9 	bl	8005130 <_fflush_r>
 800453e:	68e1      	ldr	r1, [r4, #12]
 8004540:	4b06      	ldr	r3, [pc, #24]	; (800455c <cleanup_stdio+0x3c>)
 8004542:	4299      	cmp	r1, r3
 8004544:	d004      	beq.n	8004550 <cleanup_stdio+0x30>
 8004546:	4620      	mov	r0, r4
 8004548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800454c:	f000 bdf0 	b.w	8005130 <_fflush_r>
 8004550:	bd10      	pop	{r4, pc}
 8004552:	bf00      	nop
 8004554:	200040e0 	.word	0x200040e0
 8004558:	20004148 	.word	0x20004148
 800455c:	200041b0 	.word	0x200041b0

08004560 <global_stdio_init.part.0>:
 8004560:	b510      	push	{r4, lr}
 8004562:	4b0b      	ldr	r3, [pc, #44]	; (8004590 <global_stdio_init.part.0+0x30>)
 8004564:	4c0b      	ldr	r4, [pc, #44]	; (8004594 <global_stdio_init.part.0+0x34>)
 8004566:	4a0c      	ldr	r2, [pc, #48]	; (8004598 <global_stdio_init.part.0+0x38>)
 8004568:	601a      	str	r2, [r3, #0]
 800456a:	4620      	mov	r0, r4
 800456c:	2200      	movs	r2, #0
 800456e:	2104      	movs	r1, #4
 8004570:	f7ff ff94 	bl	800449c <std>
 8004574:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004578:	2201      	movs	r2, #1
 800457a:	2109      	movs	r1, #9
 800457c:	f7ff ff8e 	bl	800449c <std>
 8004580:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004584:	2202      	movs	r2, #2
 8004586:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800458a:	2112      	movs	r1, #18
 800458c:	f7ff bf86 	b.w	800449c <std>
 8004590:	20004218 	.word	0x20004218
 8004594:	200040e0 	.word	0x200040e0
 8004598:	08004509 	.word	0x08004509

0800459c <__sfp_lock_acquire>:
 800459c:	4801      	ldr	r0, [pc, #4]	; (80045a4 <__sfp_lock_acquire+0x8>)
 800459e:	f000 b964 	b.w	800486a <__retarget_lock_acquire_recursive>
 80045a2:	bf00      	nop
 80045a4:	20004221 	.word	0x20004221

080045a8 <__sfp_lock_release>:
 80045a8:	4801      	ldr	r0, [pc, #4]	; (80045b0 <__sfp_lock_release+0x8>)
 80045aa:	f000 b95f 	b.w	800486c <__retarget_lock_release_recursive>
 80045ae:	bf00      	nop
 80045b0:	20004221 	.word	0x20004221

080045b4 <__sinit>:
 80045b4:	b510      	push	{r4, lr}
 80045b6:	4604      	mov	r4, r0
 80045b8:	f7ff fff0 	bl	800459c <__sfp_lock_acquire>
 80045bc:	6a23      	ldr	r3, [r4, #32]
 80045be:	b11b      	cbz	r3, 80045c8 <__sinit+0x14>
 80045c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80045c4:	f7ff bff0 	b.w	80045a8 <__sfp_lock_release>
 80045c8:	4b04      	ldr	r3, [pc, #16]	; (80045dc <__sinit+0x28>)
 80045ca:	6223      	str	r3, [r4, #32]
 80045cc:	4b04      	ldr	r3, [pc, #16]	; (80045e0 <__sinit+0x2c>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1f5      	bne.n	80045c0 <__sinit+0xc>
 80045d4:	f7ff ffc4 	bl	8004560 <global_stdio_init.part.0>
 80045d8:	e7f2      	b.n	80045c0 <__sinit+0xc>
 80045da:	bf00      	nop
 80045dc:	08004521 	.word	0x08004521
 80045e0:	20004218 	.word	0x20004218

080045e4 <_fwalk_sglue>:
 80045e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045e8:	4607      	mov	r7, r0
 80045ea:	4688      	mov	r8, r1
 80045ec:	4614      	mov	r4, r2
 80045ee:	2600      	movs	r6, #0
 80045f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80045f4:	f1b9 0901 	subs.w	r9, r9, #1
 80045f8:	d505      	bpl.n	8004606 <_fwalk_sglue+0x22>
 80045fa:	6824      	ldr	r4, [r4, #0]
 80045fc:	2c00      	cmp	r4, #0
 80045fe:	d1f7      	bne.n	80045f0 <_fwalk_sglue+0xc>
 8004600:	4630      	mov	r0, r6
 8004602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004606:	89ab      	ldrh	r3, [r5, #12]
 8004608:	2b01      	cmp	r3, #1
 800460a:	d907      	bls.n	800461c <_fwalk_sglue+0x38>
 800460c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004610:	3301      	adds	r3, #1
 8004612:	d003      	beq.n	800461c <_fwalk_sglue+0x38>
 8004614:	4629      	mov	r1, r5
 8004616:	4638      	mov	r0, r7
 8004618:	47c0      	blx	r8
 800461a:	4306      	orrs	r6, r0
 800461c:	3568      	adds	r5, #104	; 0x68
 800461e:	e7e9      	b.n	80045f4 <_fwalk_sglue+0x10>

08004620 <iprintf>:
 8004620:	b40f      	push	{r0, r1, r2, r3}
 8004622:	b507      	push	{r0, r1, r2, lr}
 8004624:	4906      	ldr	r1, [pc, #24]	; (8004640 <iprintf+0x20>)
 8004626:	ab04      	add	r3, sp, #16
 8004628:	6808      	ldr	r0, [r1, #0]
 800462a:	f853 2b04 	ldr.w	r2, [r3], #4
 800462e:	6881      	ldr	r1, [r0, #8]
 8004630:	9301      	str	r3, [sp, #4]
 8004632:	f000 fa4d 	bl	8004ad0 <_vfiprintf_r>
 8004636:	b003      	add	sp, #12
 8004638:	f85d eb04 	ldr.w	lr, [sp], #4
 800463c:	b004      	add	sp, #16
 800463e:	4770      	bx	lr
 8004640:	20000068 	.word	0x20000068

08004644 <__sread>:
 8004644:	b510      	push	{r4, lr}
 8004646:	460c      	mov	r4, r1
 8004648:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800464c:	f000 f8be 	bl	80047cc <_read_r>
 8004650:	2800      	cmp	r0, #0
 8004652:	bfab      	itete	ge
 8004654:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004656:	89a3      	ldrhlt	r3, [r4, #12]
 8004658:	181b      	addge	r3, r3, r0
 800465a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800465e:	bfac      	ite	ge
 8004660:	6563      	strge	r3, [r4, #84]	; 0x54
 8004662:	81a3      	strhlt	r3, [r4, #12]
 8004664:	bd10      	pop	{r4, pc}

08004666 <__swrite>:
 8004666:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800466a:	461f      	mov	r7, r3
 800466c:	898b      	ldrh	r3, [r1, #12]
 800466e:	05db      	lsls	r3, r3, #23
 8004670:	4605      	mov	r5, r0
 8004672:	460c      	mov	r4, r1
 8004674:	4616      	mov	r6, r2
 8004676:	d505      	bpl.n	8004684 <__swrite+0x1e>
 8004678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800467c:	2302      	movs	r3, #2
 800467e:	2200      	movs	r2, #0
 8004680:	f000 f892 	bl	80047a8 <_lseek_r>
 8004684:	89a3      	ldrh	r3, [r4, #12]
 8004686:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800468a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800468e:	81a3      	strh	r3, [r4, #12]
 8004690:	4632      	mov	r2, r6
 8004692:	463b      	mov	r3, r7
 8004694:	4628      	mov	r0, r5
 8004696:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800469a:	f000 b8a9 	b.w	80047f0 <_write_r>

0800469e <__sseek>:
 800469e:	b510      	push	{r4, lr}
 80046a0:	460c      	mov	r4, r1
 80046a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046a6:	f000 f87f 	bl	80047a8 <_lseek_r>
 80046aa:	1c43      	adds	r3, r0, #1
 80046ac:	89a3      	ldrh	r3, [r4, #12]
 80046ae:	bf15      	itete	ne
 80046b0:	6560      	strne	r0, [r4, #84]	; 0x54
 80046b2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80046b6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80046ba:	81a3      	strheq	r3, [r4, #12]
 80046bc:	bf18      	it	ne
 80046be:	81a3      	strhne	r3, [r4, #12]
 80046c0:	bd10      	pop	{r4, pc}

080046c2 <__sclose>:
 80046c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046c6:	f000 b809 	b.w	80046dc <_close_r>

080046ca <memset>:
 80046ca:	4402      	add	r2, r0
 80046cc:	4603      	mov	r3, r0
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d100      	bne.n	80046d4 <memset+0xa>
 80046d2:	4770      	bx	lr
 80046d4:	f803 1b01 	strb.w	r1, [r3], #1
 80046d8:	e7f9      	b.n	80046ce <memset+0x4>
	...

080046dc <_close_r>:
 80046dc:	b538      	push	{r3, r4, r5, lr}
 80046de:	4d06      	ldr	r5, [pc, #24]	; (80046f8 <_close_r+0x1c>)
 80046e0:	2300      	movs	r3, #0
 80046e2:	4604      	mov	r4, r0
 80046e4:	4608      	mov	r0, r1
 80046e6:	602b      	str	r3, [r5, #0]
 80046e8:	f7fc fa63 	bl	8000bb2 <_close>
 80046ec:	1c43      	adds	r3, r0, #1
 80046ee:	d102      	bne.n	80046f6 <_close_r+0x1a>
 80046f0:	682b      	ldr	r3, [r5, #0]
 80046f2:	b103      	cbz	r3, 80046f6 <_close_r+0x1a>
 80046f4:	6023      	str	r3, [r4, #0]
 80046f6:	bd38      	pop	{r3, r4, r5, pc}
 80046f8:	2000421c 	.word	0x2000421c

080046fc <_reclaim_reent>:
 80046fc:	4b29      	ldr	r3, [pc, #164]	; (80047a4 <_reclaim_reent+0xa8>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4283      	cmp	r3, r0
 8004702:	b570      	push	{r4, r5, r6, lr}
 8004704:	4604      	mov	r4, r0
 8004706:	d04b      	beq.n	80047a0 <_reclaim_reent+0xa4>
 8004708:	69c3      	ldr	r3, [r0, #28]
 800470a:	b143      	cbz	r3, 800471e <_reclaim_reent+0x22>
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d144      	bne.n	800479c <_reclaim_reent+0xa0>
 8004712:	69e3      	ldr	r3, [r4, #28]
 8004714:	6819      	ldr	r1, [r3, #0]
 8004716:	b111      	cbz	r1, 800471e <_reclaim_reent+0x22>
 8004718:	4620      	mov	r0, r4
 800471a:	f000 f8b7 	bl	800488c <_free_r>
 800471e:	6961      	ldr	r1, [r4, #20]
 8004720:	b111      	cbz	r1, 8004728 <_reclaim_reent+0x2c>
 8004722:	4620      	mov	r0, r4
 8004724:	f000 f8b2 	bl	800488c <_free_r>
 8004728:	69e1      	ldr	r1, [r4, #28]
 800472a:	b111      	cbz	r1, 8004732 <_reclaim_reent+0x36>
 800472c:	4620      	mov	r0, r4
 800472e:	f000 f8ad 	bl	800488c <_free_r>
 8004732:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8004734:	b111      	cbz	r1, 800473c <_reclaim_reent+0x40>
 8004736:	4620      	mov	r0, r4
 8004738:	f000 f8a8 	bl	800488c <_free_r>
 800473c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800473e:	b111      	cbz	r1, 8004746 <_reclaim_reent+0x4a>
 8004740:	4620      	mov	r0, r4
 8004742:	f000 f8a3 	bl	800488c <_free_r>
 8004746:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004748:	b111      	cbz	r1, 8004750 <_reclaim_reent+0x54>
 800474a:	4620      	mov	r0, r4
 800474c:	f000 f89e 	bl	800488c <_free_r>
 8004750:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004752:	b111      	cbz	r1, 800475a <_reclaim_reent+0x5e>
 8004754:	4620      	mov	r0, r4
 8004756:	f000 f899 	bl	800488c <_free_r>
 800475a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800475c:	b111      	cbz	r1, 8004764 <_reclaim_reent+0x68>
 800475e:	4620      	mov	r0, r4
 8004760:	f000 f894 	bl	800488c <_free_r>
 8004764:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8004766:	b111      	cbz	r1, 800476e <_reclaim_reent+0x72>
 8004768:	4620      	mov	r0, r4
 800476a:	f000 f88f 	bl	800488c <_free_r>
 800476e:	6a23      	ldr	r3, [r4, #32]
 8004770:	b1b3      	cbz	r3, 80047a0 <_reclaim_reent+0xa4>
 8004772:	4620      	mov	r0, r4
 8004774:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004778:	4718      	bx	r3
 800477a:	5949      	ldr	r1, [r1, r5]
 800477c:	b941      	cbnz	r1, 8004790 <_reclaim_reent+0x94>
 800477e:	3504      	adds	r5, #4
 8004780:	69e3      	ldr	r3, [r4, #28]
 8004782:	2d80      	cmp	r5, #128	; 0x80
 8004784:	68d9      	ldr	r1, [r3, #12]
 8004786:	d1f8      	bne.n	800477a <_reclaim_reent+0x7e>
 8004788:	4620      	mov	r0, r4
 800478a:	f000 f87f 	bl	800488c <_free_r>
 800478e:	e7c0      	b.n	8004712 <_reclaim_reent+0x16>
 8004790:	680e      	ldr	r6, [r1, #0]
 8004792:	4620      	mov	r0, r4
 8004794:	f000 f87a 	bl	800488c <_free_r>
 8004798:	4631      	mov	r1, r6
 800479a:	e7ef      	b.n	800477c <_reclaim_reent+0x80>
 800479c:	2500      	movs	r5, #0
 800479e:	e7ef      	b.n	8004780 <_reclaim_reent+0x84>
 80047a0:	bd70      	pop	{r4, r5, r6, pc}
 80047a2:	bf00      	nop
 80047a4:	20000068 	.word	0x20000068

080047a8 <_lseek_r>:
 80047a8:	b538      	push	{r3, r4, r5, lr}
 80047aa:	4d07      	ldr	r5, [pc, #28]	; (80047c8 <_lseek_r+0x20>)
 80047ac:	4604      	mov	r4, r0
 80047ae:	4608      	mov	r0, r1
 80047b0:	4611      	mov	r1, r2
 80047b2:	2200      	movs	r2, #0
 80047b4:	602a      	str	r2, [r5, #0]
 80047b6:	461a      	mov	r2, r3
 80047b8:	f7fc fa22 	bl	8000c00 <_lseek>
 80047bc:	1c43      	adds	r3, r0, #1
 80047be:	d102      	bne.n	80047c6 <_lseek_r+0x1e>
 80047c0:	682b      	ldr	r3, [r5, #0]
 80047c2:	b103      	cbz	r3, 80047c6 <_lseek_r+0x1e>
 80047c4:	6023      	str	r3, [r4, #0]
 80047c6:	bd38      	pop	{r3, r4, r5, pc}
 80047c8:	2000421c 	.word	0x2000421c

080047cc <_read_r>:
 80047cc:	b538      	push	{r3, r4, r5, lr}
 80047ce:	4d07      	ldr	r5, [pc, #28]	; (80047ec <_read_r+0x20>)
 80047d0:	4604      	mov	r4, r0
 80047d2:	4608      	mov	r0, r1
 80047d4:	4611      	mov	r1, r2
 80047d6:	2200      	movs	r2, #0
 80047d8:	602a      	str	r2, [r5, #0]
 80047da:	461a      	mov	r2, r3
 80047dc:	f7fc f9cc 	bl	8000b78 <_read>
 80047e0:	1c43      	adds	r3, r0, #1
 80047e2:	d102      	bne.n	80047ea <_read_r+0x1e>
 80047e4:	682b      	ldr	r3, [r5, #0]
 80047e6:	b103      	cbz	r3, 80047ea <_read_r+0x1e>
 80047e8:	6023      	str	r3, [r4, #0]
 80047ea:	bd38      	pop	{r3, r4, r5, pc}
 80047ec:	2000421c 	.word	0x2000421c

080047f0 <_write_r>:
 80047f0:	b538      	push	{r3, r4, r5, lr}
 80047f2:	4d07      	ldr	r5, [pc, #28]	; (8004810 <_write_r+0x20>)
 80047f4:	4604      	mov	r4, r0
 80047f6:	4608      	mov	r0, r1
 80047f8:	4611      	mov	r1, r2
 80047fa:	2200      	movs	r2, #0
 80047fc:	602a      	str	r2, [r5, #0]
 80047fe:	461a      	mov	r2, r3
 8004800:	f7fb fef5 	bl	80005ee <_write>
 8004804:	1c43      	adds	r3, r0, #1
 8004806:	d102      	bne.n	800480e <_write_r+0x1e>
 8004808:	682b      	ldr	r3, [r5, #0]
 800480a:	b103      	cbz	r3, 800480e <_write_r+0x1e>
 800480c:	6023      	str	r3, [r4, #0]
 800480e:	bd38      	pop	{r3, r4, r5, pc}
 8004810:	2000421c 	.word	0x2000421c

08004814 <__errno>:
 8004814:	4b01      	ldr	r3, [pc, #4]	; (800481c <__errno+0x8>)
 8004816:	6818      	ldr	r0, [r3, #0]
 8004818:	4770      	bx	lr
 800481a:	bf00      	nop
 800481c:	20000068 	.word	0x20000068

08004820 <__libc_init_array>:
 8004820:	b570      	push	{r4, r5, r6, lr}
 8004822:	4d0d      	ldr	r5, [pc, #52]	; (8004858 <__libc_init_array+0x38>)
 8004824:	4c0d      	ldr	r4, [pc, #52]	; (800485c <__libc_init_array+0x3c>)
 8004826:	1b64      	subs	r4, r4, r5
 8004828:	10a4      	asrs	r4, r4, #2
 800482a:	2600      	movs	r6, #0
 800482c:	42a6      	cmp	r6, r4
 800482e:	d109      	bne.n	8004844 <__libc_init_array+0x24>
 8004830:	4d0b      	ldr	r5, [pc, #44]	; (8004860 <__libc_init_array+0x40>)
 8004832:	4c0c      	ldr	r4, [pc, #48]	; (8004864 <__libc_init_array+0x44>)
 8004834:	f000 fdce 	bl	80053d4 <_init>
 8004838:	1b64      	subs	r4, r4, r5
 800483a:	10a4      	asrs	r4, r4, #2
 800483c:	2600      	movs	r6, #0
 800483e:	42a6      	cmp	r6, r4
 8004840:	d105      	bne.n	800484e <__libc_init_array+0x2e>
 8004842:	bd70      	pop	{r4, r5, r6, pc}
 8004844:	f855 3b04 	ldr.w	r3, [r5], #4
 8004848:	4798      	blx	r3
 800484a:	3601      	adds	r6, #1
 800484c:	e7ee      	b.n	800482c <__libc_init_array+0xc>
 800484e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004852:	4798      	blx	r3
 8004854:	3601      	adds	r6, #1
 8004856:	e7f2      	b.n	800483e <__libc_init_array+0x1e>
 8004858:	08005524 	.word	0x08005524
 800485c:	08005524 	.word	0x08005524
 8004860:	08005524 	.word	0x08005524
 8004864:	08005528 	.word	0x08005528

08004868 <__retarget_lock_init_recursive>:
 8004868:	4770      	bx	lr

0800486a <__retarget_lock_acquire_recursive>:
 800486a:	4770      	bx	lr

0800486c <__retarget_lock_release_recursive>:
 800486c:	4770      	bx	lr

0800486e <memcpy>:
 800486e:	440a      	add	r2, r1
 8004870:	4291      	cmp	r1, r2
 8004872:	f100 33ff 	add.w	r3, r0, #4294967295
 8004876:	d100      	bne.n	800487a <memcpy+0xc>
 8004878:	4770      	bx	lr
 800487a:	b510      	push	{r4, lr}
 800487c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004880:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004884:	4291      	cmp	r1, r2
 8004886:	d1f9      	bne.n	800487c <memcpy+0xe>
 8004888:	bd10      	pop	{r4, pc}
	...

0800488c <_free_r>:
 800488c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800488e:	2900      	cmp	r1, #0
 8004890:	d044      	beq.n	800491c <_free_r+0x90>
 8004892:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004896:	9001      	str	r0, [sp, #4]
 8004898:	2b00      	cmp	r3, #0
 800489a:	f1a1 0404 	sub.w	r4, r1, #4
 800489e:	bfb8      	it	lt
 80048a0:	18e4      	addlt	r4, r4, r3
 80048a2:	f000 f8df 	bl	8004a64 <__malloc_lock>
 80048a6:	4a1e      	ldr	r2, [pc, #120]	; (8004920 <_free_r+0x94>)
 80048a8:	9801      	ldr	r0, [sp, #4]
 80048aa:	6813      	ldr	r3, [r2, #0]
 80048ac:	b933      	cbnz	r3, 80048bc <_free_r+0x30>
 80048ae:	6063      	str	r3, [r4, #4]
 80048b0:	6014      	str	r4, [r2, #0]
 80048b2:	b003      	add	sp, #12
 80048b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80048b8:	f000 b8da 	b.w	8004a70 <__malloc_unlock>
 80048bc:	42a3      	cmp	r3, r4
 80048be:	d908      	bls.n	80048d2 <_free_r+0x46>
 80048c0:	6825      	ldr	r5, [r4, #0]
 80048c2:	1961      	adds	r1, r4, r5
 80048c4:	428b      	cmp	r3, r1
 80048c6:	bf01      	itttt	eq
 80048c8:	6819      	ldreq	r1, [r3, #0]
 80048ca:	685b      	ldreq	r3, [r3, #4]
 80048cc:	1949      	addeq	r1, r1, r5
 80048ce:	6021      	streq	r1, [r4, #0]
 80048d0:	e7ed      	b.n	80048ae <_free_r+0x22>
 80048d2:	461a      	mov	r2, r3
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	b10b      	cbz	r3, 80048dc <_free_r+0x50>
 80048d8:	42a3      	cmp	r3, r4
 80048da:	d9fa      	bls.n	80048d2 <_free_r+0x46>
 80048dc:	6811      	ldr	r1, [r2, #0]
 80048de:	1855      	adds	r5, r2, r1
 80048e0:	42a5      	cmp	r5, r4
 80048e2:	d10b      	bne.n	80048fc <_free_r+0x70>
 80048e4:	6824      	ldr	r4, [r4, #0]
 80048e6:	4421      	add	r1, r4
 80048e8:	1854      	adds	r4, r2, r1
 80048ea:	42a3      	cmp	r3, r4
 80048ec:	6011      	str	r1, [r2, #0]
 80048ee:	d1e0      	bne.n	80048b2 <_free_r+0x26>
 80048f0:	681c      	ldr	r4, [r3, #0]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	6053      	str	r3, [r2, #4]
 80048f6:	440c      	add	r4, r1
 80048f8:	6014      	str	r4, [r2, #0]
 80048fa:	e7da      	b.n	80048b2 <_free_r+0x26>
 80048fc:	d902      	bls.n	8004904 <_free_r+0x78>
 80048fe:	230c      	movs	r3, #12
 8004900:	6003      	str	r3, [r0, #0]
 8004902:	e7d6      	b.n	80048b2 <_free_r+0x26>
 8004904:	6825      	ldr	r5, [r4, #0]
 8004906:	1961      	adds	r1, r4, r5
 8004908:	428b      	cmp	r3, r1
 800490a:	bf04      	itt	eq
 800490c:	6819      	ldreq	r1, [r3, #0]
 800490e:	685b      	ldreq	r3, [r3, #4]
 8004910:	6063      	str	r3, [r4, #4]
 8004912:	bf04      	itt	eq
 8004914:	1949      	addeq	r1, r1, r5
 8004916:	6021      	streq	r1, [r4, #0]
 8004918:	6054      	str	r4, [r2, #4]
 800491a:	e7ca      	b.n	80048b2 <_free_r+0x26>
 800491c:	b003      	add	sp, #12
 800491e:	bd30      	pop	{r4, r5, pc}
 8004920:	20004224 	.word	0x20004224

08004924 <sbrk_aligned>:
 8004924:	b570      	push	{r4, r5, r6, lr}
 8004926:	4e0e      	ldr	r6, [pc, #56]	; (8004960 <sbrk_aligned+0x3c>)
 8004928:	460c      	mov	r4, r1
 800492a:	6831      	ldr	r1, [r6, #0]
 800492c:	4605      	mov	r5, r0
 800492e:	b911      	cbnz	r1, 8004936 <sbrk_aligned+0x12>
 8004930:	f000 fcbc 	bl	80052ac <_sbrk_r>
 8004934:	6030      	str	r0, [r6, #0]
 8004936:	4621      	mov	r1, r4
 8004938:	4628      	mov	r0, r5
 800493a:	f000 fcb7 	bl	80052ac <_sbrk_r>
 800493e:	1c43      	adds	r3, r0, #1
 8004940:	d00a      	beq.n	8004958 <sbrk_aligned+0x34>
 8004942:	1cc4      	adds	r4, r0, #3
 8004944:	f024 0403 	bic.w	r4, r4, #3
 8004948:	42a0      	cmp	r0, r4
 800494a:	d007      	beq.n	800495c <sbrk_aligned+0x38>
 800494c:	1a21      	subs	r1, r4, r0
 800494e:	4628      	mov	r0, r5
 8004950:	f000 fcac 	bl	80052ac <_sbrk_r>
 8004954:	3001      	adds	r0, #1
 8004956:	d101      	bne.n	800495c <sbrk_aligned+0x38>
 8004958:	f04f 34ff 	mov.w	r4, #4294967295
 800495c:	4620      	mov	r0, r4
 800495e:	bd70      	pop	{r4, r5, r6, pc}
 8004960:	20004228 	.word	0x20004228

08004964 <_malloc_r>:
 8004964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004968:	1ccd      	adds	r5, r1, #3
 800496a:	f025 0503 	bic.w	r5, r5, #3
 800496e:	3508      	adds	r5, #8
 8004970:	2d0c      	cmp	r5, #12
 8004972:	bf38      	it	cc
 8004974:	250c      	movcc	r5, #12
 8004976:	2d00      	cmp	r5, #0
 8004978:	4607      	mov	r7, r0
 800497a:	db01      	blt.n	8004980 <_malloc_r+0x1c>
 800497c:	42a9      	cmp	r1, r5
 800497e:	d905      	bls.n	800498c <_malloc_r+0x28>
 8004980:	230c      	movs	r3, #12
 8004982:	603b      	str	r3, [r7, #0]
 8004984:	2600      	movs	r6, #0
 8004986:	4630      	mov	r0, r6
 8004988:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800498c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004a60 <_malloc_r+0xfc>
 8004990:	f000 f868 	bl	8004a64 <__malloc_lock>
 8004994:	f8d8 3000 	ldr.w	r3, [r8]
 8004998:	461c      	mov	r4, r3
 800499a:	bb5c      	cbnz	r4, 80049f4 <_malloc_r+0x90>
 800499c:	4629      	mov	r1, r5
 800499e:	4638      	mov	r0, r7
 80049a0:	f7ff ffc0 	bl	8004924 <sbrk_aligned>
 80049a4:	1c43      	adds	r3, r0, #1
 80049a6:	4604      	mov	r4, r0
 80049a8:	d155      	bne.n	8004a56 <_malloc_r+0xf2>
 80049aa:	f8d8 4000 	ldr.w	r4, [r8]
 80049ae:	4626      	mov	r6, r4
 80049b0:	2e00      	cmp	r6, #0
 80049b2:	d145      	bne.n	8004a40 <_malloc_r+0xdc>
 80049b4:	2c00      	cmp	r4, #0
 80049b6:	d048      	beq.n	8004a4a <_malloc_r+0xe6>
 80049b8:	6823      	ldr	r3, [r4, #0]
 80049ba:	4631      	mov	r1, r6
 80049bc:	4638      	mov	r0, r7
 80049be:	eb04 0903 	add.w	r9, r4, r3
 80049c2:	f000 fc73 	bl	80052ac <_sbrk_r>
 80049c6:	4581      	cmp	r9, r0
 80049c8:	d13f      	bne.n	8004a4a <_malloc_r+0xe6>
 80049ca:	6821      	ldr	r1, [r4, #0]
 80049cc:	1a6d      	subs	r5, r5, r1
 80049ce:	4629      	mov	r1, r5
 80049d0:	4638      	mov	r0, r7
 80049d2:	f7ff ffa7 	bl	8004924 <sbrk_aligned>
 80049d6:	3001      	adds	r0, #1
 80049d8:	d037      	beq.n	8004a4a <_malloc_r+0xe6>
 80049da:	6823      	ldr	r3, [r4, #0]
 80049dc:	442b      	add	r3, r5
 80049de:	6023      	str	r3, [r4, #0]
 80049e0:	f8d8 3000 	ldr.w	r3, [r8]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d038      	beq.n	8004a5a <_malloc_r+0xf6>
 80049e8:	685a      	ldr	r2, [r3, #4]
 80049ea:	42a2      	cmp	r2, r4
 80049ec:	d12b      	bne.n	8004a46 <_malloc_r+0xe2>
 80049ee:	2200      	movs	r2, #0
 80049f0:	605a      	str	r2, [r3, #4]
 80049f2:	e00f      	b.n	8004a14 <_malloc_r+0xb0>
 80049f4:	6822      	ldr	r2, [r4, #0]
 80049f6:	1b52      	subs	r2, r2, r5
 80049f8:	d41f      	bmi.n	8004a3a <_malloc_r+0xd6>
 80049fa:	2a0b      	cmp	r2, #11
 80049fc:	d917      	bls.n	8004a2e <_malloc_r+0xca>
 80049fe:	1961      	adds	r1, r4, r5
 8004a00:	42a3      	cmp	r3, r4
 8004a02:	6025      	str	r5, [r4, #0]
 8004a04:	bf18      	it	ne
 8004a06:	6059      	strne	r1, [r3, #4]
 8004a08:	6863      	ldr	r3, [r4, #4]
 8004a0a:	bf08      	it	eq
 8004a0c:	f8c8 1000 	streq.w	r1, [r8]
 8004a10:	5162      	str	r2, [r4, r5]
 8004a12:	604b      	str	r3, [r1, #4]
 8004a14:	4638      	mov	r0, r7
 8004a16:	f104 060b 	add.w	r6, r4, #11
 8004a1a:	f000 f829 	bl	8004a70 <__malloc_unlock>
 8004a1e:	f026 0607 	bic.w	r6, r6, #7
 8004a22:	1d23      	adds	r3, r4, #4
 8004a24:	1af2      	subs	r2, r6, r3
 8004a26:	d0ae      	beq.n	8004986 <_malloc_r+0x22>
 8004a28:	1b9b      	subs	r3, r3, r6
 8004a2a:	50a3      	str	r3, [r4, r2]
 8004a2c:	e7ab      	b.n	8004986 <_malloc_r+0x22>
 8004a2e:	42a3      	cmp	r3, r4
 8004a30:	6862      	ldr	r2, [r4, #4]
 8004a32:	d1dd      	bne.n	80049f0 <_malloc_r+0x8c>
 8004a34:	f8c8 2000 	str.w	r2, [r8]
 8004a38:	e7ec      	b.n	8004a14 <_malloc_r+0xb0>
 8004a3a:	4623      	mov	r3, r4
 8004a3c:	6864      	ldr	r4, [r4, #4]
 8004a3e:	e7ac      	b.n	800499a <_malloc_r+0x36>
 8004a40:	4634      	mov	r4, r6
 8004a42:	6876      	ldr	r6, [r6, #4]
 8004a44:	e7b4      	b.n	80049b0 <_malloc_r+0x4c>
 8004a46:	4613      	mov	r3, r2
 8004a48:	e7cc      	b.n	80049e4 <_malloc_r+0x80>
 8004a4a:	230c      	movs	r3, #12
 8004a4c:	603b      	str	r3, [r7, #0]
 8004a4e:	4638      	mov	r0, r7
 8004a50:	f000 f80e 	bl	8004a70 <__malloc_unlock>
 8004a54:	e797      	b.n	8004986 <_malloc_r+0x22>
 8004a56:	6025      	str	r5, [r4, #0]
 8004a58:	e7dc      	b.n	8004a14 <_malloc_r+0xb0>
 8004a5a:	605b      	str	r3, [r3, #4]
 8004a5c:	deff      	udf	#255	; 0xff
 8004a5e:	bf00      	nop
 8004a60:	20004224 	.word	0x20004224

08004a64 <__malloc_lock>:
 8004a64:	4801      	ldr	r0, [pc, #4]	; (8004a6c <__malloc_lock+0x8>)
 8004a66:	f7ff bf00 	b.w	800486a <__retarget_lock_acquire_recursive>
 8004a6a:	bf00      	nop
 8004a6c:	20004220 	.word	0x20004220

08004a70 <__malloc_unlock>:
 8004a70:	4801      	ldr	r0, [pc, #4]	; (8004a78 <__malloc_unlock+0x8>)
 8004a72:	f7ff befb 	b.w	800486c <__retarget_lock_release_recursive>
 8004a76:	bf00      	nop
 8004a78:	20004220 	.word	0x20004220

08004a7c <__sfputc_r>:
 8004a7c:	6893      	ldr	r3, [r2, #8]
 8004a7e:	3b01      	subs	r3, #1
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	b410      	push	{r4}
 8004a84:	6093      	str	r3, [r2, #8]
 8004a86:	da08      	bge.n	8004a9a <__sfputc_r+0x1e>
 8004a88:	6994      	ldr	r4, [r2, #24]
 8004a8a:	42a3      	cmp	r3, r4
 8004a8c:	db01      	blt.n	8004a92 <__sfputc_r+0x16>
 8004a8e:	290a      	cmp	r1, #10
 8004a90:	d103      	bne.n	8004a9a <__sfputc_r+0x1e>
 8004a92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a96:	f000 bb73 	b.w	8005180 <__swbuf_r>
 8004a9a:	6813      	ldr	r3, [r2, #0]
 8004a9c:	1c58      	adds	r0, r3, #1
 8004a9e:	6010      	str	r0, [r2, #0]
 8004aa0:	7019      	strb	r1, [r3, #0]
 8004aa2:	4608      	mov	r0, r1
 8004aa4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004aa8:	4770      	bx	lr

08004aaa <__sfputs_r>:
 8004aaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aac:	4606      	mov	r6, r0
 8004aae:	460f      	mov	r7, r1
 8004ab0:	4614      	mov	r4, r2
 8004ab2:	18d5      	adds	r5, r2, r3
 8004ab4:	42ac      	cmp	r4, r5
 8004ab6:	d101      	bne.n	8004abc <__sfputs_r+0x12>
 8004ab8:	2000      	movs	r0, #0
 8004aba:	e007      	b.n	8004acc <__sfputs_r+0x22>
 8004abc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ac0:	463a      	mov	r2, r7
 8004ac2:	4630      	mov	r0, r6
 8004ac4:	f7ff ffda 	bl	8004a7c <__sfputc_r>
 8004ac8:	1c43      	adds	r3, r0, #1
 8004aca:	d1f3      	bne.n	8004ab4 <__sfputs_r+0xa>
 8004acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ad0 <_vfiprintf_r>:
 8004ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ad4:	460d      	mov	r5, r1
 8004ad6:	b09d      	sub	sp, #116	; 0x74
 8004ad8:	4614      	mov	r4, r2
 8004ada:	4698      	mov	r8, r3
 8004adc:	4606      	mov	r6, r0
 8004ade:	b118      	cbz	r0, 8004ae8 <_vfiprintf_r+0x18>
 8004ae0:	6a03      	ldr	r3, [r0, #32]
 8004ae2:	b90b      	cbnz	r3, 8004ae8 <_vfiprintf_r+0x18>
 8004ae4:	f7ff fd66 	bl	80045b4 <__sinit>
 8004ae8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004aea:	07d9      	lsls	r1, r3, #31
 8004aec:	d405      	bmi.n	8004afa <_vfiprintf_r+0x2a>
 8004aee:	89ab      	ldrh	r3, [r5, #12]
 8004af0:	059a      	lsls	r2, r3, #22
 8004af2:	d402      	bmi.n	8004afa <_vfiprintf_r+0x2a>
 8004af4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004af6:	f7ff feb8 	bl	800486a <__retarget_lock_acquire_recursive>
 8004afa:	89ab      	ldrh	r3, [r5, #12]
 8004afc:	071b      	lsls	r3, r3, #28
 8004afe:	d501      	bpl.n	8004b04 <_vfiprintf_r+0x34>
 8004b00:	692b      	ldr	r3, [r5, #16]
 8004b02:	b99b      	cbnz	r3, 8004b2c <_vfiprintf_r+0x5c>
 8004b04:	4629      	mov	r1, r5
 8004b06:	4630      	mov	r0, r6
 8004b08:	f000 fb78 	bl	80051fc <__swsetup_r>
 8004b0c:	b170      	cbz	r0, 8004b2c <_vfiprintf_r+0x5c>
 8004b0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b10:	07dc      	lsls	r4, r3, #31
 8004b12:	d504      	bpl.n	8004b1e <_vfiprintf_r+0x4e>
 8004b14:	f04f 30ff 	mov.w	r0, #4294967295
 8004b18:	b01d      	add	sp, #116	; 0x74
 8004b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b1e:	89ab      	ldrh	r3, [r5, #12]
 8004b20:	0598      	lsls	r0, r3, #22
 8004b22:	d4f7      	bmi.n	8004b14 <_vfiprintf_r+0x44>
 8004b24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b26:	f7ff fea1 	bl	800486c <__retarget_lock_release_recursive>
 8004b2a:	e7f3      	b.n	8004b14 <_vfiprintf_r+0x44>
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	9309      	str	r3, [sp, #36]	; 0x24
 8004b30:	2320      	movs	r3, #32
 8004b32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b36:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b3a:	2330      	movs	r3, #48	; 0x30
 8004b3c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8004cf0 <_vfiprintf_r+0x220>
 8004b40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b44:	f04f 0901 	mov.w	r9, #1
 8004b48:	4623      	mov	r3, r4
 8004b4a:	469a      	mov	sl, r3
 8004b4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b50:	b10a      	cbz	r2, 8004b56 <_vfiprintf_r+0x86>
 8004b52:	2a25      	cmp	r2, #37	; 0x25
 8004b54:	d1f9      	bne.n	8004b4a <_vfiprintf_r+0x7a>
 8004b56:	ebba 0b04 	subs.w	fp, sl, r4
 8004b5a:	d00b      	beq.n	8004b74 <_vfiprintf_r+0xa4>
 8004b5c:	465b      	mov	r3, fp
 8004b5e:	4622      	mov	r2, r4
 8004b60:	4629      	mov	r1, r5
 8004b62:	4630      	mov	r0, r6
 8004b64:	f7ff ffa1 	bl	8004aaa <__sfputs_r>
 8004b68:	3001      	adds	r0, #1
 8004b6a:	f000 80a9 	beq.w	8004cc0 <_vfiprintf_r+0x1f0>
 8004b6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b70:	445a      	add	r2, fp
 8004b72:	9209      	str	r2, [sp, #36]	; 0x24
 8004b74:	f89a 3000 	ldrb.w	r3, [sl]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	f000 80a1 	beq.w	8004cc0 <_vfiprintf_r+0x1f0>
 8004b7e:	2300      	movs	r3, #0
 8004b80:	f04f 32ff 	mov.w	r2, #4294967295
 8004b84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b88:	f10a 0a01 	add.w	sl, sl, #1
 8004b8c:	9304      	str	r3, [sp, #16]
 8004b8e:	9307      	str	r3, [sp, #28]
 8004b90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b94:	931a      	str	r3, [sp, #104]	; 0x68
 8004b96:	4654      	mov	r4, sl
 8004b98:	2205      	movs	r2, #5
 8004b9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b9e:	4854      	ldr	r0, [pc, #336]	; (8004cf0 <_vfiprintf_r+0x220>)
 8004ba0:	f7fb fb16 	bl	80001d0 <memchr>
 8004ba4:	9a04      	ldr	r2, [sp, #16]
 8004ba6:	b9d8      	cbnz	r0, 8004be0 <_vfiprintf_r+0x110>
 8004ba8:	06d1      	lsls	r1, r2, #27
 8004baa:	bf44      	itt	mi
 8004bac:	2320      	movmi	r3, #32
 8004bae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bb2:	0713      	lsls	r3, r2, #28
 8004bb4:	bf44      	itt	mi
 8004bb6:	232b      	movmi	r3, #43	; 0x2b
 8004bb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bbc:	f89a 3000 	ldrb.w	r3, [sl]
 8004bc0:	2b2a      	cmp	r3, #42	; 0x2a
 8004bc2:	d015      	beq.n	8004bf0 <_vfiprintf_r+0x120>
 8004bc4:	9a07      	ldr	r2, [sp, #28]
 8004bc6:	4654      	mov	r4, sl
 8004bc8:	2000      	movs	r0, #0
 8004bca:	f04f 0c0a 	mov.w	ip, #10
 8004bce:	4621      	mov	r1, r4
 8004bd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bd4:	3b30      	subs	r3, #48	; 0x30
 8004bd6:	2b09      	cmp	r3, #9
 8004bd8:	d94d      	bls.n	8004c76 <_vfiprintf_r+0x1a6>
 8004bda:	b1b0      	cbz	r0, 8004c0a <_vfiprintf_r+0x13a>
 8004bdc:	9207      	str	r2, [sp, #28]
 8004bde:	e014      	b.n	8004c0a <_vfiprintf_r+0x13a>
 8004be0:	eba0 0308 	sub.w	r3, r0, r8
 8004be4:	fa09 f303 	lsl.w	r3, r9, r3
 8004be8:	4313      	orrs	r3, r2
 8004bea:	9304      	str	r3, [sp, #16]
 8004bec:	46a2      	mov	sl, r4
 8004bee:	e7d2      	b.n	8004b96 <_vfiprintf_r+0xc6>
 8004bf0:	9b03      	ldr	r3, [sp, #12]
 8004bf2:	1d19      	adds	r1, r3, #4
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	9103      	str	r1, [sp, #12]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	bfbb      	ittet	lt
 8004bfc:	425b      	neglt	r3, r3
 8004bfe:	f042 0202 	orrlt.w	r2, r2, #2
 8004c02:	9307      	strge	r3, [sp, #28]
 8004c04:	9307      	strlt	r3, [sp, #28]
 8004c06:	bfb8      	it	lt
 8004c08:	9204      	strlt	r2, [sp, #16]
 8004c0a:	7823      	ldrb	r3, [r4, #0]
 8004c0c:	2b2e      	cmp	r3, #46	; 0x2e
 8004c0e:	d10c      	bne.n	8004c2a <_vfiprintf_r+0x15a>
 8004c10:	7863      	ldrb	r3, [r4, #1]
 8004c12:	2b2a      	cmp	r3, #42	; 0x2a
 8004c14:	d134      	bne.n	8004c80 <_vfiprintf_r+0x1b0>
 8004c16:	9b03      	ldr	r3, [sp, #12]
 8004c18:	1d1a      	adds	r2, r3, #4
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	9203      	str	r2, [sp, #12]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	bfb8      	it	lt
 8004c22:	f04f 33ff 	movlt.w	r3, #4294967295
 8004c26:	3402      	adds	r4, #2
 8004c28:	9305      	str	r3, [sp, #20]
 8004c2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8004d00 <_vfiprintf_r+0x230>
 8004c2e:	7821      	ldrb	r1, [r4, #0]
 8004c30:	2203      	movs	r2, #3
 8004c32:	4650      	mov	r0, sl
 8004c34:	f7fb facc 	bl	80001d0 <memchr>
 8004c38:	b138      	cbz	r0, 8004c4a <_vfiprintf_r+0x17a>
 8004c3a:	9b04      	ldr	r3, [sp, #16]
 8004c3c:	eba0 000a 	sub.w	r0, r0, sl
 8004c40:	2240      	movs	r2, #64	; 0x40
 8004c42:	4082      	lsls	r2, r0
 8004c44:	4313      	orrs	r3, r2
 8004c46:	3401      	adds	r4, #1
 8004c48:	9304      	str	r3, [sp, #16]
 8004c4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c4e:	4829      	ldr	r0, [pc, #164]	; (8004cf4 <_vfiprintf_r+0x224>)
 8004c50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c54:	2206      	movs	r2, #6
 8004c56:	f7fb fabb 	bl	80001d0 <memchr>
 8004c5a:	2800      	cmp	r0, #0
 8004c5c:	d03f      	beq.n	8004cde <_vfiprintf_r+0x20e>
 8004c5e:	4b26      	ldr	r3, [pc, #152]	; (8004cf8 <_vfiprintf_r+0x228>)
 8004c60:	bb1b      	cbnz	r3, 8004caa <_vfiprintf_r+0x1da>
 8004c62:	9b03      	ldr	r3, [sp, #12]
 8004c64:	3307      	adds	r3, #7
 8004c66:	f023 0307 	bic.w	r3, r3, #7
 8004c6a:	3308      	adds	r3, #8
 8004c6c:	9303      	str	r3, [sp, #12]
 8004c6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c70:	443b      	add	r3, r7
 8004c72:	9309      	str	r3, [sp, #36]	; 0x24
 8004c74:	e768      	b.n	8004b48 <_vfiprintf_r+0x78>
 8004c76:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c7a:	460c      	mov	r4, r1
 8004c7c:	2001      	movs	r0, #1
 8004c7e:	e7a6      	b.n	8004bce <_vfiprintf_r+0xfe>
 8004c80:	2300      	movs	r3, #0
 8004c82:	3401      	adds	r4, #1
 8004c84:	9305      	str	r3, [sp, #20]
 8004c86:	4619      	mov	r1, r3
 8004c88:	f04f 0c0a 	mov.w	ip, #10
 8004c8c:	4620      	mov	r0, r4
 8004c8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c92:	3a30      	subs	r2, #48	; 0x30
 8004c94:	2a09      	cmp	r2, #9
 8004c96:	d903      	bls.n	8004ca0 <_vfiprintf_r+0x1d0>
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d0c6      	beq.n	8004c2a <_vfiprintf_r+0x15a>
 8004c9c:	9105      	str	r1, [sp, #20]
 8004c9e:	e7c4      	b.n	8004c2a <_vfiprintf_r+0x15a>
 8004ca0:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ca4:	4604      	mov	r4, r0
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e7f0      	b.n	8004c8c <_vfiprintf_r+0x1bc>
 8004caa:	ab03      	add	r3, sp, #12
 8004cac:	9300      	str	r3, [sp, #0]
 8004cae:	462a      	mov	r2, r5
 8004cb0:	4b12      	ldr	r3, [pc, #72]	; (8004cfc <_vfiprintf_r+0x22c>)
 8004cb2:	a904      	add	r1, sp, #16
 8004cb4:	4630      	mov	r0, r6
 8004cb6:	f3af 8000 	nop.w
 8004cba:	4607      	mov	r7, r0
 8004cbc:	1c78      	adds	r0, r7, #1
 8004cbe:	d1d6      	bne.n	8004c6e <_vfiprintf_r+0x19e>
 8004cc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004cc2:	07d9      	lsls	r1, r3, #31
 8004cc4:	d405      	bmi.n	8004cd2 <_vfiprintf_r+0x202>
 8004cc6:	89ab      	ldrh	r3, [r5, #12]
 8004cc8:	059a      	lsls	r2, r3, #22
 8004cca:	d402      	bmi.n	8004cd2 <_vfiprintf_r+0x202>
 8004ccc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004cce:	f7ff fdcd 	bl	800486c <__retarget_lock_release_recursive>
 8004cd2:	89ab      	ldrh	r3, [r5, #12]
 8004cd4:	065b      	lsls	r3, r3, #25
 8004cd6:	f53f af1d 	bmi.w	8004b14 <_vfiprintf_r+0x44>
 8004cda:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cdc:	e71c      	b.n	8004b18 <_vfiprintf_r+0x48>
 8004cde:	ab03      	add	r3, sp, #12
 8004ce0:	9300      	str	r3, [sp, #0]
 8004ce2:	462a      	mov	r2, r5
 8004ce4:	4b05      	ldr	r3, [pc, #20]	; (8004cfc <_vfiprintf_r+0x22c>)
 8004ce6:	a904      	add	r1, sp, #16
 8004ce8:	4630      	mov	r0, r6
 8004cea:	f000 f879 	bl	8004de0 <_printf_i>
 8004cee:	e7e4      	b.n	8004cba <_vfiprintf_r+0x1ea>
 8004cf0:	080054e8 	.word	0x080054e8
 8004cf4:	080054f2 	.word	0x080054f2
 8004cf8:	00000000 	.word	0x00000000
 8004cfc:	08004aab 	.word	0x08004aab
 8004d00:	080054ee 	.word	0x080054ee

08004d04 <_printf_common>:
 8004d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d08:	4616      	mov	r6, r2
 8004d0a:	4699      	mov	r9, r3
 8004d0c:	688a      	ldr	r2, [r1, #8]
 8004d0e:	690b      	ldr	r3, [r1, #16]
 8004d10:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d14:	4293      	cmp	r3, r2
 8004d16:	bfb8      	it	lt
 8004d18:	4613      	movlt	r3, r2
 8004d1a:	6033      	str	r3, [r6, #0]
 8004d1c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d20:	4607      	mov	r7, r0
 8004d22:	460c      	mov	r4, r1
 8004d24:	b10a      	cbz	r2, 8004d2a <_printf_common+0x26>
 8004d26:	3301      	adds	r3, #1
 8004d28:	6033      	str	r3, [r6, #0]
 8004d2a:	6823      	ldr	r3, [r4, #0]
 8004d2c:	0699      	lsls	r1, r3, #26
 8004d2e:	bf42      	ittt	mi
 8004d30:	6833      	ldrmi	r3, [r6, #0]
 8004d32:	3302      	addmi	r3, #2
 8004d34:	6033      	strmi	r3, [r6, #0]
 8004d36:	6825      	ldr	r5, [r4, #0]
 8004d38:	f015 0506 	ands.w	r5, r5, #6
 8004d3c:	d106      	bne.n	8004d4c <_printf_common+0x48>
 8004d3e:	f104 0a19 	add.w	sl, r4, #25
 8004d42:	68e3      	ldr	r3, [r4, #12]
 8004d44:	6832      	ldr	r2, [r6, #0]
 8004d46:	1a9b      	subs	r3, r3, r2
 8004d48:	42ab      	cmp	r3, r5
 8004d4a:	dc26      	bgt.n	8004d9a <_printf_common+0x96>
 8004d4c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d50:	1e13      	subs	r3, r2, #0
 8004d52:	6822      	ldr	r2, [r4, #0]
 8004d54:	bf18      	it	ne
 8004d56:	2301      	movne	r3, #1
 8004d58:	0692      	lsls	r2, r2, #26
 8004d5a:	d42b      	bmi.n	8004db4 <_printf_common+0xb0>
 8004d5c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d60:	4649      	mov	r1, r9
 8004d62:	4638      	mov	r0, r7
 8004d64:	47c0      	blx	r8
 8004d66:	3001      	adds	r0, #1
 8004d68:	d01e      	beq.n	8004da8 <_printf_common+0xa4>
 8004d6a:	6823      	ldr	r3, [r4, #0]
 8004d6c:	6922      	ldr	r2, [r4, #16]
 8004d6e:	f003 0306 	and.w	r3, r3, #6
 8004d72:	2b04      	cmp	r3, #4
 8004d74:	bf02      	ittt	eq
 8004d76:	68e5      	ldreq	r5, [r4, #12]
 8004d78:	6833      	ldreq	r3, [r6, #0]
 8004d7a:	1aed      	subeq	r5, r5, r3
 8004d7c:	68a3      	ldr	r3, [r4, #8]
 8004d7e:	bf0c      	ite	eq
 8004d80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d84:	2500      	movne	r5, #0
 8004d86:	4293      	cmp	r3, r2
 8004d88:	bfc4      	itt	gt
 8004d8a:	1a9b      	subgt	r3, r3, r2
 8004d8c:	18ed      	addgt	r5, r5, r3
 8004d8e:	2600      	movs	r6, #0
 8004d90:	341a      	adds	r4, #26
 8004d92:	42b5      	cmp	r5, r6
 8004d94:	d11a      	bne.n	8004dcc <_printf_common+0xc8>
 8004d96:	2000      	movs	r0, #0
 8004d98:	e008      	b.n	8004dac <_printf_common+0xa8>
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	4652      	mov	r2, sl
 8004d9e:	4649      	mov	r1, r9
 8004da0:	4638      	mov	r0, r7
 8004da2:	47c0      	blx	r8
 8004da4:	3001      	adds	r0, #1
 8004da6:	d103      	bne.n	8004db0 <_printf_common+0xac>
 8004da8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004db0:	3501      	adds	r5, #1
 8004db2:	e7c6      	b.n	8004d42 <_printf_common+0x3e>
 8004db4:	18e1      	adds	r1, r4, r3
 8004db6:	1c5a      	adds	r2, r3, #1
 8004db8:	2030      	movs	r0, #48	; 0x30
 8004dba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004dbe:	4422      	add	r2, r4
 8004dc0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004dc4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004dc8:	3302      	adds	r3, #2
 8004dca:	e7c7      	b.n	8004d5c <_printf_common+0x58>
 8004dcc:	2301      	movs	r3, #1
 8004dce:	4622      	mov	r2, r4
 8004dd0:	4649      	mov	r1, r9
 8004dd2:	4638      	mov	r0, r7
 8004dd4:	47c0      	blx	r8
 8004dd6:	3001      	adds	r0, #1
 8004dd8:	d0e6      	beq.n	8004da8 <_printf_common+0xa4>
 8004dda:	3601      	adds	r6, #1
 8004ddc:	e7d9      	b.n	8004d92 <_printf_common+0x8e>
	...

08004de0 <_printf_i>:
 8004de0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004de4:	7e0f      	ldrb	r7, [r1, #24]
 8004de6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004de8:	2f78      	cmp	r7, #120	; 0x78
 8004dea:	4691      	mov	r9, r2
 8004dec:	4680      	mov	r8, r0
 8004dee:	460c      	mov	r4, r1
 8004df0:	469a      	mov	sl, r3
 8004df2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004df6:	d807      	bhi.n	8004e08 <_printf_i+0x28>
 8004df8:	2f62      	cmp	r7, #98	; 0x62
 8004dfa:	d80a      	bhi.n	8004e12 <_printf_i+0x32>
 8004dfc:	2f00      	cmp	r7, #0
 8004dfe:	f000 80d4 	beq.w	8004faa <_printf_i+0x1ca>
 8004e02:	2f58      	cmp	r7, #88	; 0x58
 8004e04:	f000 80c0 	beq.w	8004f88 <_printf_i+0x1a8>
 8004e08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e0c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e10:	e03a      	b.n	8004e88 <_printf_i+0xa8>
 8004e12:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e16:	2b15      	cmp	r3, #21
 8004e18:	d8f6      	bhi.n	8004e08 <_printf_i+0x28>
 8004e1a:	a101      	add	r1, pc, #4	; (adr r1, 8004e20 <_printf_i+0x40>)
 8004e1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e20:	08004e79 	.word	0x08004e79
 8004e24:	08004e8d 	.word	0x08004e8d
 8004e28:	08004e09 	.word	0x08004e09
 8004e2c:	08004e09 	.word	0x08004e09
 8004e30:	08004e09 	.word	0x08004e09
 8004e34:	08004e09 	.word	0x08004e09
 8004e38:	08004e8d 	.word	0x08004e8d
 8004e3c:	08004e09 	.word	0x08004e09
 8004e40:	08004e09 	.word	0x08004e09
 8004e44:	08004e09 	.word	0x08004e09
 8004e48:	08004e09 	.word	0x08004e09
 8004e4c:	08004f91 	.word	0x08004f91
 8004e50:	08004eb9 	.word	0x08004eb9
 8004e54:	08004f4b 	.word	0x08004f4b
 8004e58:	08004e09 	.word	0x08004e09
 8004e5c:	08004e09 	.word	0x08004e09
 8004e60:	08004fb3 	.word	0x08004fb3
 8004e64:	08004e09 	.word	0x08004e09
 8004e68:	08004eb9 	.word	0x08004eb9
 8004e6c:	08004e09 	.word	0x08004e09
 8004e70:	08004e09 	.word	0x08004e09
 8004e74:	08004f53 	.word	0x08004f53
 8004e78:	682b      	ldr	r3, [r5, #0]
 8004e7a:	1d1a      	adds	r2, r3, #4
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	602a      	str	r2, [r5, #0]
 8004e80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e84:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e09f      	b.n	8004fcc <_printf_i+0x1ec>
 8004e8c:	6820      	ldr	r0, [r4, #0]
 8004e8e:	682b      	ldr	r3, [r5, #0]
 8004e90:	0607      	lsls	r7, r0, #24
 8004e92:	f103 0104 	add.w	r1, r3, #4
 8004e96:	6029      	str	r1, [r5, #0]
 8004e98:	d501      	bpl.n	8004e9e <_printf_i+0xbe>
 8004e9a:	681e      	ldr	r6, [r3, #0]
 8004e9c:	e003      	b.n	8004ea6 <_printf_i+0xc6>
 8004e9e:	0646      	lsls	r6, r0, #25
 8004ea0:	d5fb      	bpl.n	8004e9a <_printf_i+0xba>
 8004ea2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004ea6:	2e00      	cmp	r6, #0
 8004ea8:	da03      	bge.n	8004eb2 <_printf_i+0xd2>
 8004eaa:	232d      	movs	r3, #45	; 0x2d
 8004eac:	4276      	negs	r6, r6
 8004eae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004eb2:	485a      	ldr	r0, [pc, #360]	; (800501c <_printf_i+0x23c>)
 8004eb4:	230a      	movs	r3, #10
 8004eb6:	e012      	b.n	8004ede <_printf_i+0xfe>
 8004eb8:	682b      	ldr	r3, [r5, #0]
 8004eba:	6820      	ldr	r0, [r4, #0]
 8004ebc:	1d19      	adds	r1, r3, #4
 8004ebe:	6029      	str	r1, [r5, #0]
 8004ec0:	0605      	lsls	r5, r0, #24
 8004ec2:	d501      	bpl.n	8004ec8 <_printf_i+0xe8>
 8004ec4:	681e      	ldr	r6, [r3, #0]
 8004ec6:	e002      	b.n	8004ece <_printf_i+0xee>
 8004ec8:	0641      	lsls	r1, r0, #25
 8004eca:	d5fb      	bpl.n	8004ec4 <_printf_i+0xe4>
 8004ecc:	881e      	ldrh	r6, [r3, #0]
 8004ece:	4853      	ldr	r0, [pc, #332]	; (800501c <_printf_i+0x23c>)
 8004ed0:	2f6f      	cmp	r7, #111	; 0x6f
 8004ed2:	bf0c      	ite	eq
 8004ed4:	2308      	moveq	r3, #8
 8004ed6:	230a      	movne	r3, #10
 8004ed8:	2100      	movs	r1, #0
 8004eda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ede:	6865      	ldr	r5, [r4, #4]
 8004ee0:	60a5      	str	r5, [r4, #8]
 8004ee2:	2d00      	cmp	r5, #0
 8004ee4:	bfa2      	ittt	ge
 8004ee6:	6821      	ldrge	r1, [r4, #0]
 8004ee8:	f021 0104 	bicge.w	r1, r1, #4
 8004eec:	6021      	strge	r1, [r4, #0]
 8004eee:	b90e      	cbnz	r6, 8004ef4 <_printf_i+0x114>
 8004ef0:	2d00      	cmp	r5, #0
 8004ef2:	d04b      	beq.n	8004f8c <_printf_i+0x1ac>
 8004ef4:	4615      	mov	r5, r2
 8004ef6:	fbb6 f1f3 	udiv	r1, r6, r3
 8004efa:	fb03 6711 	mls	r7, r3, r1, r6
 8004efe:	5dc7      	ldrb	r7, [r0, r7]
 8004f00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f04:	4637      	mov	r7, r6
 8004f06:	42bb      	cmp	r3, r7
 8004f08:	460e      	mov	r6, r1
 8004f0a:	d9f4      	bls.n	8004ef6 <_printf_i+0x116>
 8004f0c:	2b08      	cmp	r3, #8
 8004f0e:	d10b      	bne.n	8004f28 <_printf_i+0x148>
 8004f10:	6823      	ldr	r3, [r4, #0]
 8004f12:	07de      	lsls	r6, r3, #31
 8004f14:	d508      	bpl.n	8004f28 <_printf_i+0x148>
 8004f16:	6923      	ldr	r3, [r4, #16]
 8004f18:	6861      	ldr	r1, [r4, #4]
 8004f1a:	4299      	cmp	r1, r3
 8004f1c:	bfde      	ittt	le
 8004f1e:	2330      	movle	r3, #48	; 0x30
 8004f20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f24:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004f28:	1b52      	subs	r2, r2, r5
 8004f2a:	6122      	str	r2, [r4, #16]
 8004f2c:	f8cd a000 	str.w	sl, [sp]
 8004f30:	464b      	mov	r3, r9
 8004f32:	aa03      	add	r2, sp, #12
 8004f34:	4621      	mov	r1, r4
 8004f36:	4640      	mov	r0, r8
 8004f38:	f7ff fee4 	bl	8004d04 <_printf_common>
 8004f3c:	3001      	adds	r0, #1
 8004f3e:	d14a      	bne.n	8004fd6 <_printf_i+0x1f6>
 8004f40:	f04f 30ff 	mov.w	r0, #4294967295
 8004f44:	b004      	add	sp, #16
 8004f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f4a:	6823      	ldr	r3, [r4, #0]
 8004f4c:	f043 0320 	orr.w	r3, r3, #32
 8004f50:	6023      	str	r3, [r4, #0]
 8004f52:	4833      	ldr	r0, [pc, #204]	; (8005020 <_printf_i+0x240>)
 8004f54:	2778      	movs	r7, #120	; 0x78
 8004f56:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004f5a:	6823      	ldr	r3, [r4, #0]
 8004f5c:	6829      	ldr	r1, [r5, #0]
 8004f5e:	061f      	lsls	r7, r3, #24
 8004f60:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f64:	d402      	bmi.n	8004f6c <_printf_i+0x18c>
 8004f66:	065f      	lsls	r7, r3, #25
 8004f68:	bf48      	it	mi
 8004f6a:	b2b6      	uxthmi	r6, r6
 8004f6c:	07df      	lsls	r7, r3, #31
 8004f6e:	bf48      	it	mi
 8004f70:	f043 0320 	orrmi.w	r3, r3, #32
 8004f74:	6029      	str	r1, [r5, #0]
 8004f76:	bf48      	it	mi
 8004f78:	6023      	strmi	r3, [r4, #0]
 8004f7a:	b91e      	cbnz	r6, 8004f84 <_printf_i+0x1a4>
 8004f7c:	6823      	ldr	r3, [r4, #0]
 8004f7e:	f023 0320 	bic.w	r3, r3, #32
 8004f82:	6023      	str	r3, [r4, #0]
 8004f84:	2310      	movs	r3, #16
 8004f86:	e7a7      	b.n	8004ed8 <_printf_i+0xf8>
 8004f88:	4824      	ldr	r0, [pc, #144]	; (800501c <_printf_i+0x23c>)
 8004f8a:	e7e4      	b.n	8004f56 <_printf_i+0x176>
 8004f8c:	4615      	mov	r5, r2
 8004f8e:	e7bd      	b.n	8004f0c <_printf_i+0x12c>
 8004f90:	682b      	ldr	r3, [r5, #0]
 8004f92:	6826      	ldr	r6, [r4, #0]
 8004f94:	6961      	ldr	r1, [r4, #20]
 8004f96:	1d18      	adds	r0, r3, #4
 8004f98:	6028      	str	r0, [r5, #0]
 8004f9a:	0635      	lsls	r5, r6, #24
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	d501      	bpl.n	8004fa4 <_printf_i+0x1c4>
 8004fa0:	6019      	str	r1, [r3, #0]
 8004fa2:	e002      	b.n	8004faa <_printf_i+0x1ca>
 8004fa4:	0670      	lsls	r0, r6, #25
 8004fa6:	d5fb      	bpl.n	8004fa0 <_printf_i+0x1c0>
 8004fa8:	8019      	strh	r1, [r3, #0]
 8004faa:	2300      	movs	r3, #0
 8004fac:	6123      	str	r3, [r4, #16]
 8004fae:	4615      	mov	r5, r2
 8004fb0:	e7bc      	b.n	8004f2c <_printf_i+0x14c>
 8004fb2:	682b      	ldr	r3, [r5, #0]
 8004fb4:	1d1a      	adds	r2, r3, #4
 8004fb6:	602a      	str	r2, [r5, #0]
 8004fb8:	681d      	ldr	r5, [r3, #0]
 8004fba:	6862      	ldr	r2, [r4, #4]
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	4628      	mov	r0, r5
 8004fc0:	f7fb f906 	bl	80001d0 <memchr>
 8004fc4:	b108      	cbz	r0, 8004fca <_printf_i+0x1ea>
 8004fc6:	1b40      	subs	r0, r0, r5
 8004fc8:	6060      	str	r0, [r4, #4]
 8004fca:	6863      	ldr	r3, [r4, #4]
 8004fcc:	6123      	str	r3, [r4, #16]
 8004fce:	2300      	movs	r3, #0
 8004fd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fd4:	e7aa      	b.n	8004f2c <_printf_i+0x14c>
 8004fd6:	6923      	ldr	r3, [r4, #16]
 8004fd8:	462a      	mov	r2, r5
 8004fda:	4649      	mov	r1, r9
 8004fdc:	4640      	mov	r0, r8
 8004fde:	47d0      	blx	sl
 8004fe0:	3001      	adds	r0, #1
 8004fe2:	d0ad      	beq.n	8004f40 <_printf_i+0x160>
 8004fe4:	6823      	ldr	r3, [r4, #0]
 8004fe6:	079b      	lsls	r3, r3, #30
 8004fe8:	d413      	bmi.n	8005012 <_printf_i+0x232>
 8004fea:	68e0      	ldr	r0, [r4, #12]
 8004fec:	9b03      	ldr	r3, [sp, #12]
 8004fee:	4298      	cmp	r0, r3
 8004ff0:	bfb8      	it	lt
 8004ff2:	4618      	movlt	r0, r3
 8004ff4:	e7a6      	b.n	8004f44 <_printf_i+0x164>
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	4632      	mov	r2, r6
 8004ffa:	4649      	mov	r1, r9
 8004ffc:	4640      	mov	r0, r8
 8004ffe:	47d0      	blx	sl
 8005000:	3001      	adds	r0, #1
 8005002:	d09d      	beq.n	8004f40 <_printf_i+0x160>
 8005004:	3501      	adds	r5, #1
 8005006:	68e3      	ldr	r3, [r4, #12]
 8005008:	9903      	ldr	r1, [sp, #12]
 800500a:	1a5b      	subs	r3, r3, r1
 800500c:	42ab      	cmp	r3, r5
 800500e:	dcf2      	bgt.n	8004ff6 <_printf_i+0x216>
 8005010:	e7eb      	b.n	8004fea <_printf_i+0x20a>
 8005012:	2500      	movs	r5, #0
 8005014:	f104 0619 	add.w	r6, r4, #25
 8005018:	e7f5      	b.n	8005006 <_printf_i+0x226>
 800501a:	bf00      	nop
 800501c:	080054f9 	.word	0x080054f9
 8005020:	0800550a 	.word	0x0800550a

08005024 <__sflush_r>:
 8005024:	898a      	ldrh	r2, [r1, #12]
 8005026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800502a:	4605      	mov	r5, r0
 800502c:	0710      	lsls	r0, r2, #28
 800502e:	460c      	mov	r4, r1
 8005030:	d458      	bmi.n	80050e4 <__sflush_r+0xc0>
 8005032:	684b      	ldr	r3, [r1, #4]
 8005034:	2b00      	cmp	r3, #0
 8005036:	dc05      	bgt.n	8005044 <__sflush_r+0x20>
 8005038:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800503a:	2b00      	cmp	r3, #0
 800503c:	dc02      	bgt.n	8005044 <__sflush_r+0x20>
 800503e:	2000      	movs	r0, #0
 8005040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005044:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005046:	2e00      	cmp	r6, #0
 8005048:	d0f9      	beq.n	800503e <__sflush_r+0x1a>
 800504a:	2300      	movs	r3, #0
 800504c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005050:	682f      	ldr	r7, [r5, #0]
 8005052:	6a21      	ldr	r1, [r4, #32]
 8005054:	602b      	str	r3, [r5, #0]
 8005056:	d032      	beq.n	80050be <__sflush_r+0x9a>
 8005058:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800505a:	89a3      	ldrh	r3, [r4, #12]
 800505c:	075a      	lsls	r2, r3, #29
 800505e:	d505      	bpl.n	800506c <__sflush_r+0x48>
 8005060:	6863      	ldr	r3, [r4, #4]
 8005062:	1ac0      	subs	r0, r0, r3
 8005064:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005066:	b10b      	cbz	r3, 800506c <__sflush_r+0x48>
 8005068:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800506a:	1ac0      	subs	r0, r0, r3
 800506c:	2300      	movs	r3, #0
 800506e:	4602      	mov	r2, r0
 8005070:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005072:	6a21      	ldr	r1, [r4, #32]
 8005074:	4628      	mov	r0, r5
 8005076:	47b0      	blx	r6
 8005078:	1c43      	adds	r3, r0, #1
 800507a:	89a3      	ldrh	r3, [r4, #12]
 800507c:	d106      	bne.n	800508c <__sflush_r+0x68>
 800507e:	6829      	ldr	r1, [r5, #0]
 8005080:	291d      	cmp	r1, #29
 8005082:	d82b      	bhi.n	80050dc <__sflush_r+0xb8>
 8005084:	4a29      	ldr	r2, [pc, #164]	; (800512c <__sflush_r+0x108>)
 8005086:	410a      	asrs	r2, r1
 8005088:	07d6      	lsls	r6, r2, #31
 800508a:	d427      	bmi.n	80050dc <__sflush_r+0xb8>
 800508c:	2200      	movs	r2, #0
 800508e:	6062      	str	r2, [r4, #4]
 8005090:	04d9      	lsls	r1, r3, #19
 8005092:	6922      	ldr	r2, [r4, #16]
 8005094:	6022      	str	r2, [r4, #0]
 8005096:	d504      	bpl.n	80050a2 <__sflush_r+0x7e>
 8005098:	1c42      	adds	r2, r0, #1
 800509a:	d101      	bne.n	80050a0 <__sflush_r+0x7c>
 800509c:	682b      	ldr	r3, [r5, #0]
 800509e:	b903      	cbnz	r3, 80050a2 <__sflush_r+0x7e>
 80050a0:	6560      	str	r0, [r4, #84]	; 0x54
 80050a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80050a4:	602f      	str	r7, [r5, #0]
 80050a6:	2900      	cmp	r1, #0
 80050a8:	d0c9      	beq.n	800503e <__sflush_r+0x1a>
 80050aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80050ae:	4299      	cmp	r1, r3
 80050b0:	d002      	beq.n	80050b8 <__sflush_r+0x94>
 80050b2:	4628      	mov	r0, r5
 80050b4:	f7ff fbea 	bl	800488c <_free_r>
 80050b8:	2000      	movs	r0, #0
 80050ba:	6360      	str	r0, [r4, #52]	; 0x34
 80050bc:	e7c0      	b.n	8005040 <__sflush_r+0x1c>
 80050be:	2301      	movs	r3, #1
 80050c0:	4628      	mov	r0, r5
 80050c2:	47b0      	blx	r6
 80050c4:	1c41      	adds	r1, r0, #1
 80050c6:	d1c8      	bne.n	800505a <__sflush_r+0x36>
 80050c8:	682b      	ldr	r3, [r5, #0]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d0c5      	beq.n	800505a <__sflush_r+0x36>
 80050ce:	2b1d      	cmp	r3, #29
 80050d0:	d001      	beq.n	80050d6 <__sflush_r+0xb2>
 80050d2:	2b16      	cmp	r3, #22
 80050d4:	d101      	bne.n	80050da <__sflush_r+0xb6>
 80050d6:	602f      	str	r7, [r5, #0]
 80050d8:	e7b1      	b.n	800503e <__sflush_r+0x1a>
 80050da:	89a3      	ldrh	r3, [r4, #12]
 80050dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050e0:	81a3      	strh	r3, [r4, #12]
 80050e2:	e7ad      	b.n	8005040 <__sflush_r+0x1c>
 80050e4:	690f      	ldr	r7, [r1, #16]
 80050e6:	2f00      	cmp	r7, #0
 80050e8:	d0a9      	beq.n	800503e <__sflush_r+0x1a>
 80050ea:	0793      	lsls	r3, r2, #30
 80050ec:	680e      	ldr	r6, [r1, #0]
 80050ee:	bf08      	it	eq
 80050f0:	694b      	ldreq	r3, [r1, #20]
 80050f2:	600f      	str	r7, [r1, #0]
 80050f4:	bf18      	it	ne
 80050f6:	2300      	movne	r3, #0
 80050f8:	eba6 0807 	sub.w	r8, r6, r7
 80050fc:	608b      	str	r3, [r1, #8]
 80050fe:	f1b8 0f00 	cmp.w	r8, #0
 8005102:	dd9c      	ble.n	800503e <__sflush_r+0x1a>
 8005104:	6a21      	ldr	r1, [r4, #32]
 8005106:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005108:	4643      	mov	r3, r8
 800510a:	463a      	mov	r2, r7
 800510c:	4628      	mov	r0, r5
 800510e:	47b0      	blx	r6
 8005110:	2800      	cmp	r0, #0
 8005112:	dc06      	bgt.n	8005122 <__sflush_r+0xfe>
 8005114:	89a3      	ldrh	r3, [r4, #12]
 8005116:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800511a:	81a3      	strh	r3, [r4, #12]
 800511c:	f04f 30ff 	mov.w	r0, #4294967295
 8005120:	e78e      	b.n	8005040 <__sflush_r+0x1c>
 8005122:	4407      	add	r7, r0
 8005124:	eba8 0800 	sub.w	r8, r8, r0
 8005128:	e7e9      	b.n	80050fe <__sflush_r+0xda>
 800512a:	bf00      	nop
 800512c:	dfbffffe 	.word	0xdfbffffe

08005130 <_fflush_r>:
 8005130:	b538      	push	{r3, r4, r5, lr}
 8005132:	690b      	ldr	r3, [r1, #16]
 8005134:	4605      	mov	r5, r0
 8005136:	460c      	mov	r4, r1
 8005138:	b913      	cbnz	r3, 8005140 <_fflush_r+0x10>
 800513a:	2500      	movs	r5, #0
 800513c:	4628      	mov	r0, r5
 800513e:	bd38      	pop	{r3, r4, r5, pc}
 8005140:	b118      	cbz	r0, 800514a <_fflush_r+0x1a>
 8005142:	6a03      	ldr	r3, [r0, #32]
 8005144:	b90b      	cbnz	r3, 800514a <_fflush_r+0x1a>
 8005146:	f7ff fa35 	bl	80045b4 <__sinit>
 800514a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d0f3      	beq.n	800513a <_fflush_r+0xa>
 8005152:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005154:	07d0      	lsls	r0, r2, #31
 8005156:	d404      	bmi.n	8005162 <_fflush_r+0x32>
 8005158:	0599      	lsls	r1, r3, #22
 800515a:	d402      	bmi.n	8005162 <_fflush_r+0x32>
 800515c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800515e:	f7ff fb84 	bl	800486a <__retarget_lock_acquire_recursive>
 8005162:	4628      	mov	r0, r5
 8005164:	4621      	mov	r1, r4
 8005166:	f7ff ff5d 	bl	8005024 <__sflush_r>
 800516a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800516c:	07da      	lsls	r2, r3, #31
 800516e:	4605      	mov	r5, r0
 8005170:	d4e4      	bmi.n	800513c <_fflush_r+0xc>
 8005172:	89a3      	ldrh	r3, [r4, #12]
 8005174:	059b      	lsls	r3, r3, #22
 8005176:	d4e1      	bmi.n	800513c <_fflush_r+0xc>
 8005178:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800517a:	f7ff fb77 	bl	800486c <__retarget_lock_release_recursive>
 800517e:	e7dd      	b.n	800513c <_fflush_r+0xc>

08005180 <__swbuf_r>:
 8005180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005182:	460e      	mov	r6, r1
 8005184:	4614      	mov	r4, r2
 8005186:	4605      	mov	r5, r0
 8005188:	b118      	cbz	r0, 8005192 <__swbuf_r+0x12>
 800518a:	6a03      	ldr	r3, [r0, #32]
 800518c:	b90b      	cbnz	r3, 8005192 <__swbuf_r+0x12>
 800518e:	f7ff fa11 	bl	80045b4 <__sinit>
 8005192:	69a3      	ldr	r3, [r4, #24]
 8005194:	60a3      	str	r3, [r4, #8]
 8005196:	89a3      	ldrh	r3, [r4, #12]
 8005198:	071a      	lsls	r2, r3, #28
 800519a:	d525      	bpl.n	80051e8 <__swbuf_r+0x68>
 800519c:	6923      	ldr	r3, [r4, #16]
 800519e:	b31b      	cbz	r3, 80051e8 <__swbuf_r+0x68>
 80051a0:	6823      	ldr	r3, [r4, #0]
 80051a2:	6922      	ldr	r2, [r4, #16]
 80051a4:	1a98      	subs	r0, r3, r2
 80051a6:	6963      	ldr	r3, [r4, #20]
 80051a8:	b2f6      	uxtb	r6, r6
 80051aa:	4283      	cmp	r3, r0
 80051ac:	4637      	mov	r7, r6
 80051ae:	dc04      	bgt.n	80051ba <__swbuf_r+0x3a>
 80051b0:	4621      	mov	r1, r4
 80051b2:	4628      	mov	r0, r5
 80051b4:	f7ff ffbc 	bl	8005130 <_fflush_r>
 80051b8:	b9e0      	cbnz	r0, 80051f4 <__swbuf_r+0x74>
 80051ba:	68a3      	ldr	r3, [r4, #8]
 80051bc:	3b01      	subs	r3, #1
 80051be:	60a3      	str	r3, [r4, #8]
 80051c0:	6823      	ldr	r3, [r4, #0]
 80051c2:	1c5a      	adds	r2, r3, #1
 80051c4:	6022      	str	r2, [r4, #0]
 80051c6:	701e      	strb	r6, [r3, #0]
 80051c8:	6962      	ldr	r2, [r4, #20]
 80051ca:	1c43      	adds	r3, r0, #1
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d004      	beq.n	80051da <__swbuf_r+0x5a>
 80051d0:	89a3      	ldrh	r3, [r4, #12]
 80051d2:	07db      	lsls	r3, r3, #31
 80051d4:	d506      	bpl.n	80051e4 <__swbuf_r+0x64>
 80051d6:	2e0a      	cmp	r6, #10
 80051d8:	d104      	bne.n	80051e4 <__swbuf_r+0x64>
 80051da:	4621      	mov	r1, r4
 80051dc:	4628      	mov	r0, r5
 80051de:	f7ff ffa7 	bl	8005130 <_fflush_r>
 80051e2:	b938      	cbnz	r0, 80051f4 <__swbuf_r+0x74>
 80051e4:	4638      	mov	r0, r7
 80051e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051e8:	4621      	mov	r1, r4
 80051ea:	4628      	mov	r0, r5
 80051ec:	f000 f806 	bl	80051fc <__swsetup_r>
 80051f0:	2800      	cmp	r0, #0
 80051f2:	d0d5      	beq.n	80051a0 <__swbuf_r+0x20>
 80051f4:	f04f 37ff 	mov.w	r7, #4294967295
 80051f8:	e7f4      	b.n	80051e4 <__swbuf_r+0x64>
	...

080051fc <__swsetup_r>:
 80051fc:	b538      	push	{r3, r4, r5, lr}
 80051fe:	4b2a      	ldr	r3, [pc, #168]	; (80052a8 <__swsetup_r+0xac>)
 8005200:	4605      	mov	r5, r0
 8005202:	6818      	ldr	r0, [r3, #0]
 8005204:	460c      	mov	r4, r1
 8005206:	b118      	cbz	r0, 8005210 <__swsetup_r+0x14>
 8005208:	6a03      	ldr	r3, [r0, #32]
 800520a:	b90b      	cbnz	r3, 8005210 <__swsetup_r+0x14>
 800520c:	f7ff f9d2 	bl	80045b4 <__sinit>
 8005210:	89a3      	ldrh	r3, [r4, #12]
 8005212:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005216:	0718      	lsls	r0, r3, #28
 8005218:	d422      	bmi.n	8005260 <__swsetup_r+0x64>
 800521a:	06d9      	lsls	r1, r3, #27
 800521c:	d407      	bmi.n	800522e <__swsetup_r+0x32>
 800521e:	2309      	movs	r3, #9
 8005220:	602b      	str	r3, [r5, #0]
 8005222:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005226:	81a3      	strh	r3, [r4, #12]
 8005228:	f04f 30ff 	mov.w	r0, #4294967295
 800522c:	e034      	b.n	8005298 <__swsetup_r+0x9c>
 800522e:	0758      	lsls	r0, r3, #29
 8005230:	d512      	bpl.n	8005258 <__swsetup_r+0x5c>
 8005232:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005234:	b141      	cbz	r1, 8005248 <__swsetup_r+0x4c>
 8005236:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800523a:	4299      	cmp	r1, r3
 800523c:	d002      	beq.n	8005244 <__swsetup_r+0x48>
 800523e:	4628      	mov	r0, r5
 8005240:	f7ff fb24 	bl	800488c <_free_r>
 8005244:	2300      	movs	r3, #0
 8005246:	6363      	str	r3, [r4, #52]	; 0x34
 8005248:	89a3      	ldrh	r3, [r4, #12]
 800524a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800524e:	81a3      	strh	r3, [r4, #12]
 8005250:	2300      	movs	r3, #0
 8005252:	6063      	str	r3, [r4, #4]
 8005254:	6923      	ldr	r3, [r4, #16]
 8005256:	6023      	str	r3, [r4, #0]
 8005258:	89a3      	ldrh	r3, [r4, #12]
 800525a:	f043 0308 	orr.w	r3, r3, #8
 800525e:	81a3      	strh	r3, [r4, #12]
 8005260:	6923      	ldr	r3, [r4, #16]
 8005262:	b94b      	cbnz	r3, 8005278 <__swsetup_r+0x7c>
 8005264:	89a3      	ldrh	r3, [r4, #12]
 8005266:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800526a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800526e:	d003      	beq.n	8005278 <__swsetup_r+0x7c>
 8005270:	4621      	mov	r1, r4
 8005272:	4628      	mov	r0, r5
 8005274:	f000 f850 	bl	8005318 <__smakebuf_r>
 8005278:	89a0      	ldrh	r0, [r4, #12]
 800527a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800527e:	f010 0301 	ands.w	r3, r0, #1
 8005282:	d00a      	beq.n	800529a <__swsetup_r+0x9e>
 8005284:	2300      	movs	r3, #0
 8005286:	60a3      	str	r3, [r4, #8]
 8005288:	6963      	ldr	r3, [r4, #20]
 800528a:	425b      	negs	r3, r3
 800528c:	61a3      	str	r3, [r4, #24]
 800528e:	6923      	ldr	r3, [r4, #16]
 8005290:	b943      	cbnz	r3, 80052a4 <__swsetup_r+0xa8>
 8005292:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005296:	d1c4      	bne.n	8005222 <__swsetup_r+0x26>
 8005298:	bd38      	pop	{r3, r4, r5, pc}
 800529a:	0781      	lsls	r1, r0, #30
 800529c:	bf58      	it	pl
 800529e:	6963      	ldrpl	r3, [r4, #20]
 80052a0:	60a3      	str	r3, [r4, #8]
 80052a2:	e7f4      	b.n	800528e <__swsetup_r+0x92>
 80052a4:	2000      	movs	r0, #0
 80052a6:	e7f7      	b.n	8005298 <__swsetup_r+0x9c>
 80052a8:	20000068 	.word	0x20000068

080052ac <_sbrk_r>:
 80052ac:	b538      	push	{r3, r4, r5, lr}
 80052ae:	4d06      	ldr	r5, [pc, #24]	; (80052c8 <_sbrk_r+0x1c>)
 80052b0:	2300      	movs	r3, #0
 80052b2:	4604      	mov	r4, r0
 80052b4:	4608      	mov	r0, r1
 80052b6:	602b      	str	r3, [r5, #0]
 80052b8:	f7fb fcb0 	bl	8000c1c <_sbrk>
 80052bc:	1c43      	adds	r3, r0, #1
 80052be:	d102      	bne.n	80052c6 <_sbrk_r+0x1a>
 80052c0:	682b      	ldr	r3, [r5, #0]
 80052c2:	b103      	cbz	r3, 80052c6 <_sbrk_r+0x1a>
 80052c4:	6023      	str	r3, [r4, #0]
 80052c6:	bd38      	pop	{r3, r4, r5, pc}
 80052c8:	2000421c 	.word	0x2000421c

080052cc <__swhatbuf_r>:
 80052cc:	b570      	push	{r4, r5, r6, lr}
 80052ce:	460c      	mov	r4, r1
 80052d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052d4:	2900      	cmp	r1, #0
 80052d6:	b096      	sub	sp, #88	; 0x58
 80052d8:	4615      	mov	r5, r2
 80052da:	461e      	mov	r6, r3
 80052dc:	da0d      	bge.n	80052fa <__swhatbuf_r+0x2e>
 80052de:	89a3      	ldrh	r3, [r4, #12]
 80052e0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80052e4:	f04f 0100 	mov.w	r1, #0
 80052e8:	bf0c      	ite	eq
 80052ea:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80052ee:	2340      	movne	r3, #64	; 0x40
 80052f0:	2000      	movs	r0, #0
 80052f2:	6031      	str	r1, [r6, #0]
 80052f4:	602b      	str	r3, [r5, #0]
 80052f6:	b016      	add	sp, #88	; 0x58
 80052f8:	bd70      	pop	{r4, r5, r6, pc}
 80052fa:	466a      	mov	r2, sp
 80052fc:	f000 f848 	bl	8005390 <_fstat_r>
 8005300:	2800      	cmp	r0, #0
 8005302:	dbec      	blt.n	80052de <__swhatbuf_r+0x12>
 8005304:	9901      	ldr	r1, [sp, #4]
 8005306:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800530a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800530e:	4259      	negs	r1, r3
 8005310:	4159      	adcs	r1, r3
 8005312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005316:	e7eb      	b.n	80052f0 <__swhatbuf_r+0x24>

08005318 <__smakebuf_r>:
 8005318:	898b      	ldrh	r3, [r1, #12]
 800531a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800531c:	079d      	lsls	r5, r3, #30
 800531e:	4606      	mov	r6, r0
 8005320:	460c      	mov	r4, r1
 8005322:	d507      	bpl.n	8005334 <__smakebuf_r+0x1c>
 8005324:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005328:	6023      	str	r3, [r4, #0]
 800532a:	6123      	str	r3, [r4, #16]
 800532c:	2301      	movs	r3, #1
 800532e:	6163      	str	r3, [r4, #20]
 8005330:	b002      	add	sp, #8
 8005332:	bd70      	pop	{r4, r5, r6, pc}
 8005334:	ab01      	add	r3, sp, #4
 8005336:	466a      	mov	r2, sp
 8005338:	f7ff ffc8 	bl	80052cc <__swhatbuf_r>
 800533c:	9900      	ldr	r1, [sp, #0]
 800533e:	4605      	mov	r5, r0
 8005340:	4630      	mov	r0, r6
 8005342:	f7ff fb0f 	bl	8004964 <_malloc_r>
 8005346:	b948      	cbnz	r0, 800535c <__smakebuf_r+0x44>
 8005348:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800534c:	059a      	lsls	r2, r3, #22
 800534e:	d4ef      	bmi.n	8005330 <__smakebuf_r+0x18>
 8005350:	f023 0303 	bic.w	r3, r3, #3
 8005354:	f043 0302 	orr.w	r3, r3, #2
 8005358:	81a3      	strh	r3, [r4, #12]
 800535a:	e7e3      	b.n	8005324 <__smakebuf_r+0xc>
 800535c:	89a3      	ldrh	r3, [r4, #12]
 800535e:	6020      	str	r0, [r4, #0]
 8005360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005364:	81a3      	strh	r3, [r4, #12]
 8005366:	9b00      	ldr	r3, [sp, #0]
 8005368:	6163      	str	r3, [r4, #20]
 800536a:	9b01      	ldr	r3, [sp, #4]
 800536c:	6120      	str	r0, [r4, #16]
 800536e:	b15b      	cbz	r3, 8005388 <__smakebuf_r+0x70>
 8005370:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005374:	4630      	mov	r0, r6
 8005376:	f000 f81d 	bl	80053b4 <_isatty_r>
 800537a:	b128      	cbz	r0, 8005388 <__smakebuf_r+0x70>
 800537c:	89a3      	ldrh	r3, [r4, #12]
 800537e:	f023 0303 	bic.w	r3, r3, #3
 8005382:	f043 0301 	orr.w	r3, r3, #1
 8005386:	81a3      	strh	r3, [r4, #12]
 8005388:	89a3      	ldrh	r3, [r4, #12]
 800538a:	431d      	orrs	r5, r3
 800538c:	81a5      	strh	r5, [r4, #12]
 800538e:	e7cf      	b.n	8005330 <__smakebuf_r+0x18>

08005390 <_fstat_r>:
 8005390:	b538      	push	{r3, r4, r5, lr}
 8005392:	4d07      	ldr	r5, [pc, #28]	; (80053b0 <_fstat_r+0x20>)
 8005394:	2300      	movs	r3, #0
 8005396:	4604      	mov	r4, r0
 8005398:	4608      	mov	r0, r1
 800539a:	4611      	mov	r1, r2
 800539c:	602b      	str	r3, [r5, #0]
 800539e:	f7fb fc14 	bl	8000bca <_fstat>
 80053a2:	1c43      	adds	r3, r0, #1
 80053a4:	d102      	bne.n	80053ac <_fstat_r+0x1c>
 80053a6:	682b      	ldr	r3, [r5, #0]
 80053a8:	b103      	cbz	r3, 80053ac <_fstat_r+0x1c>
 80053aa:	6023      	str	r3, [r4, #0]
 80053ac:	bd38      	pop	{r3, r4, r5, pc}
 80053ae:	bf00      	nop
 80053b0:	2000421c 	.word	0x2000421c

080053b4 <_isatty_r>:
 80053b4:	b538      	push	{r3, r4, r5, lr}
 80053b6:	4d06      	ldr	r5, [pc, #24]	; (80053d0 <_isatty_r+0x1c>)
 80053b8:	2300      	movs	r3, #0
 80053ba:	4604      	mov	r4, r0
 80053bc:	4608      	mov	r0, r1
 80053be:	602b      	str	r3, [r5, #0]
 80053c0:	f7fb fc13 	bl	8000bea <_isatty>
 80053c4:	1c43      	adds	r3, r0, #1
 80053c6:	d102      	bne.n	80053ce <_isatty_r+0x1a>
 80053c8:	682b      	ldr	r3, [r5, #0]
 80053ca:	b103      	cbz	r3, 80053ce <_isatty_r+0x1a>
 80053cc:	6023      	str	r3, [r4, #0]
 80053ce:	bd38      	pop	{r3, r4, r5, pc}
 80053d0:	2000421c 	.word	0x2000421c

080053d4 <_init>:
 80053d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053d6:	bf00      	nop
 80053d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053da:	bc08      	pop	{r3}
 80053dc:	469e      	mov	lr, r3
 80053de:	4770      	bx	lr

080053e0 <_fini>:
 80053e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053e2:	bf00      	nop
 80053e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80053e6:	bc08      	pop	{r3}
 80053e8:	469e      	mov	lr, r3
 80053ea:	4770      	bx	lr
